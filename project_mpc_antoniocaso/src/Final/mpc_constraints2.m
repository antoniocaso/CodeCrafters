%%%%%%   Define constraint matrices for GPC (with output constraints)%%%%%%   CC*Du(future) - dd - du*u(k-1))-ddu*Dupast-dy*ypast <= 0%%%%%%  %%%%%%   Dumax is limits on input increments (assumed symetrical)%%%%%%   umax and umin are limits on the inputs%%%%%%   ymax and ymin are limits on the outputs%%%%%%   Output predictions are yfut=H*Dufut+P*Dupast+Q*ypast%%%%%%%%%%%%   nu is the control horizon%%%%%%   sizeu is the number of inputs/outputs%%%%%%%%%%%%  [CC,dd,du,ddu,dy] = mpc_constraints2(Dumax,umax,umin,ymax,ymin,sizeu,nu,H,P,Q);%%  %% Author: J.A. Rossiter  (email: J.A.Rossiter@shef.ac.uk)function [CC,dd,du,ddu,dy]  = mpc_constraints2(Dumax,umax,umin,ymax,ymin,sizeu,nu,H,P,Q);ny=size(H,1)/sizeu; %%% Prediction horizon%%%%%%%%%%%%% INPUTS AND INPUT RATES FIRST%%%% Set up constraints for each loop in turnfor j=1:sizeu;    d(1:2*nu,j) = ones(2*nu,1)*Dumax(j);    C(1:nu,1:nu,j) = eye(nu);    C(nu+1:2*nu,1:nu,j) = -eye(nu);        d(2*nu+1:4*nu,j) = [ones(nu,1)*umax(j);-ones(nu,1)*umin(j)];    d(4*nu+1:4*nu+2*ny,j) = [ones(ny,1)*ymax(j);-ones(ny,1)*ymin(j)];    C(2*nu+1:3*nu,1:nu,j) = tril(ones(nu,nu));    C(3*nu+1:4*nu,1:nu,j) = -tril(ones(nu,nu));    d1(2*nu+1:4*nu,j) = [-ones(nu,1);ones(nu,1)];    end%%%% Combine loop constraints into single inequality conditionfor i=1:sizeu;  CC(i:sizeu:4*sizeu*nu,i:sizeu:nu*sizeu) = C(:,:,i);  dd(i:sizeu:(4*nu+2*ny)*sizeu,1) = d(1:4*nu+2*ny,i);  du(i:sizeu:4*sizeu*nu,i) = d1(1:4*nu,i);end%%%%%%%%%%%%% END OF INPUTS AND INPUT RATES FIRST%%%%% Add output constraints detailsCC=[CC;H;-H];ddu=[zeros(nu*4*sizeu,size(P,2));-P;P];dy=[zeros(nu*4*sizeu,size(Q,2));-Q;Q];du=[du;zeros(2*ny*sizeu,sizeu)];