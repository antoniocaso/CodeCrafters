
Slave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d44  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005dc  08009ee8  08009ee8  00019ee8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4c4  0800a4c4  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a4c4  0800a4c4  0001a4c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a4cc  0800a4cc  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4cc  0800a4cc  0001a4cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a4d0  0800a4d0  0001a4d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800a4d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ddc  200001d8  0800a6ac  000201d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20004fb4  0800a6ac  00024fb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018a34  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000395b  00000000  00000000  00038c7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001580  00000000  00000000  0003c5e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010a4  00000000  00000000  0003db60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019a87  00000000  00000000  0003ec04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018449  00000000  00000000  0005868b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099e8c  00000000  00000000  00070ad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006a64  00000000  00000000  0010a960  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001113c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009ecc 	.word	0x08009ecc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	08009ecc 	.word	0x08009ecc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <Battery_Sensor>:
};



static void Battery_Sensor( void *pvParameters )
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]

    #if(VERBOSE == 1)
        printf("Begin Battery_Sensor at %ld\r\n", pdMS_TO_TICKS(xTaskGetTickCount()));
 8000ebc:	f004 fc74 	bl	80057a8 <xTaskGetTickCount>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ec6:	fb02 f303 	mul.w	r3, r2, r3
 8000eca:	4a20      	ldr	r2, [pc, #128]	; (8000f4c <Battery_Sensor+0x98>)
 8000ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8000ed0:	099b      	lsrs	r3, r3, #6
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	481e      	ldr	r0, [pc, #120]	; (8000f50 <Battery_Sensor+0x9c>)
 8000ed6:	f006 ffa1 	bl	8007e1c <iprintf>
    #endif


    /* Dummy value for the battery. */
    if(Global_Struct.Battery_Sensor > 0)
 8000eda:	4b1e      	ldr	r3, [pc, #120]	; (8000f54 <Battery_Sensor+0xa0>)
 8000edc:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	dd08      	ble.n	8000ef6 <Battery_Sensor+0x42>
        Global_Struct.Battery_Sensor = Global_Struct.Battery_Sensor - 1 ;
 8000ee4:	4b1b      	ldr	r3, [pc, #108]	; (8000f54 <Battery_Sensor+0xa0>)
 8000ee6:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000eea:	b29b      	uxth	r3, r3
 8000eec:	3b01      	subs	r3, #1
 8000eee:	b29b      	uxth	r3, r3
 8000ef0:	b21a      	sxth	r2, r3
 8000ef2:	4b18      	ldr	r3, [pc, #96]	; (8000f54 <Battery_Sensor+0xa0>)
 8000ef4:	831a      	strh	r2, [r3, #24]

    /* Checks the mutex before trying to edit the value for the battery. */
    osMutexAcquire(MutexHandle, osWaitForever);
 8000ef6:	4b18      	ldr	r3, [pc, #96]	; (8000f58 <Battery_Sensor+0xa4>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f04f 31ff 	mov.w	r1, #4294967295
 8000efe:	4618      	mov	r0, r3
 8000f00:	f002 ff08 	bl	8003d14 <osMutexAcquire>
    if(Global_Struct.Battery_Sensor < CRITICAL_BATTERY){
 8000f04:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <Battery_Sensor+0xa0>)
 8000f06:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8000f0a:	2b16      	cmp	r3, #22
 8000f0c:	dc02      	bgt.n	8000f14 <Battery_Sensor+0x60>
            Global_Struct.Battery_Sensor = 100;
 8000f0e:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <Battery_Sensor+0xa0>)
 8000f10:	2264      	movs	r2, #100	; 0x64
 8000f12:	831a      	strh	r2, [r3, #24]
    }
    osMutexRelease(MutexHandle);
 8000f14:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <Battery_Sensor+0xa4>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f002 ff46 	bl	8003daa <osMutexRelease>



    #if(VERBOSE == 1)
        printf("Exit Battery_Sensor at %ld. Battery Level: %d\r\n", pdMS_TO_TICKS(xTaskGetTickCount()), Global_Struct.Battery_Sensor);
 8000f1e:	f004 fc43 	bl	80057a8 <xTaskGetTickCount>
 8000f22:	4603      	mov	r3, r0
 8000f24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f28:	fb02 f303 	mul.w	r3, r2, r3
 8000f2c:	4a07      	ldr	r2, [pc, #28]	; (8000f4c <Battery_Sensor+0x98>)
 8000f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f32:	099b      	lsrs	r3, r3, #6
 8000f34:	4a07      	ldr	r2, [pc, #28]	; (8000f54 <Battery_Sensor+0xa0>)
 8000f36:	f9b2 2018 	ldrsh.w	r2, [r2, #24]
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4807      	ldr	r0, [pc, #28]	; (8000f5c <Battery_Sensor+0xa8>)
 8000f3e:	f006 ff6d 	bl	8007e1c <iprintf>
    #endif


}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	10624dd3 	.word	0x10624dd3
 8000f50:	08009ef0 	.word	0x08009ef0
 8000f54:	20000208 	.word	0x20000208
 8000f58:	20000240 	.word	0x20000240
 8000f5c:	08009f10 	.word	0x08009f10

08000f60 <Encoder>:



static void Encoder( void *pvParameters )
{
 8000f60:	b5b0      	push	{r4, r5, r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]

    #if(VERBOSE == 1)
        printf("Begin Encoder at %ld\r\n", pdMS_TO_TICKS(xTaskGetTickCount()));
 8000f68:	f004 fc1e 	bl	80057a8 <xTaskGetTickCount>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f72:	fb02 f303 	mul.w	r3, r2, r3
 8000f76:	4a19      	ldr	r2, [pc, #100]	; (8000fdc <Encoder+0x7c>)
 8000f78:	fba2 2303 	umull	r2, r3, r2, r3
 8000f7c:	099b      	lsrs	r3, r3, #6
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4817      	ldr	r0, [pc, #92]	; (8000fe0 <Encoder+0x80>)
 8000f82:	f006 ff4b 	bl	8007e1c <iprintf>
    #endif


    /* Dummy value for the encoder. */
    int64_t lectura=1000;
 8000f86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f8a:	f04f 0300 	mov.w	r3, #0
 8000f8e:	e9c7 2302 	strd	r2, r3, [r7, #8]
    Global_Struct.Encoder_Steps = lectura - Global_Struct.Encoder_PastReading;
 8000f92:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <Encoder+0x84>)
 8000f94:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000f98:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000f9c:	1a84      	subs	r4, r0, r2
 8000f9e:	eb61 0503 	sbc.w	r5, r1, r3
 8000fa2:	4b10      	ldr	r3, [pc, #64]	; (8000fe4 <Encoder+0x84>)
 8000fa4:	e9c3 4504 	strd	r4, r5, [r3, #16]
    Global_Struct.Encoder_PastReading = lectura;
 8000fa8:	490e      	ldr	r1, [pc, #56]	; (8000fe4 <Encoder+0x84>)
 8000faa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000fae:	e9c1 2302 	strd	r2, r3, [r1, #8]




    #if(VERBOSE == 1)
        printf("Exit Encoder at %ld. Encoder Value: %ld\r\n", pdMS_TO_TICKS(xTaskGetTickCount()), Global_Struct.Encoder_Steps);
 8000fb2:	f004 fbf9 	bl	80057a8 <xTaskGetTickCount>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000fbc:	fb02 f303 	mul.w	r3, r2, r3
 8000fc0:	4a06      	ldr	r2, [pc, #24]	; (8000fdc <Encoder+0x7c>)
 8000fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000fc6:	0999      	lsrs	r1, r3, #6
 8000fc8:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <Encoder+0x84>)
 8000fca:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000fce:	4806      	ldr	r0, [pc, #24]	; (8000fe8 <Encoder+0x88>)
 8000fd0:	f006 ff24 	bl	8007e1c <iprintf>
    #endif


}
 8000fd4:	bf00      	nop
 8000fd6:	3710      	adds	r7, #16
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bdb0      	pop	{r4, r5, r7, pc}
 8000fdc:	10624dd3 	.word	0x10624dd3
 8000fe0:	08009f40 	.word	0x08009f40
 8000fe4:	20000208 	.word	0x20000208
 8000fe8:	08009f58 	.word	0x08009f58

08000fec <Temperature_Sensor>:




static void Temperature_Sensor( void *pvParameters )
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
    #if(VERBOSE == 1)
        printf("Begin Temperature_Sensor at %ld\r\n", pdMS_TO_TICKS(xTaskGetTickCount()));
 8000ff4:	f004 fbd8 	bl	80057a8 <xTaskGetTickCount>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ffe:	fb02 f303 	mul.w	r3, r2, r3
 8001002:	4a0f      	ldr	r2, [pc, #60]	; (8001040 <Temperature_Sensor+0x54>)
 8001004:	fba2 2303 	umull	r2, r3, r2, r3
 8001008:	099b      	lsrs	r3, r3, #6
 800100a:	4619      	mov	r1, r3
 800100c:	480d      	ldr	r0, [pc, #52]	; (8001044 <Temperature_Sensor+0x58>)
 800100e:	f006 ff05 	bl	8007e1c <iprintf>
    #endif


    /* Dummy value for temperature sensor. */
    Global_Struct.Temperature_Sensor = 30;
 8001012:	4b0d      	ldr	r3, [pc, #52]	; (8001048 <Temperature_Sensor+0x5c>)
 8001014:	221e      	movs	r2, #30
 8001016:	85da      	strh	r2, [r3, #46]	; 0x2e



    #if(VERBOSE == 1)
        printf("Exit Temperature_Sensor at %ld\r\n", pdMS_TO_TICKS(xTaskGetTickCount()));
 8001018:	f004 fbc6 	bl	80057a8 <xTaskGetTickCount>
 800101c:	4603      	mov	r3, r0
 800101e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001022:	fb02 f303 	mul.w	r3, r2, r3
 8001026:	4a06      	ldr	r2, [pc, #24]	; (8001040 <Temperature_Sensor+0x54>)
 8001028:	fba2 2303 	umull	r2, r3, r2, r3
 800102c:	099b      	lsrs	r3, r3, #6
 800102e:	4619      	mov	r1, r3
 8001030:	4806      	ldr	r0, [pc, #24]	; (800104c <Temperature_Sensor+0x60>)
 8001032:	f006 fef3 	bl	8007e1c <iprintf>
    #endif

}
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	10624dd3 	.word	0x10624dd3
 8001044:	08009f84 	.word	0x08009f84
 8001048:	20000208 	.word	0x20000208
 800104c:	08009fa8 	.word	0x08009fa8

08001050 <Communication>:




static void Communication( void *pvParameters )
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
    #if(VERBOSE == 1)
        printf("Begin Communication at %ld\r\n", pdMS_TO_TICKS(xTaskGetTickCount()));
 8001058:	f004 fba6 	bl	80057a8 <xTaskGetTickCount>
 800105c:	4603      	mov	r3, r0
 800105e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001062:	fb02 f303 	mul.w	r3, r2, r3
 8001066:	4a1b      	ldr	r2, [pc, #108]	; (80010d4 <Communication+0x84>)
 8001068:	fba2 2303 	umull	r2, r3, r2, r3
 800106c:	099b      	lsrs	r3, r3, #6
 800106e:	4619      	mov	r1, r3
 8001070:	4819      	ldr	r0, [pc, #100]	; (80010d8 <Communication+0x88>)
 8001072:	f006 fed3 	bl	8007e1c <iprintf>

    /*
        This delay is bigger than the normal comunication but we've considered some errors
        during the communication.
    */
    HAL_Delay(20);
 8001076:	2014      	movs	r0, #20
 8001078:	f000 ffe2 	bl	8002040 <HAL_Delay>

    /*
        Dummy condition which sets 0 or 1 to the control_var, based on the tick count,
        if it's even or odd.
    */
    if(pdMS_TO_TICKS(xTaskGetTickCount()) % 2 == 0)
 800107c:	f004 fb94 	bl	80057a8 <xTaskGetTickCount>
 8001080:	4603      	mov	r3, r0
 8001082:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001086:	fb02 f303 	mul.w	r3, r2, r3
 800108a:	4a12      	ldr	r2, [pc, #72]	; (80010d4 <Communication+0x84>)
 800108c:	fba2 2303 	umull	r2, r3, r2, r3
 8001090:	099b      	lsrs	r3, r3, #6
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	2b00      	cmp	r3, #0
 8001098:	d104      	bne.n	80010a4 <Communication+0x54>
        Global_Struct.Control_Var = 0;
 800109a:	4b10      	ldr	r3, [pc, #64]	; (80010dc <Communication+0x8c>)
 800109c:	2200      	movs	r2, #0
 800109e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 80010a2:	e003      	b.n	80010ac <Communication+0x5c>
    else
        Global_Struct.Control_Var = 1;
 80010a4:	4b0d      	ldr	r3, [pc, #52]	; (80010dc <Communication+0x8c>)
 80010a6:	2201      	movs	r2, #1
 80010a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30



    #if(VERBOSE == 1)
        printf("Exit Communication at %ld\r\n", pdMS_TO_TICKS(xTaskGetTickCount()));
 80010ac:	f004 fb7c 	bl	80057a8 <xTaskGetTickCount>
 80010b0:	4603      	mov	r3, r0
 80010b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010b6:	fb02 f303 	mul.w	r3, r2, r3
 80010ba:	4a06      	ldr	r2, [pc, #24]	; (80010d4 <Communication+0x84>)
 80010bc:	fba2 2303 	umull	r2, r3, r2, r3
 80010c0:	099b      	lsrs	r3, r3, #6
 80010c2:	4619      	mov	r1, r3
 80010c4:	4806      	ldr	r0, [pc, #24]	; (80010e0 <Communication+0x90>)
 80010c6:	f006 fea9 	bl	8007e1c <iprintf>
    #endif

}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	10624dd3 	.word	0x10624dd3
 80010d8:	08009fcc 	.word	0x08009fcc
 80010dc:	20000208 	.word	0x20000208
 80010e0:	08009fec 	.word	0x08009fec

080010e4 <Execution>:


static void Execution( void *pvParameters )
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
    #if(VERBOSE == 1)
        printf("Begin Execution at %ld\r\n", pdMS_TO_TICKS(xTaskGetTickCount()));
 80010ec:	f004 fb5c 	bl	80057a8 <xTaskGetTickCount>
 80010f0:	4603      	mov	r3, r0
 80010f2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010f6:	fb02 f303 	mul.w	r3, r2, r3
 80010fa:	4a16      	ldr	r2, [pc, #88]	; (8001154 <Execution+0x70>)
 80010fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001100:	099b      	lsrs	r3, r3, #6
 8001102:	4619      	mov	r1, r3
 8001104:	4814      	ldr	r0, [pc, #80]	; (8001158 <Execution+0x74>)
 8001106:	f006 fe89 	bl	8007e1c <iprintf>
            the rover turns on the leds for visibility purposes,
            sets the speed to 0,
            resets the control_var back to 0.
    */

    if(Global_Struct.Control_Var == 1){         //Emergency Stop
 800110a:	4b14      	ldr	r3, [pc, #80]	; (800115c <Execution+0x78>)
 800110c:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 8001110:	2b01      	cmp	r3, #1
 8001112:	d10b      	bne.n	800112c <Execution+0x48>
        int8_t led = 1;
 8001114:	2301      	movs	r3, #1
 8001116:	75fb      	strb	r3, [r7, #23]
        int64_t velocita = 0;
 8001118:	f04f 0200 	mov.w	r2, #0
 800111c:	f04f 0300 	mov.w	r3, #0
 8001120:	e9c7 2302 	strd	r2, r3, [r7, #8]
        Global_Struct.Control_Var = 0;
 8001124:	4b0d      	ldr	r3, [pc, #52]	; (800115c <Execution+0x78>)
 8001126:	2200      	movs	r2, #0
 8001128:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    }


    #if(VERBOSE == 1)
        printf("Exit Execution at %ld\r\n", pdMS_TO_TICKS(xTaskGetTickCount()));
 800112c:	f004 fb3c 	bl	80057a8 <xTaskGetTickCount>
 8001130:	4603      	mov	r3, r0
 8001132:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001136:	fb02 f303 	mul.w	r3, r2, r3
 800113a:	4a06      	ldr	r2, [pc, #24]	; (8001154 <Execution+0x70>)
 800113c:	fba2 2303 	umull	r2, r3, r2, r3
 8001140:	099b      	lsrs	r3, r3, #6
 8001142:	4619      	mov	r1, r3
 8001144:	4806      	ldr	r0, [pc, #24]	; (8001160 <Execution+0x7c>)
 8001146:	f006 fe69 	bl	8007e1c <iprintf>
    #endif

}
 800114a:	bf00      	nop
 800114c:	3718      	adds	r7, #24
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	10624dd3 	.word	0x10624dd3
 8001158:	0800a008 	.word	0x0800a008
 800115c:	20000208 	.word	0x20000208
 8001160:	0800a024 	.word	0x0800a024

08001164 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af06      	add	r7, sp, #24
    vSchedulerInit();
 800116a:	f000 fcdb 	bl	8001b24 <vSchedulerInit>

    printf("------------Hello From FreeRTOS------------\r\n");
 800116e:	4851      	ldr	r0, [pc, #324]	; (80012b4 <MX_FREERTOS_Init+0x150>)
 8001170:	f006 feba 	bl	8007ee8 <puts>


    vSchedulerInit();
 8001174:	f000 fcd6 	bl	8001b24 <vSchedulerInit>

    /*
        Creation of both periodic tasks, Ultrasound and Check_Danger.
        Check the doc for more details.
    */
    vSchedulerPeriodicTaskCreate(Encoder, "Encoder", configMINIMAL_STACK_SIZE, NULL, 1, &xHandle2,
 8001178:	231e      	movs	r3, #30
 800117a:	9305      	str	r3, [sp, #20]
 800117c:	230a      	movs	r3, #10
 800117e:	9304      	str	r3, [sp, #16]
 8001180:	23a0      	movs	r3, #160	; 0xa0
 8001182:	9303      	str	r3, [sp, #12]
 8001184:	2300      	movs	r3, #0
 8001186:	9302      	str	r3, [sp, #8]
 8001188:	4b4b      	ldr	r3, [pc, #300]	; (80012b8 <MX_FREERTOS_Init+0x154>)
 800118a:	9301      	str	r3, [sp, #4]
 800118c:	2301      	movs	r3, #1
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	2300      	movs	r3, #0
 8001192:	2280      	movs	r2, #128	; 0x80
 8001194:	4949      	ldr	r1, [pc, #292]	; (80012bc <MX_FREERTOS_Init+0x158>)
 8001196:	484a      	ldr	r0, [pc, #296]	; (80012c0 <MX_FREERTOS_Init+0x15c>)
 8001198:	f000 f9dc 	bl	8001554 <vSchedulerPeriodicTaskCreate>
            pdMS_TO_TICKS(0),   //phase
            pdMS_TO_TICKS(160), //period
            pdMS_TO_TICKS(10),  //WCET
            pdMS_TO_TICKS(30)); //Deadline
    vSchedulerPeriodicTaskCreate(Battery_Sensor, "Battery_Sensor", configMINIMAL_STACK_SIZE, NULL, 2, &xHandle1,
 800119c:	231e      	movs	r3, #30
 800119e:	9305      	str	r3, [sp, #20]
 80011a0:	230a      	movs	r3, #10
 80011a2:	9304      	str	r3, [sp, #16]
 80011a4:	23a0      	movs	r3, #160	; 0xa0
 80011a6:	9303      	str	r3, [sp, #12]
 80011a8:	230a      	movs	r3, #10
 80011aa:	9302      	str	r3, [sp, #8]
 80011ac:	4b45      	ldr	r3, [pc, #276]	; (80012c4 <MX_FREERTOS_Init+0x160>)
 80011ae:	9301      	str	r3, [sp, #4]
 80011b0:	2302      	movs	r3, #2
 80011b2:	9300      	str	r3, [sp, #0]
 80011b4:	2300      	movs	r3, #0
 80011b6:	2280      	movs	r2, #128	; 0x80
 80011b8:	4943      	ldr	r1, [pc, #268]	; (80012c8 <MX_FREERTOS_Init+0x164>)
 80011ba:	4844      	ldr	r0, [pc, #272]	; (80012cc <MX_FREERTOS_Init+0x168>)
 80011bc:	f000 f9ca 	bl	8001554 <vSchedulerPeriodicTaskCreate>
            pdMS_TO_TICKS(10),  //phase
            pdMS_TO_TICKS(160), //period
            pdMS_TO_TICKS(10),  //WCET
            pdMS_TO_TICKS(30)); //Deadline

    vSchedulerPeriodicTaskCreate(Temperature_Sensor, "Temperature_Sensor", configMINIMAL_STACK_SIZE, NULL, 3, &xHandle3,
 80011c0:	231e      	movs	r3, #30
 80011c2:	9305      	str	r3, [sp, #20]
 80011c4:	230a      	movs	r3, #10
 80011c6:	9304      	str	r3, [sp, #16]
 80011c8:	23a0      	movs	r3, #160	; 0xa0
 80011ca:	9303      	str	r3, [sp, #12]
 80011cc:	230a      	movs	r3, #10
 80011ce:	9302      	str	r3, [sp, #8]
 80011d0:	4b3f      	ldr	r3, [pc, #252]	; (80012d0 <MX_FREERTOS_Init+0x16c>)
 80011d2:	9301      	str	r3, [sp, #4]
 80011d4:	2303      	movs	r3, #3
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	2300      	movs	r3, #0
 80011da:	2280      	movs	r2, #128	; 0x80
 80011dc:	493d      	ldr	r1, [pc, #244]	; (80012d4 <MX_FREERTOS_Init+0x170>)
 80011de:	483e      	ldr	r0, [pc, #248]	; (80012d8 <MX_FREERTOS_Init+0x174>)
 80011e0:	f000 f9b8 	bl	8001554 <vSchedulerPeriodicTaskCreate>
            pdMS_TO_TICKS(10),  //phase
            pdMS_TO_TICKS(160), //period
            pdMS_TO_TICKS(10),  //WCET
            pdMS_TO_TICKS(30)); //Deadline

    vSchedulerPeriodicTaskCreate(Communication, "Communication", configMINIMAL_STACK_SIZE, NULL, 4, &xHandle4,
 80011e4:	2382      	movs	r3, #130	; 0x82
 80011e6:	9305      	str	r3, [sp, #20]
 80011e8:	2332      	movs	r3, #50	; 0x32
 80011ea:	9304      	str	r3, [sp, #16]
 80011ec:	23a0      	movs	r3, #160	; 0xa0
 80011ee:	9303      	str	r3, [sp, #12]
 80011f0:	2350      	movs	r3, #80	; 0x50
 80011f2:	9302      	str	r3, [sp, #8]
 80011f4:	4b39      	ldr	r3, [pc, #228]	; (80012dc <MX_FREERTOS_Init+0x178>)
 80011f6:	9301      	str	r3, [sp, #4]
 80011f8:	2304      	movs	r3, #4
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	2300      	movs	r3, #0
 80011fe:	2280      	movs	r2, #128	; 0x80
 8001200:	4937      	ldr	r1, [pc, #220]	; (80012e0 <MX_FREERTOS_Init+0x17c>)
 8001202:	4838      	ldr	r0, [pc, #224]	; (80012e4 <MX_FREERTOS_Init+0x180>)
 8001204:	f000 f9a6 	bl	8001554 <vSchedulerPeriodicTaskCreate>
            pdMS_TO_TICKS(80),  //phase
            pdMS_TO_TICKS(160), //period
            pdMS_TO_TICKS(50),  //WCET
            pdMS_TO_TICKS(130));//Deadline
    vSchedulerPeriodicTaskCreate(Execution, "Execution", configMINIMAL_STACK_SIZE, NULL, 5, &xHandle5,
 8001208:	238c      	movs	r3, #140	; 0x8c
 800120a:	9305      	str	r3, [sp, #20]
 800120c:	230a      	movs	r3, #10
 800120e:	9304      	str	r3, [sp, #16]
 8001210:	23a0      	movs	r3, #160	; 0xa0
 8001212:	9303      	str	r3, [sp, #12]
 8001214:	2382      	movs	r3, #130	; 0x82
 8001216:	9302      	str	r3, [sp, #8]
 8001218:	4b33      	ldr	r3, [pc, #204]	; (80012e8 <MX_FREERTOS_Init+0x184>)
 800121a:	9301      	str	r3, [sp, #4]
 800121c:	2305      	movs	r3, #5
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	2300      	movs	r3, #0
 8001222:	2280      	movs	r2, #128	; 0x80
 8001224:	4931      	ldr	r1, [pc, #196]	; (80012ec <MX_FREERTOS_Init+0x188>)
 8001226:	4832      	ldr	r0, [pc, #200]	; (80012f0 <MX_FREERTOS_Init+0x18c>)
 8001228:	f000 f994 	bl	8001554 <vSchedulerPeriodicTaskCreate>
            pdMS_TO_TICKS(160), //period
            pdMS_TO_TICKS(10),  //WCET
            pdMS_TO_TICKS(140));//Deadline

    /* Global struct initialization. */
    Global_Struct.Distance = 0;
 800122c:	4b31      	ldr	r3, [pc, #196]	; (80012f4 <MX_FREERTOS_Init+0x190>)
 800122e:	f04f 0200 	mov.w	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
    Global_Struct.Encoder_PastReading = 0;
 8001234:	492f      	ldr	r1, [pc, #188]	; (80012f4 <MX_FREERTOS_Init+0x190>)
 8001236:	f04f 0200 	mov.w	r2, #0
 800123a:	f04f 0300 	mov.w	r3, #0
 800123e:	e9c1 2302 	strd	r2, r3, [r1, #8]
    Global_Struct.Encoder_Steps = 0;
 8001242:	492c      	ldr	r1, [pc, #176]	; (80012f4 <MX_FREERTOS_Init+0x190>)
 8001244:	f04f 0200 	mov.w	r2, #0
 8001248:	f04f 0300 	mov.w	r3, #0
 800124c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    Global_Struct.Battery_Sensor = 100;
 8001250:	4b28      	ldr	r3, [pc, #160]	; (80012f4 <MX_FREERTOS_Init+0x190>)
 8001252:	2264      	movs	r2, #100	; 0x64
 8001254:	831a      	strh	r2, [r3, #24]
    Global_Struct.PSX[0] = 0;
 8001256:	4b27      	ldr	r3, [pc, #156]	; (80012f4 <MX_FREERTOS_Init+0x190>)
 8001258:	2200      	movs	r2, #0
 800125a:	835a      	strh	r2, [r3, #26]
    Global_Struct.PSX[1] = 0;
 800125c:	4b25      	ldr	r3, [pc, #148]	; (80012f4 <MX_FREERTOS_Init+0x190>)
 800125e:	2200      	movs	r2, #0
 8001260:	839a      	strh	r2, [r3, #28]
    Global_Struct.PSX[2] = 0;
 8001262:	4b24      	ldr	r3, [pc, #144]	; (80012f4 <MX_FREERTOS_Init+0x190>)
 8001264:	2200      	movs	r2, #0
 8001266:	83da      	strh	r2, [r3, #30]
    Global_Struct.PSX[3] = 0;
 8001268:	4b22      	ldr	r3, [pc, #136]	; (80012f4 <MX_FREERTOS_Init+0x190>)
 800126a:	2200      	movs	r2, #0
 800126c:	841a      	strh	r2, [r3, #32]
    Global_Struct.PSX[4] = 0;
 800126e:	4b21      	ldr	r3, [pc, #132]	; (80012f4 <MX_FREERTOS_Init+0x190>)
 8001270:	2200      	movs	r2, #0
 8001272:	845a      	strh	r2, [r3, #34]	; 0x22
    Global_Struct.PSX[5] = 0;
 8001274:	4b1f      	ldr	r3, [pc, #124]	; (80012f4 <MX_FREERTOS_Init+0x190>)
 8001276:	2200      	movs	r2, #0
 8001278:	849a      	strh	r2, [r3, #36]	; 0x24
    Global_Struct.PSX[6] = 0;
 800127a:	4b1e      	ldr	r3, [pc, #120]	; (80012f4 <MX_FREERTOS_Init+0x190>)
 800127c:	2200      	movs	r2, #0
 800127e:	84da      	strh	r2, [r3, #38]	; 0x26
    Global_Struct.PSX[7] = 0;
 8001280:	4b1c      	ldr	r3, [pc, #112]	; (80012f4 <MX_FREERTOS_Init+0x190>)
 8001282:	2200      	movs	r2, #0
 8001284:	851a      	strh	r2, [r3, #40]	; 0x28
    Global_Struct.PSX[8] = 0;
 8001286:	4b1b      	ldr	r3, [pc, #108]	; (80012f4 <MX_FREERTOS_Init+0x190>)
 8001288:	2200      	movs	r2, #0
 800128a:	855a      	strh	r2, [r3, #42]	; 0x2a
    Global_Struct.Accelerometer = 0;
 800128c:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <MX_FREERTOS_Init+0x190>)
 800128e:	2200      	movs	r2, #0
 8001290:	859a      	strh	r2, [r3, #44]	; 0x2c
    Global_Struct.Temperature_Sensor = 0;
 8001292:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <MX_FREERTOS_Init+0x190>)
 8001294:	2200      	movs	r2, #0
 8001296:	85da      	strh	r2, [r3, #46]	; 0x2e
    Global_Struct.Control_Var = 0;
 8001298:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <MX_FREERTOS_Init+0x190>)
 800129a:	2200      	movs	r2, #0
 800129c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initializes the mutex */
    MutexHandle = osMutexNew(&Mutex_attributes);
 80012a0:	4815      	ldr	r0, [pc, #84]	; (80012f8 <MX_FREERTOS_Init+0x194>)
 80012a2:	f002 fcb1 	bl	8003c08 <osMutexNew>
 80012a6:	4603      	mov	r3, r0
 80012a8:	4a14      	ldr	r2, [pc, #80]	; (80012fc <MX_FREERTOS_Init+0x198>)
 80012aa:	6013      	str	r3, [r2, #0]

}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	0800a03c 	.word	0x0800a03c
 80012b8:	200001f8 	.word	0x200001f8
 80012bc:	0800a06c 	.word	0x0800a06c
 80012c0:	08000f61 	.word	0x08000f61
 80012c4:	200001f4 	.word	0x200001f4
 80012c8:	0800a074 	.word	0x0800a074
 80012cc:	08000eb5 	.word	0x08000eb5
 80012d0:	200001fc 	.word	0x200001fc
 80012d4:	0800a084 	.word	0x0800a084
 80012d8:	08000fed 	.word	0x08000fed
 80012dc:	20000200 	.word	0x20000200
 80012e0:	0800a098 	.word	0x0800a098
 80012e4:	08001051 	.word	0x08001051
 80012e8:	20000204 	.word	0x20000204
 80012ec:	0800a0a8 	.word	0x0800a0a8
 80012f0:	080010e5 	.word	0x080010e5
 80012f4:	20000208 	.word	0x20000208
 80012f8:	0800a12c 	.word	0x0800a12c
 80012fc:	20000240 	.word	0x20000240

08001300 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001308:	1d39      	adds	r1, r7, #4
 800130a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800130e:	2201      	movs	r2, #1
 8001310:	4803      	ldr	r0, [pc, #12]	; (8001320 <__io_putchar+0x20>)
 8001312:	f002 f876 	bl	8003402 <HAL_UART_Transmit>
  return ch;
 8001316:	687b      	ldr	r3, [r7, #4]
}
 8001318:	4618      	mov	r0, r3
 800131a:	3708      	adds	r7, #8
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	20000430 	.word	0x20000430

08001324 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001328:	f000 fe48 	bl	8001fbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800132c:	f000 f80a 	bl	8001344 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */
  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  MX_USART2_UART_Init();
 8001330:	f000 fda8 	bl	8001e84 <MX_USART2_UART_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001334:	f002 fc1e 	bl	8003b74 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001338:	f7ff ff14 	bl	8001164 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800133c:	f002 fc3e 	bl	8003bbc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001340:	e7fe      	b.n	8001340 <main+0x1c>
	...

08001344 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b094      	sub	sp, #80	; 0x50
 8001348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800134a:	f107 0320 	add.w	r3, r7, #32
 800134e:	2230      	movs	r2, #48	; 0x30
 8001350:	2100      	movs	r1, #0
 8001352:	4618      	mov	r0, r3
 8001354:	f006 fea8 	bl	80080a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001358:	f107 030c 	add.w	r3, r7, #12
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001368:	2300      	movs	r3, #0
 800136a:	60bb      	str	r3, [r7, #8]
 800136c:	4b23      	ldr	r3, [pc, #140]	; (80013fc <SystemClock_Config+0xb8>)
 800136e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001370:	4a22      	ldr	r2, [pc, #136]	; (80013fc <SystemClock_Config+0xb8>)
 8001372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001376:	6413      	str	r3, [r2, #64]	; 0x40
 8001378:	4b20      	ldr	r3, [pc, #128]	; (80013fc <SystemClock_Config+0xb8>)
 800137a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001380:	60bb      	str	r3, [r7, #8]
 8001382:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001384:	2300      	movs	r3, #0
 8001386:	607b      	str	r3, [r7, #4]
 8001388:	4b1d      	ldr	r3, [pc, #116]	; (8001400 <SystemClock_Config+0xbc>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001390:	4a1b      	ldr	r2, [pc, #108]	; (8001400 <SystemClock_Config+0xbc>)
 8001392:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001396:	6013      	str	r3, [r2, #0]
 8001398:	4b19      	ldr	r3, [pc, #100]	; (8001400 <SystemClock_Config+0xbc>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013a0:	607b      	str	r3, [r7, #4]
 80013a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013a4:	2302      	movs	r3, #2
 80013a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013a8:	2301      	movs	r3, #1
 80013aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013ac:	2310      	movs	r3, #16
 80013ae:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013b0:	2300      	movs	r3, #0
 80013b2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013b4:	f107 0320 	add.w	r3, r7, #32
 80013b8:	4618      	mov	r0, r3
 80013ba:	f001 f8cb 	bl	8002554 <HAL_RCC_OscConfig>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80013c4:	f000 f830 	bl	8001428 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013c8:	230f      	movs	r3, #15
 80013ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80013cc:	2300      	movs	r3, #0
 80013ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013d8:	2300      	movs	r3, #0
 80013da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013dc:	f107 030c 	add.w	r3, r7, #12
 80013e0:	2100      	movs	r1, #0
 80013e2:	4618      	mov	r0, r3
 80013e4:	f001 fb2e 	bl	8002a44 <HAL_RCC_ClockConfig>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80013ee:	f000 f81b 	bl	8001428 <Error_Handler>
  }
}
 80013f2:	bf00      	nop
 80013f4:	3750      	adds	r7, #80	; 0x50
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40023800 	.word	0x40023800
 8001400:	40007000 	.word	0x40007000

08001404 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM11) {
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a04      	ldr	r2, [pc, #16]	; (8001424 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d101      	bne.n	800141a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001416:	f000 fdf3 	bl	8002000 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40014800 	.word	0x40014800

08001428 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800142c:	b672      	cpsid	i
}
 800142e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001430:	e7fe      	b.n	8001430 <Error_Handler+0x8>
	...

08001434 <prvInitTCBArray>:
		return -1;
	}

	/* Initializes xTCBArray. */
	static void prvInitTCBArray( void )
	{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
	UBaseType_t uxIndex;
		for( uxIndex = 0; uxIndex < schedMAX_NUMBER_OF_PERIODIC_TASKS; uxIndex++)
 800143a:	2300      	movs	r3, #0
 800143c:	607b      	str	r3, [r7, #4]
 800143e:	e00c      	b.n	800145a <prvInitTCBArray+0x26>
		{
			xTCBArray[ uxIndex ].xInUse = pdFALSE;
 8001440:	490b      	ldr	r1, [pc, #44]	; (8001470 <prvInitTCBArray+0x3c>)
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	4613      	mov	r3, r2
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	4413      	add	r3, r2
 800144a:	011b      	lsls	r3, r3, #4
 800144c:	440b      	add	r3, r1
 800144e:	333c      	adds	r3, #60	; 0x3c
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
		for( uxIndex = 0; uxIndex < schedMAX_NUMBER_OF_PERIODIC_TASKS; uxIndex++)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	3301      	adds	r3, #1
 8001458:	607b      	str	r3, [r7, #4]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2b04      	cmp	r3, #4
 800145e:	d9ef      	bls.n	8001440 <prvInitTCBArray+0xc>
		}
	}
 8001460:	bf00      	nop
 8001462:	bf00      	nop
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	20000248 	.word	0x20000248

08001474 <prvFindEmptyElementIndexTCB>:

	/* Find index for an empty entry in xTCBArray. Returns -1 if there is no empty entry. */
	static BaseType_t prvFindEmptyElementIndexTCB( void )
	{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
	BaseType_t xIndex;
		for( xIndex = 0; xIndex < schedMAX_NUMBER_OF_PERIODIC_TASKS; xIndex++ )
 800147a:	2300      	movs	r3, #0
 800147c:	607b      	str	r3, [r7, #4]
 800147e:	e00f      	b.n	80014a0 <prvFindEmptyElementIndexTCB+0x2c>
		{
			if( pdFALSE == xTCBArray[ xIndex ].xInUse )
 8001480:	490d      	ldr	r1, [pc, #52]	; (80014b8 <prvFindEmptyElementIndexTCB+0x44>)
 8001482:	687a      	ldr	r2, [r7, #4]
 8001484:	4613      	mov	r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	4413      	add	r3, r2
 800148a:	011b      	lsls	r3, r3, #4
 800148c:	440b      	add	r3, r1
 800148e:	333c      	adds	r3, #60	; 0x3c
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d101      	bne.n	800149a <prvFindEmptyElementIndexTCB+0x26>
			{
				return xIndex;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	e007      	b.n	80014aa <prvFindEmptyElementIndexTCB+0x36>
		for( xIndex = 0; xIndex < schedMAX_NUMBER_OF_PERIODIC_TASKS; xIndex++ )
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	3301      	adds	r3, #1
 800149e:	607b      	str	r3, [r7, #4]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2b04      	cmp	r3, #4
 80014a4:	ddec      	ble.n	8001480 <prvFindEmptyElementIndexTCB+0xc>
			}
		}

		return -1;
 80014a6:	f04f 33ff 	mov.w	r3, #4294967295
	}
 80014aa:	4618      	mov	r0, r3
 80014ac:	370c      	adds	r7, #12
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
 80014b6:	bf00      	nop
 80014b8:	20000248 	.word	0x20000248

080014bc <prvPeriodicTaskCode>:
#endif /* schedSCHEDULING_POLICY_EDF */

/* The whole function code that is executed by every periodic task.
 * This function wraps the task code specified by the user. */
static void prvPeriodicTaskCode( void *pvParameters )
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
SchedTCB_t *pxThisTask = ( SchedTCB_t * ) pvTaskGetThreadLocalStoragePointer( xTaskGetCurrentTaskHandle(), schedTHREAD_LOCAL_STORAGE_POINTER_INDEX );
 80014c4:	f004 fd2c 	bl	8005f20 <xTaskGetCurrentTaskHandle>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2100      	movs	r1, #0
 80014cc:	4618      	mov	r0, r3
 80014ce:	f004 fc3f 	bl	8005d50 <pvTaskGetThreadLocalStoragePointer>
 80014d2:	60f8      	str	r0, [r7, #12]
	configASSERT( NULL != pxThisTask );
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d10a      	bne.n	80014f0 <prvPeriodicTaskCode+0x34>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80014da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80014de:	f383 8811 	msr	BASEPRI, r3
 80014e2:	f3bf 8f6f 	isb	sy
 80014e6:	f3bf 8f4f 	dsb	sy
 80014ea:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80014ec:	bf00      	nop
 80014ee:	e7fe      	b.n	80014ee <prvPeriodicTaskCode+0x32>

	if( 0 != pxThisTask->xReleaseTime )
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d008      	beq.n	800150a <prvPeriodicTaskCode+0x4e>
	{
		vTaskDelayUntil( &pxThisTask->xLastWakeTime, pxThisTask->xReleaseTime );
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f103 0228 	add.w	r2, r3, #40	; 0x28
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	699b      	ldr	r3, [r3, #24]
 8001502:	4619      	mov	r1, r3
 8001504:	4610      	mov	r0, r2
 8001506:	f003 feaf 	bl	8005268 <vTaskDelayUntil>
	}

	#if( schedUSE_TIMING_ERROR_DETECTION_DEADLINE == 1 )
		pxThisTask->xExecutedOnce = pdTRUE;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	2201      	movs	r2, #1
 800150e:	641a      	str	r2, [r3, #64]	; 0x40
	#endif /* schedUSE_TIMING_ERROR_DETECTION_DEADLINE */
	if( 0 == pxThisTask->xReleaseTime )
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d103      	bne.n	8001520 <prvPeriodicTaskCode+0x64>
	{
		pxThisTask->xLastWakeTime = xSystemStartTime;
 8001518:	4b0d      	ldr	r3, [pc, #52]	; (8001550 <prvPeriodicTaskCode+0x94>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	629a      	str	r2, [r3, #40]	; 0x28
			#if( schedEDF_NAIVE == 1 )
				/* Wake up the scheduler task to update priorities of all periodic tasks. */
				prvWakeScheduler();
			#endif /* schedEDF_NAIVE */
		#endif /* schedSCHEDULING_POLICY_EDF */
		pxThisTask->xWorkIsDone = pdFALSE;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2200      	movs	r2, #0
 8001524:	635a      	str	r2, [r3, #52]	; 0x34
		printf( "tickcount %d Task %s Abs deadline %d lastWakeTime %d prio %d Handle %x\r\n", xTaskGetTickCount(), pxThisTask->pcName, pxThisTask->xAbsoluteDeadline, pxThisTask->xLastWakeTime, uxTaskPriorityGet( NULL ), *pxThisTask->pxTaskHandle );
		taskEXIT_CRITICAL();
		*/

		/* Execute the task function specified by the user. */
		pxThisTask->pvTaskCode( pvParameters );
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	4798      	blx	r3

		pxThisTask->xWorkIsDone = pdTRUE;
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2201      	movs	r2, #1
 8001532:	635a      	str	r2, [r3, #52]	; 0x34
		taskENTER_CRITICAL();
		printf( "execution time %d Task %s\r\n", pxThisTask->xExecTime, pxThisTask->pcName );
		taskEXIT_CRITICAL();
		*/

		pxThisTask->xExecTime = 0;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	2200      	movs	r2, #0
 8001538:	631a      	str	r2, [r3, #48]	; 0x30
				/* Wake up the scheduler task to update priorities of all periodic tasks. */
				prvWakeScheduler();
			#endif /* schedEDF_NAIVE */
		#endif /* schedSCHEDULING_POLICY_EDF */

		vTaskDelayUntil( &pxThisTask->xLastWakeTime, pxThisTask->xPeriod );
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001544:	4619      	mov	r1, r3
 8001546:	4610      	mov	r0, r2
 8001548:	f003 fe8e 	bl	8005268 <vTaskDelayUntil>
		pxThisTask->xWorkIsDone = pdFALSE;
 800154c:	e7e8      	b.n	8001520 <prvPeriodicTaskCode+0x64>
 800154e:	bf00      	nop
 8001550:	20000244 	.word	0x20000244

08001554 <vSchedulerPeriodicTaskCreate>:
}

/* Creates a periodic task. */
void vSchedulerPeriodicTaskCreate( TaskFunction_t pvTaskCode, const char *pcName, UBaseType_t uxStackDepth, void *pvParameters, UBaseType_t uxPriority,
		TaskHandle_t *pxCreatedTask, TickType_t xPhaseTick, TickType_t xPeriodTick, TickType_t xMaxExecTimeTick, TickType_t xDeadlineTick )
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b09c      	sub	sp, #112	; 0x70
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
 8001560:	603b      	str	r3, [r7, #0]
	taskENTER_CRITICAL();
 8001562:	f005 fc27 	bl	8006db4 <vPortEnterCritical>
SchedTCB_t *pxNewTCB;
	#if( schedUSE_TCB_ARRAY == 1 )
		BaseType_t xIndex = prvFindEmptyElementIndexTCB();
 8001566:	f7ff ff85 	bl	8001474 <prvFindEmptyElementIndexTCB>
 800156a:	66f8      	str	r0, [r7, #108]	; 0x6c
		configASSERT( xTaskCounter < schedMAX_NUMBER_OF_PERIODIC_TASKS );
 800156c:	4b35      	ldr	r3, [pc, #212]	; (8001644 <vSchedulerPeriodicTaskCreate+0xf0>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2b04      	cmp	r3, #4
 8001572:	dd0a      	ble.n	800158a <vSchedulerPeriodicTaskCreate+0x36>
	__asm volatile
 8001574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001578:	f383 8811 	msr	BASEPRI, r3
 800157c:	f3bf 8f6f 	isb	sy
 8001580:	f3bf 8f4f 	dsb	sy
 8001584:	667b      	str	r3, [r7, #100]	; 0x64
}
 8001586:	bf00      	nop
 8001588:	e7fe      	b.n	8001588 <vSchedulerPeriodicTaskCreate+0x34>
		configASSERT( xIndex != -1 );
 800158a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800158c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001590:	d10a      	bne.n	80015a8 <vSchedulerPeriodicTaskCreate+0x54>
	__asm volatile
 8001592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001596:	f383 8811 	msr	BASEPRI, r3
 800159a:	f3bf 8f6f 	isb	sy
 800159e:	f3bf 8f4f 	dsb	sy
 80015a2:	663b      	str	r3, [r7, #96]	; 0x60
}
 80015a4:	bf00      	nop
 80015a6:	e7fe      	b.n	80015a6 <vSchedulerPeriodicTaskCreate+0x52>
		pxNewTCB = &xTCBArray[ xIndex ];
 80015a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80015aa:	4613      	mov	r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	4413      	add	r3, r2
 80015b0:	011b      	lsls	r3, r3, #4
 80015b2:	4a25      	ldr	r2, [pc, #148]	; (8001648 <vSchedulerPeriodicTaskCreate+0xf4>)
 80015b4:	4413      	add	r3, r2
 80015b6:	66bb      	str	r3, [r7, #104]	; 0x68
		pxNewTCB = pvPortMalloc( sizeof( SchedTCB_t ) );
	#endif /* schedUSE_TCB_ARRAY */


	/* Intialize item. */
	*pxNewTCB = ( SchedTCB_t ) { .pvTaskCode = pvTaskCode, .pcName = pcName, .uxStackDepth = uxStackDepth, .pvParameters = pvParameters,
 80015b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80015ba:	4618      	mov	r0, r3
 80015bc:	2350      	movs	r3, #80	; 0x50
 80015be:	461a      	mov	r2, r3
 80015c0:	2100      	movs	r1, #0
 80015c2:	f006 fd71 	bl	80080a8 <memset>
 80015c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80015c8:	68fa      	ldr	r2, [r7, #12]
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80015ce:	68ba      	ldr	r2, [r7, #8]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	609a      	str	r2, [r3, #8]
 80015d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80015da:	683a      	ldr	r2, [r7, #0]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80015e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80015e2:	611a      	str	r2, [r3, #16]
 80015e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80015e6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80015e8:	615a      	str	r2, [r3, #20]
 80015ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80015ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80015f0:	619a      	str	r2, [r3, #24]
 80015f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80015f4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80015f8:	61da      	str	r2, [r3, #28]
 80015fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80015fc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001600:	625a      	str	r2, [r3, #36]	; 0x24
 8001602:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001604:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001608:	62da      	str	r2, [r3, #44]	; 0x2c
 800160a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800160c:	2201      	movs	r2, #1
 800160e:	635a      	str	r2, [r3, #52]	; 0x34
		.uxPriority = uxPriority, .pxTaskHandle = pxCreatedTask, .xReleaseTime = xPhaseTick, .xPeriod = xPeriodTick, .xMaxExecTime = xMaxExecTimeTick,
		.xRelativeDeadline = xDeadlineTick, .xWorkIsDone = pdTRUE, .xExecTime = 0 };
	#if( schedUSE_TCB_ARRAY == 1 )
		pxNewTCB->xInUse = pdTRUE;
 8001610:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001612:	2201      	movs	r2, #1
 8001614:	63da      	str	r2, [r3, #60]	; 0x3c
	#endif /* schedUSE_TCB_ARRAY */
	
	#if( schedSCHEDULING_POLICY == schedSCHEDULING_POLICY_RMS || schedSCHEDULING_POLICY == schedSCHEDULING_POLICY_DMS )
		pxNewTCB->xPriorityIsSet = pdFALSE;
 8001616:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001618:	2200      	movs	r2, #0
 800161a:	639a      	str	r2, [r3, #56]	; 0x38
	#elif( schedSCHEDULING_POLICY == schedSCHEDULING_POLICY_EDF )
		pxNewTCB->xAbsoluteDeadline = pxNewTCB->xRelativeDeadline + pxNewTCB->xReleaseTime + xSystemStartTime;
		pxNewTCB->uxPriority = -1;
	#endif /* schedSCHEDULING_POLICY */
	#if( schedUSE_TIMING_ERROR_DETECTION_DEADLINE == 1 )
		pxNewTCB->xExecutedOnce = pdFALSE;
 800161c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800161e:	2200      	movs	r2, #0
 8001620:	641a      	str	r2, [r3, #64]	; 0x40
	#endif /* schedUSE_TIMING_ERROR_DETECTION_DEADLINE */
	#if( schedUSE_TIMING_ERROR_DETECTION_EXECUTION_TIME == 1 )
		pxNewTCB->xSuspended = pdFALSE;
 8001622:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001624:	2200      	movs	r2, #0
 8001626:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->xMaxExecTimeExceeded = pdFALSE;
 8001628:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800162a:	2200      	movs	r2, #0
 800162c:	64da      	str	r2, [r3, #76]	; 0x4c
	#if( schedUSE_POLLING_SERVER == 1)
		pxNewTCB->xIsPeriodicServer = pdFALSE;
	#endif /* schedUSE_POLLING_SERVER */

	#if( schedUSE_TCB_ARRAY == 1 )
		xTaskCounter++;
 800162e:	4b05      	ldr	r3, [pc, #20]	; (8001644 <vSchedulerPeriodicTaskCreate+0xf0>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	3301      	adds	r3, #1
 8001634:	4a03      	ldr	r2, [pc, #12]	; (8001644 <vSchedulerPeriodicTaskCreate+0xf0>)
 8001636:	6013      	str	r3, [r2, #0]
		#if( schedEDF_EFFICIENT == 1 )
			pxNewTCB->uxPriority = schedPRIORITY_NOT_RUNNING;
		#endif /* schedEDF_EFFICIENT */
		prvAddTCBToList( pxNewTCB );
	#endif /* schedUSE_TCB_SORTED_LIST */
	taskEXIT_CRITICAL();
 8001638:	f005 fbec 	bl	8006e14 <vPortExitCritical>
}
 800163c:	bf00      	nop
 800163e:	3770      	adds	r7, #112	; 0x70
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	200003d8 	.word	0x200003d8
 8001648:	20000248 	.word	0x20000248

0800164c <prvCreateAllTasks>:
	vTaskDelete( xTaskHandle );
}

/* Creates all periodic tasks stored in TCB array, or TCB list. */
static void prvCreateAllTasks( void )
{
 800164c:	b590      	push	{r4, r7, lr}
 800164e:	b087      	sub	sp, #28
 8001650:	af02      	add	r7, sp, #8
SchedTCB_t *pxTCB;

	#if( schedUSE_TCB_ARRAY == 1 )
		BaseType_t xIndex;
		for( xIndex = 0; xIndex < xTaskCounter; xIndex++ )
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	e03e      	b.n	80016d6 <prvCreateAllTasks+0x8a>
		{
			configASSERT( pdTRUE == xTCBArray[ xIndex ].xInUse );
 8001658:	4924      	ldr	r1, [pc, #144]	; (80016ec <prvCreateAllTasks+0xa0>)
 800165a:	68fa      	ldr	r2, [r7, #12]
 800165c:	4613      	mov	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	4413      	add	r3, r2
 8001662:	011b      	lsls	r3, r3, #4
 8001664:	440b      	add	r3, r1
 8001666:	333c      	adds	r3, #60	; 0x3c
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d00a      	beq.n	8001684 <prvCreateAllTasks+0x38>
	__asm volatile
 800166e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001672:	f383 8811 	msr	BASEPRI, r3
 8001676:	f3bf 8f6f 	isb	sy
 800167a:	f3bf 8f4f 	dsb	sy
 800167e:	603b      	str	r3, [r7, #0]
}
 8001680:	bf00      	nop
 8001682:	e7fe      	b.n	8001682 <prvCreateAllTasks+0x36>
			pxTCB = &xTCBArray[ xIndex ];
 8001684:	68fa      	ldr	r2, [r7, #12]
 8001686:	4613      	mov	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	4413      	add	r3, r2
 800168c:	011b      	lsls	r3, r3, #4
 800168e:	4a17      	ldr	r2, [pc, #92]	; (80016ec <prvCreateAllTasks+0xa0>)
 8001690:	4413      	add	r3, r2
 8001692:	60bb      	str	r3, [r7, #8]

			BaseType_t xReturnValue = xTaskCreate( prvPeriodicTaskCode, pxTCB->pcName, pxTCB->uxStackDepth, pxTCB->pvParameters, pxTCB->uxPriority, pxTCB->pxTaskHandle );
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	6859      	ldr	r1, [r3, #4]
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	b298      	uxth	r0, r3
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	68dc      	ldr	r4, [r3, #12]
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	691b      	ldr	r3, [r3, #16]
 80016a6:	68ba      	ldr	r2, [r7, #8]
 80016a8:	6952      	ldr	r2, [r2, #20]
 80016aa:	9201      	str	r2, [sp, #4]
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	4623      	mov	r3, r4
 80016b0:	4602      	mov	r2, r0
 80016b2:	480f      	ldr	r0, [pc, #60]	; (80016f0 <prvCreateAllTasks+0xa4>)
 80016b4:	f003 fbfb 	bl	8004eae <xTaskCreate>
 80016b8:	6078      	str	r0, [r7, #4]

			if( pdPASS == xReturnValue )
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d107      	bne.n	80016d0 <prvCreateAllTasks+0x84>
			{
				vTaskSetThreadLocalStoragePointer( *pxTCB->pxTaskHandle, schedTHREAD_LOCAL_STORAGE_POINTER_INDEX, pxTCB );
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	695b      	ldr	r3, [r3, #20]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	68ba      	ldr	r2, [r7, #8]
 80016c8:	2100      	movs	r1, #0
 80016ca:	4618      	mov	r0, r3
 80016cc:	f004 fb12 	bl	8005cf4 <vTaskSetThreadLocalStoragePointer>
		for( xIndex = 0; xIndex < xTaskCounter; xIndex++ )
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	3301      	adds	r3, #1
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	4b07      	ldr	r3, [pc, #28]	; (80016f4 <prvCreateAllTasks+0xa8>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	429a      	cmp	r2, r3
 80016de:	dbbb      	blt.n	8001658 <prvCreateAllTasks+0xc>
			}
			vTaskSetThreadLocalStoragePointer( *pxTCB->pxTaskHandle, schedTHREAD_LOCAL_STORAGE_POINTER_INDEX, pxTCB );
			pxTCBListItem = listGET_NEXT( pxTCBListItem );
		}	
	#endif /* schedUSE_TCB_ARRAY */
}
 80016e0:	bf00      	nop
 80016e2:	bf00      	nop
 80016e4:	3714      	adds	r7, #20
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd90      	pop	{r4, r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000248 	.word	0x20000248
 80016f0:	080014bd 	.word	0x080014bd
 80016f4:	200003d8 	.word	0x200003d8

080016f8 <prvSetFixedPriorities>:

#if( schedSCHEDULING_POLICY == schedSCHEDULING_POLICY_RMS || schedSCHEDULING_POLICY == schedSCHEDULING_POLICY_DMS )
	/* Initiazes fixed priorities of all periodic tasks with respect to RMS or
	 * DMS policy. */
static void prvSetFixedPriorities( void )
{
 80016f8:	b480      	push	{r7}
 80016fa:	b08b      	sub	sp, #44	; 0x2c
 80016fc:	af00      	add	r7, sp, #0
BaseType_t xIter, xIndex;
TickType_t xShortest, xPreviousShortest=0;
 80016fe:	2300      	movs	r3, #0
 8001700:	61bb      	str	r3, [r7, #24]
SchedTCB_t *pxShortestTaskPointer, *pxTCB;

	#if( schedUSE_SCHEDULER_TASK == 1 )
		BaseType_t xHighestPriority = schedSCHEDULER_PRIORITY;
 8001702:	2337      	movs	r3, #55	; 0x37
 8001704:	613b      	str	r3, [r7, #16]
	#else
		BaseType_t xHighestPriority = configMAX_PRIORITIES;
	#endif /* schedUSE_SCHEDULER_TASK */

	for( xIter = 0; xIter < xTaskCounter; xIter++ )
 8001706:	2300      	movs	r3, #0
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
 800170a:	e055      	b.n	80017b8 <prvSetFixedPriorities+0xc0>
	{
		xShortest = portMAX_DELAY;
 800170c:	f04f 33ff 	mov.w	r3, #4294967295
 8001710:	61fb      	str	r3, [r7, #28]

		/* search for shortest period/deadline */
		for( xIndex = 0; xIndex < xTaskCounter; xIndex++ )
 8001712:	2300      	movs	r3, #0
 8001714:	623b      	str	r3, [r7, #32]
 8001716:	e029      	b.n	800176c <prvSetFixedPriorities+0x74>
		{
			pxTCB = &xTCBArray[ xIndex ];
 8001718:	6a3a      	ldr	r2, [r7, #32]
 800171a:	4613      	mov	r3, r2
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	4413      	add	r3, r2
 8001720:	011b      	lsls	r3, r3, #4
 8001722:	4a2b      	ldr	r2, [pc, #172]	; (80017d0 <prvSetFixedPriorities+0xd8>)
 8001724:	4413      	add	r3, r2
 8001726:	60fb      	str	r3, [r7, #12]
			configASSERT( pdTRUE == pxTCB->xInUse );
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800172c:	2b01      	cmp	r3, #1
 800172e:	d00a      	beq.n	8001746 <prvSetFixedPriorities+0x4e>
	__asm volatile
 8001730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001734:	f383 8811 	msr	BASEPRI, r3
 8001738:	f3bf 8f6f 	isb	sy
 800173c:	f3bf 8f4f 	dsb	sy
 8001740:	60bb      	str	r3, [r7, #8]
}
 8001742:	bf00      	nop
 8001744:	e7fe      	b.n	8001744 <prvSetFixedPriorities+0x4c>
			if(pdTRUE == pxTCB->xPriorityIsSet)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800174a:	2b01      	cmp	r3, #1
 800174c:	d00a      	beq.n	8001764 <prvSetFixedPriorities+0x6c>
			{
				continue;
			}

			#if( schedSCHEDULING_POLICY == schedSCHEDULING_POLICY_RMS )
				if( pxTCB->xPeriod <= xShortest )
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001752:	69fa      	ldr	r2, [r7, #28]
 8001754:	429a      	cmp	r2, r3
 8001756:	d306      	bcc.n	8001766 <prvSetFixedPriorities+0x6e>
				{
					xShortest = pxTCB->xPeriod;
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175c:	61fb      	str	r3, [r7, #28]
					pxShortestTaskPointer = pxTCB;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	617b      	str	r3, [r7, #20]
 8001762:	e000      	b.n	8001766 <prvSetFixedPriorities+0x6e>
				continue;
 8001764:	bf00      	nop
		for( xIndex = 0; xIndex < xTaskCounter; xIndex++ )
 8001766:	6a3b      	ldr	r3, [r7, #32]
 8001768:	3301      	adds	r3, #1
 800176a:	623b      	str	r3, [r7, #32]
 800176c:	4b19      	ldr	r3, [pc, #100]	; (80017d4 <prvSetFixedPriorities+0xdc>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	6a3a      	ldr	r2, [r7, #32]
 8001772:	429a      	cmp	r2, r3
 8001774:	dbd0      	blt.n	8001718 <prvSetFixedPriorities+0x20>
					xShortest = pxTCB->xRelativeDeadline;
					pxShortestTaskPointer = pxTCB;
				}
			#endif /* schedSCHEDULING_POLICY */
		}
		configASSERT( -1 <= xHighestPriority );
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800177c:	da0a      	bge.n	8001794 <prvSetFixedPriorities+0x9c>
	__asm volatile
 800177e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001782:	f383 8811 	msr	BASEPRI, r3
 8001786:	f3bf 8f6f 	isb	sy
 800178a:	f3bf 8f4f 	dsb	sy
 800178e:	607b      	str	r3, [r7, #4]
}
 8001790:	bf00      	nop
 8001792:	e7fe      	b.n	8001792 <prvSetFixedPriorities+0x9a>
		if( xPreviousShortest != xShortest )
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	429a      	cmp	r2, r3
 800179a:	d002      	beq.n	80017a2 <prvSetFixedPriorities+0xaa>
		{
			xHighestPriority--;
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	3b01      	subs	r3, #1
 80017a0:	613b      	str	r3, [r7, #16]
		}
		/* set highest priority to task with xShortest period (the highest priority is configMAX_PRIORITIES-1) */
		pxShortestTaskPointer->uxPriority = xHighestPriority;
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	611a      	str	r2, [r3, #16]
		pxShortestTaskPointer->xPriorityIsSet = pdTRUE;
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	2201      	movs	r2, #1
 80017ac:	639a      	str	r2, [r3, #56]	; 0x38

		xPreviousShortest = xShortest;
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	61bb      	str	r3, [r7, #24]
	for( xIter = 0; xIter < xTaskCounter; xIter++ )
 80017b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b4:	3301      	adds	r3, #1
 80017b6:	627b      	str	r3, [r7, #36]	; 0x24
 80017b8:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <prvSetFixedPriorities+0xdc>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017be:	429a      	cmp	r2, r3
 80017c0:	dba4      	blt.n	800170c <prvSetFixedPriorities+0x14>
	}
}
 80017c2:	bf00      	nop
 80017c4:	bf00      	nop
 80017c6:	372c      	adds	r7, #44	; 0x2c
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	20000248 	.word	0x20000248
 80017d4:	200003d8 	.word	0x200003d8

080017d8 <prvPeriodicTaskRecreate>:

#if( schedUSE_TIMING_ERROR_DETECTION_DEADLINE == 1 )

	/* Recreates a deleted task that still has its information left in the task array (or list). */
	static void prvPeriodicTaskRecreate( SchedTCB_t *pxTCB )
	{
 80017d8:	b590      	push	{r4, r7, lr}
 80017da:	b087      	sub	sp, #28
 80017dc:	af02      	add	r7, sp, #8
 80017de:	6078      	str	r0, [r7, #4]
	BaseType_t xReturnValue = xTaskCreate( prvPeriodicTaskCode, pxTCB->pcName, pxTCB->uxStackDepth, pxTCB->pvParameters, pxTCB->uxPriority, pxTCB->pxTaskHandle );
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6859      	ldr	r1, [r3, #4]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	b298      	uxth	r0, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	68dc      	ldr	r4, [r3, #12]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	6952      	ldr	r2, [r2, #20]
 80017f6:	9201      	str	r2, [sp, #4]
 80017f8:	9300      	str	r3, [sp, #0]
 80017fa:	4623      	mov	r3, r4
 80017fc:	4602      	mov	r2, r0
 80017fe:	480e      	ldr	r0, [pc, #56]	; (8001838 <prvPeriodicTaskRecreate+0x60>)
 8001800:	f003 fb55 	bl	8004eae <xTaskCreate>
 8001804:	60f8      	str	r0, [r7, #12]
		if( pdPASS == xReturnValue )
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d110      	bne.n	800182e <prvPeriodicTaskRecreate+0x56>
		{
			vTaskSetThreadLocalStoragePointer( *pxTCB->pxTaskHandle, schedTHREAD_LOCAL_STORAGE_POINTER_INDEX, ( SchedTCB_t * ) pxTCB );
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	695b      	ldr	r3, [r3, #20]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	687a      	ldr	r2, [r7, #4]
 8001814:	2100      	movs	r1, #0
 8001816:	4618      	mov	r0, r3
 8001818:	f004 fa6c 	bl	8005cf4 <vTaskSetThreadLocalStoragePointer>

			/* This must be set to false so that the task does not miss the deadline immediately when it is created. */
			pxTCB->xExecutedOnce = pdFALSE;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	641a      	str	r2, [r3, #64]	; 0x40
			#if( schedUSE_TIMING_ERROR_DETECTION_EXECUTION_TIME == 1 )
				pxTCB->xSuspended = pdFALSE;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2200      	movs	r2, #0
 8001826:	649a      	str	r2, [r3, #72]	; 0x48
				pxTCB->xMaxExecTimeExceeded = pdFALSE;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	64da      	str	r2, [r3, #76]	; 0x4c
		}
		else
		{
			/* if task creation failed */
		}
	}
 800182e:	bf00      	nop
 8001830:	3714      	adds	r7, #20
 8001832:	46bd      	mov	sp, r7
 8001834:	bd90      	pop	{r4, r7, pc}
 8001836:	bf00      	nop
 8001838:	080014bd 	.word	0x080014bd

0800183c <prvDeadlineMissedHook>:

	/* Called when a deadline of a periodic task is missed.
	 * Deletes the periodic task that has missed it's deadline and recreate it.
	 * The periodic task is released during next period. */
	static void prvDeadlineMissedHook( SchedTCB_t *pxTCB, TickType_t xTickCount )
	{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	6039      	str	r1, [r7, #0]
		printf( "\r\ndeadline missed! %s tick %d\r\n", pxTCB->pcName, xTickCount );
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	683a      	ldr	r2, [r7, #0]
 800184c:	4619      	mov	r1, r3
 800184e:	4812      	ldr	r0, [pc, #72]	; (8001898 <prvDeadlineMissedHook+0x5c>)
 8001850:	f006 fae4 	bl	8007e1c <iprintf>

		/* Delete the pxTask and recreate it. */
		vTaskDelete( *pxTCB->pxTaskHandle );
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	695b      	ldr	r3, [r3, #20]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4618      	mov	r0, r3
 800185c:	f003 fc92 	bl	8005184 <vTaskDelete>
		pxTCB->xExecTime = 0;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	631a      	str	r2, [r3, #48]	; 0x30
		prvPeriodicTaskRecreate( pxTCB );
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f7ff ffb6 	bl	80017d8 <prvPeriodicTaskRecreate>

		pxTCB->xReleaseTime = pxTCB->xLastWakeTime + pxTCB->xPeriod;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001874:	441a      	add	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	619a      	str	r2, [r3, #24]
		/* Need to reset lastWakeTime for correct release. */
		pxTCB->xLastWakeTime = 0;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	629a      	str	r2, [r3, #40]	; 0x28
		pxTCB->xAbsoluteDeadline = pxTCB->xRelativeDeadline + pxTCB->xReleaseTime;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	69da      	ldr	r2, [r3, #28]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	441a      	add	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	621a      	str	r2, [r3, #32]
		#if( schedEDF_EFFICIENT == 1 )
			listSET_LIST_ITEM_VALUE( &pxTCB->xTCBListItem, pxTCB->xAbsoluteDeadline );
		#endif /* schedEDF_EFFICIENT */
	}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	0800a0b4 	.word	0x0800a0b4

0800189c <prvCheckDeadline>:

	/* Checks whether given task has missed deadline or not. */
	static void prvCheckDeadline( SchedTCB_t *pxTCB, TickType_t xTickCount )
	{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
		if( ( NULL != pxTCB ) && ( pdFALSE == pxTCB->xWorkIsDone ) && ( pdTRUE == pxTCB->xExecutedOnce ) )
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d018      	beq.n	80018de <prvCheckDeadline+0x42>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d114      	bne.n	80018de <prvCheckDeadline+0x42>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b8:	2b01      	cmp	r3, #1
 80018ba:	d110      	bne.n	80018de <prvCheckDeadline+0x42>
		{
			/* Need to update absolute deadline if the scheduling policy is not EDF. */
			#if( schedSCHEDULING_POLICY != schedSCHEDULING_POLICY_EDF )
				pxTCB->xAbsoluteDeadline = pxTCB->xLastWakeTime + pxTCB->xRelativeDeadline;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	69db      	ldr	r3, [r3, #28]
 80018c4:	441a      	add	r2, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	621a      	str	r2, [r3, #32]
			#endif /* schedSCHEDULING_POLICY */

			/* Using ICTOH method proposed by Carlini and Buttazzo, to check whether deadline is missed. */
			if( ( signed ) ( pxTCB->xAbsoluteDeadline - xTickCount ) < 0 )
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a1a      	ldr	r2, [r3, #32]
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	da03      	bge.n	80018de <prvCheckDeadline+0x42>
			{
				/* Deadline is missed. */
				prvDeadlineMissedHook( pxTCB, xTickCount );
 80018d6:	6839      	ldr	r1, [r7, #0]
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f7ff ffaf 	bl	800183c <prvDeadlineMissedHook>
			}
		}
	}
 80018de:	bf00      	nop
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
	...

080018e8 <prvExecTimeExceedHook>:

	/* Called if a periodic task has exceeded it's worst-case execution time.
	 * The periodic task is blocked until next period. A context switch to
	 * the scheduler task occur to block the periodic task. */
	static void prvExecTimeExceedHook( TickType_t xTickCount, SchedTCB_t *pxCurrentTask )
	{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
 80018f0:	6039      	str	r1, [r7, #0]
		printf( "\r\nworst case execution time exceeded! %s %d %d\r\n", pxCurrentTask->pcName, pxCurrentTask->xExecTime, xTickCount );
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	6859      	ldr	r1, [r3, #4]
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4814      	ldr	r0, [pc, #80]	; (8001950 <prvExecTimeExceedHook+0x68>)
 80018fe:	f006 fa8d 	bl	8007e1c <iprintf>

		pxCurrentTask->xMaxExecTimeExceeded = pdTRUE;
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	2201      	movs	r2, #1
 8001906:	64da      	str	r2, [r3, #76]	; 0x4c
		/* Is not suspended yet, but will be suspended by the scheduler later. */
		pxCurrentTask->xSuspended = pdTRUE;
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	2201      	movs	r2, #1
 800190c:	649a      	str	r2, [r3, #72]	; 0x48
		pxCurrentTask->xAbsoluteUnblockTime = pxCurrentTask->xLastWakeTime + pxCurrentTask->xPeriod;
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001916:	441a      	add	r2, r3
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	645a      	str	r2, [r3, #68]	; 0x44
		pxCurrentTask->xExecTime = 0;
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	2200      	movs	r2, #0
 8001920:	631a      	str	r2, [r3, #48]	; 0x30
					listSET_LIST_ITEM_VALUE( &pxCurrentTask->xTCBListItem, pxCurrentTask->xAbsoluteDeadline );
				#endif /* schedEDF_EFFICIENT */
			}
		#endif /* schedUSE_POLLING_SERVER */
		BaseType_t xHigherPriorityTaskWoken;
		vTaskNotifyGiveFromISR( xSchedulerHandle, &xHigherPriorityTaskWoken );
 8001922:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <prvExecTimeExceedHook+0x6c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f107 020c 	add.w	r2, r7, #12
 800192a:	4611      	mov	r1, r2
 800192c:	4618      	mov	r0, r3
 800192e:	f004 fcdd 	bl	80062ec <vTaskNotifyGiveFromISR>
		schedYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d007      	beq.n	8001948 <prvExecTimeExceedHook+0x60>
 8001938:	4b07      	ldr	r3, [pc, #28]	; (8001958 <prvExecTimeExceedHook+0x70>)
 800193a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	f3bf 8f4f 	dsb	sy
 8001944:	f3bf 8f6f 	isb	sy
	}
 8001948:	bf00      	nop
 800194a:	3710      	adds	r7, #16
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	0800a0d4 	.word	0x0800a0d4
 8001954:	200003e0 	.word	0x200003e0
 8001958:	e000ed04 	.word	0xe000ed04

0800195c <prvSchedulerCheckTimingError>:

#if( schedUSE_SCHEDULER_TASK == 1 )
	/* Called by the scheduler task. Checks all tasks for any enabled
	 * Timing Error Detection feature. */
	static void prvSchedulerCheckTimingError( TickType_t xTickCount, SchedTCB_t *pxTCB )
	{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
		#if( schedUSE_TCB_ARRAY == 1 )
			if( pdFALSE == pxTCB->xInUse )
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800196a:	2b00      	cmp	r3, #0
 800196c:	d030      	beq.n	80019d0 <prvSchedulerCheckTimingError+0x74>
			#else
				/* Since lastWakeTime is updated to next wake time when the task is delayed, tickCount > lastWakeTime implies that
				 * the task has not finished it's job this period. */

				/* Using ICTOH method proposed by Carlini and Buttazzo, to check the condition unaffected by counter overflows. */
				if( ( signed ) ( xTickCount - pxTCB->xLastWakeTime ) > 0 )
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b00      	cmp	r3, #0
 8001978:	dd02      	ble.n	8001980 <prvSchedulerCheckTimingError+0x24>
				{
					pxTCB->xWorkIsDone = pdFALSE;
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	2200      	movs	r2, #0
 800197e:	635a      	str	r2, [r3, #52]	; 0x34
				}

				prvCheckDeadline( pxTCB, xTickCount );
 8001980:	6879      	ldr	r1, [r7, #4]
 8001982:	6838      	ldr	r0, [r7, #0]
 8001984:	f7ff ff8a 	bl	800189c <prvCheckDeadline>
			#endif /* schedUSE_POLLING_SERVER */
		#endif /* schedUSE_TIMING_ERROR_DETECTION_DEADLINE */
		

		#if( schedUSE_TIMING_ERROR_DETECTION_EXECUTION_TIME == 1 )
			if( pdTRUE == pxTCB->xMaxExecTimeExceeded )
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198c:	2b01      	cmp	r3, #1
 800198e:	d108      	bne.n	80019a2 <prvSchedulerCheckTimingError+0x46>
			{
				pxTCB->xMaxExecTimeExceeded = pdFALSE;
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	2200      	movs	r2, #0
 8001994:	64da      	str	r2, [r3, #76]	; 0x4c
				vTaskSuspend( *pxTCB->pxTaskHandle );
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	695b      	ldr	r3, [r3, #20]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4618      	mov	r0, r3
 800199e:	f003 fce1 	bl	8005364 <vTaskSuspend>
			}
			if( pdTRUE == pxTCB->xSuspended )
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d114      	bne.n	80019d4 <prvSchedulerCheckTimingError+0x78>
			{
				/* Using ICTOH method proposed by Carlini and Buttazzo, to check whether absolute unblock time is reached. */
				if( ( signed ) ( pxTCB->xAbsoluteUnblockTime - xTickCount ) <= 0 )
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	dc0e      	bgt.n	80019d4 <prvSchedulerCheckTimingError+0x78>
				{
					pxTCB->xSuspended = pdFALSE;
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	2200      	movs	r2, #0
 80019ba:	649a      	str	r2, [r3, #72]	; 0x48
					pxTCB->xLastWakeTime = xTickCount;
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	629a      	str	r2, [r3, #40]	; 0x28
					vTaskResume( *pxTCB->pxTaskHandle );
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f003 fd73 	bl	80054b4 <vTaskResume>
				}
			}
		#endif /* schedUSE_TIMING_ERROR_DETECTION_EXECUTION_TIME */

		return;
 80019ce:	e001      	b.n	80019d4 <prvSchedulerCheckTimingError+0x78>
				return;
 80019d0:	bf00      	nop
 80019d2:	e000      	b.n	80019d6 <prvSchedulerCheckTimingError+0x7a>
		return;
 80019d4:	bf00      	nop
	}
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <prvSchedulerFunction>:

	/* Function code for the scheduler task. */
	static void prvSchedulerFunction( void )
	{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
					}					
				#endif /* schedEDF_EFFICIENT */
			#endif /* schedSCHEDULING_POLICY_EDF */

			#if( schedUSE_TIMING_ERROR_DETECTION_DEADLINE == 1 || schedUSE_TIMING_ERROR_DETECTION_EXECUTION_TIME == 1 )
				TickType_t xTickCount = xTaskGetTickCount();
 80019e2:	f003 fee1 	bl	80057a8 <xTaskGetTickCount>
 80019e6:	60b8      	str	r0, [r7, #8]
				SchedTCB_t *pxTCB;

				#if( schedUSE_TCB_ARRAY == 1 )
					BaseType_t xIndex;
					for( xIndex = 0; xIndex < schedMAX_NUMBER_OF_PERIODIC_TASKS; xIndex++ )
 80019e8:	2300      	movs	r3, #0
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	e00e      	b.n	8001a0c <prvSchedulerFunction+0x30>
					{
						pxTCB = &xTCBArray[ xIndex ];
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	4613      	mov	r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4413      	add	r3, r2
 80019f6:	011b      	lsls	r3, r3, #4
 80019f8:	4a09      	ldr	r2, [pc, #36]	; (8001a20 <prvSchedulerFunction+0x44>)
 80019fa:	4413      	add	r3, r2
 80019fc:	607b      	str	r3, [r7, #4]
						prvSchedulerCheckTimingError( xTickCount, pxTCB );
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	68b8      	ldr	r0, [r7, #8]
 8001a02:	f7ff ffab 	bl	800195c <prvSchedulerCheckTimingError>
					for( xIndex = 0; xIndex < schedMAX_NUMBER_OF_PERIODIC_TASKS; xIndex++ )
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2b04      	cmp	r3, #4
 8001a10:	dded      	ble.n	80019ee <prvSchedulerFunction+0x12>
					}
				#endif /* schedUSE_TCB_SORTED_LIST */
			
			#endif /* schedUSE_TIMING_ERROR_DETECTION_DEADLINE || schedUSE_TIMING_ERROR_DETECTION_EXECUTION_TIME */

			ulTaskNotifyTake( pdTRUE, portMAX_DELAY );
 8001a12:	f04f 31ff 	mov.w	r1, #4294967295
 8001a16:	2001      	movs	r0, #1
 8001a18:	f004 fc1c 	bl	8006254 <ulTaskNotifyTake>
		{
 8001a1c:	e7e1      	b.n	80019e2 <prvSchedulerFunction+0x6>
 8001a1e:	bf00      	nop
 8001a20:	20000248 	.word	0x20000248

08001a24 <prvCreateSchedulerTask>:
		}
	}

	/* Creates the scheduler task. */
	static void prvCreateSchedulerTask( void )
	{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af02      	add	r7, sp, #8
		xTaskCreate( (TaskFunction_t) prvSchedulerFunction, "Scheduler", schedSCHEDULER_TASK_STACK_SIZE, NULL, schedSCHEDULER_PRIORITY, &xSchedulerHandle );
 8001a2a:	4b07      	ldr	r3, [pc, #28]	; (8001a48 <prvCreateSchedulerTask+0x24>)
 8001a2c:	9301      	str	r3, [sp, #4]
 8001a2e:	2337      	movs	r3, #55	; 0x37
 8001a30:	9300      	str	r3, [sp, #0]
 8001a32:	2300      	movs	r3, #0
 8001a34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a38:	4904      	ldr	r1, [pc, #16]	; (8001a4c <prvCreateSchedulerTask+0x28>)
 8001a3a:	4805      	ldr	r0, [pc, #20]	; (8001a50 <prvCreateSchedulerTask+0x2c>)
 8001a3c:	f003 fa37 	bl	8004eae <xTaskCreate>
	}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	200003e0 	.word	0x200003e0
 8001a4c:	0800a108 	.word	0x0800a108
 8001a50:	080019dd 	.word	0x080019dd

08001a54 <prvWakeScheduler>:
#endif /* schedUSE_POLLING_SERVER */

#if( schedUSE_SCHEDULER_TASK == 1 )
	/* Wakes up (context switches to) the scheduler task. */
	static void prvWakeScheduler( void )
	{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
	BaseType_t xHigherPriorityTaskWoken;
		vTaskNotifyGiveFromISR( xSchedulerHandle, &xHigherPriorityTaskWoken );
 8001a5a:	4b0b      	ldr	r3, [pc, #44]	; (8001a88 <prvWakeScheduler+0x34>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	1d3a      	adds	r2, r7, #4
 8001a60:	4611      	mov	r1, r2
 8001a62:	4618      	mov	r0, r3
 8001a64:	f004 fc42 	bl	80062ec <vTaskNotifyGiveFromISR>
		schedYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d007      	beq.n	8001a7e <prvWakeScheduler+0x2a>
 8001a6e:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <prvWakeScheduler+0x38>)
 8001a70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	f3bf 8f4f 	dsb	sy
 8001a7a:	f3bf 8f6f 	isb	sy
	}
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	200003e0 	.word	0x200003e0
 8001a8c:	e000ed04 	.word	0xe000ed04

08001a90 <vApplicationTickHook>:

	/* Called every software tick. */
	void vApplicationTickHook( void )
	{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
	SchedTCB_t *pxCurrentTask;
	TaskHandle_t xCurrentTaskHandle = xTaskGetCurrentTaskHandle();
 8001a96:	f004 fa43 	bl	8005f20 <xTaskGetCurrentTaskHandle>
 8001a9a:	6078      	str	r0, [r7, #4]

		pxCurrentTask = ( SchedTCB_t * ) pvTaskGetThreadLocalStoragePointer( xCurrentTaskHandle, schedTHREAD_LOCAL_STORAGE_POINTER_INDEX );
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f004 f956 	bl	8005d50 <pvTaskGetThreadLocalStoragePointer>
 8001aa4:	6038      	str	r0, [r7, #0]
		if( NULL != pxCurrentTask && xCurrentTaskHandle != xSchedulerHandle && xCurrentTaskHandle != xTaskGetIdleTaskHandle() )
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d024      	beq.n	8001af6 <vApplicationTickHook+0x66>
 8001aac:	4b1b      	ldr	r3, [pc, #108]	; (8001b1c <vApplicationTickHook+0x8c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d01f      	beq.n	8001af6 <vApplicationTickHook+0x66>
 8001ab6:	f003 fe99 	bl	80057ec <xTaskGetIdleTaskHandle>
 8001aba:	4602      	mov	r2, r0
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d019      	beq.n	8001af6 <vApplicationTickHook+0x66>
		{
			pxCurrentTask->xExecTime++;
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	1c5a      	adds	r2, r3, #1
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	631a      	str	r2, [r3, #48]	; 0x30
			#if( schedUSE_TIMING_ERROR_DETECTION_EXECUTION_TIME == 1 )
				if( pxCurrentTask->xMaxExecTime <= pxCurrentTask->xExecTime )
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d80e      	bhi.n	8001af6 <vApplicationTickHook+0x66>
				{
					if( pdFALSE == pxCurrentTask->xMaxExecTimeExceeded )
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d10a      	bne.n	8001af6 <vApplicationTickHook+0x66>
					{
						if( pdFALSE == pxCurrentTask->xSuspended )
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d106      	bne.n	8001af6 <vApplicationTickHook+0x66>
						{
							prvExecTimeExceedHook( xTaskGetTickCountFromISR(), pxCurrentTask );
 8001ae8:	f003 fe6e 	bl	80057c8 <xTaskGetTickCountFromISR>
 8001aec:	4603      	mov	r3, r0
 8001aee:	6839      	ldr	r1, [r7, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff fef9 	bl	80018e8 <prvExecTimeExceedHook>
				}
			#endif /* schedUSE_TIMING_ERROR_DETECTION_EXECUTION_TIME */
		}

		#if( schedUSE_TIMING_ERROR_DETECTION_DEADLINE == 1 )
			xSchedulerWakeCounter++;
 8001af6:	4b0a      	ldr	r3, [pc, #40]	; (8001b20 <vApplicationTickHook+0x90>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	3301      	adds	r3, #1
 8001afc:	4a08      	ldr	r2, [pc, #32]	; (8001b20 <vApplicationTickHook+0x90>)
 8001afe:	6013      	str	r3, [r2, #0]
			if( xSchedulerWakeCounter == schedSCHEDULER_TASK_PERIOD )
 8001b00:	4b07      	ldr	r3, [pc, #28]	; (8001b20 <vApplicationTickHook+0x90>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2b64      	cmp	r3, #100	; 0x64
 8001b06:	d104      	bne.n	8001b12 <vApplicationTickHook+0x82>
			{
				xSchedulerWakeCounter = 0;
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <vApplicationTickHook+0x90>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	601a      	str	r2, [r3, #0]
				prvWakeScheduler();
 8001b0e:	f7ff ffa1 	bl	8001a54 <prvWakeScheduler>
			}
		#endif /* schedUSE_TIMING_ERROR_DETECTION_DEADLINE */
	}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	200003e0 	.word	0x200003e0
 8001b20:	200003dc 	.word	0x200003dc

08001b24 <vSchedulerInit>:
#endif /* schedUSE_SCHEDULER_TASK */

/* This function must be called before any other function call from this module. */
void vSchedulerInit( void )
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
	#if( schedUSE_TCB_ARRAY == 1 )
		prvInitTCBArray();
 8001b28:	f7ff fc84 	bl	8001434 <prvInitTCBArray>
			pxTCBBlockedList = &xTCBBlockedList;
			pxTCBReadyList = &xTCBReadyList;
			pxTCBOverflowedReadyList = &xTCBOverflowedReadyList;
		#endif /* schedEDF_NAIVE */
	#endif /* schedUSE_TCB_ARRAY */
}
 8001b2c:	bf00      	nop
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <vSchedulerStart>:

/* Starts scheduling tasks. All periodic tasks (including polling server) must
 * have been created with API function before calling this function. */
void vSchedulerStart( void )
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
	#if( schedUSE_POLLING_SERVER == 1 )
		prvPollingServerCreate();
	#endif /* schedUSE_POLLING_SERVER */

	#if( schedSCHEDULING_POLICY == schedSCHEDULING_POLICY_RMS || schedSCHEDULING_POLICY == schedSCHEDULING_POLICY_DMS )
		prvSetFixedPriorities();
 8001b34:	f7ff fde0 	bl	80016f8 <prvSetFixedPriorities>
	#elif( schedSCHEDULING_POLICY == schedSCHEDULING_POLICY_EDF )
		prvInitEDF();
	#endif /* schedSCHEDULING_POLICY */

	#if( schedUSE_SCHEDULER_TASK == 1 )
		prvCreateSchedulerTask();
 8001b38:	f7ff ff74 	bl	8001a24 <prvCreateSchedulerTask>
	#endif /* schedUSE_SCHEDULER_TASK */

	prvCreateAllTasks();
 8001b3c:	f7ff fd86 	bl	800164c <prvCreateAllTasks>

	xSystemStartTime = xTaskGetTickCount();
 8001b40:	f003 fe32 	bl	80057a8 <xTaskGetTickCount>
 8001b44:	4603      	mov	r3, r0
 8001b46:	4a03      	ldr	r2, [pc, #12]	; (8001b54 <vSchedulerStart+0x24>)
 8001b48:	6013      	str	r3, [r2, #0]
	vTaskStartScheduler();
 8001b4a:	f003 fd11 	bl	8005570 <vTaskStartScheduler>
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000244 	.word	0x20000244

08001b58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b5e:	2300      	movs	r3, #0
 8001b60:	607b      	str	r3, [r7, #4]
 8001b62:	4b12      	ldr	r3, [pc, #72]	; (8001bac <HAL_MspInit+0x54>)
 8001b64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b66:	4a11      	ldr	r2, [pc, #68]	; (8001bac <HAL_MspInit+0x54>)
 8001b68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b6c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b6e:	4b0f      	ldr	r3, [pc, #60]	; (8001bac <HAL_MspInit+0x54>)
 8001b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b76:	607b      	str	r3, [r7, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	603b      	str	r3, [r7, #0]
 8001b7e:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <HAL_MspInit+0x54>)
 8001b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b82:	4a0a      	ldr	r2, [pc, #40]	; (8001bac <HAL_MspInit+0x54>)
 8001b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b88:	6413      	str	r3, [r2, #64]	; 0x40
 8001b8a:	4b08      	ldr	r3, [pc, #32]	; (8001bac <HAL_MspInit+0x54>)
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b92:	603b      	str	r3, [r7, #0]
 8001b94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b96:	2200      	movs	r2, #0
 8001b98:	210f      	movs	r1, #15
 8001b9a:	f06f 0001 	mvn.w	r0, #1
 8001b9e:	f000 fb2b 	bl	80021f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40023800 	.word	0x40023800

08001bb0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b08c      	sub	sp, #48	; 0x30
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM11 clock */
  __HAL_RCC_TIM11_CLK_ENABLE();
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	60bb      	str	r3, [r7, #8]
 8001bc4:	4b2e      	ldr	r3, [pc, #184]	; (8001c80 <HAL_InitTick+0xd0>)
 8001bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bc8:	4a2d      	ldr	r2, [pc, #180]	; (8001c80 <HAL_InitTick+0xd0>)
 8001bca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bce:	6453      	str	r3, [r2, #68]	; 0x44
 8001bd0:	4b2b      	ldr	r3, [pc, #172]	; (8001c80 <HAL_InitTick+0xd0>)
 8001bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bd8:	60bb      	str	r3, [r7, #8]
 8001bda:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001bdc:	f107 020c 	add.w	r2, r7, #12
 8001be0:	f107 0310 	add.w	r3, r7, #16
 8001be4:	4611      	mov	r1, r2
 8001be6:	4618      	mov	r0, r3
 8001be8:	f001 f90c 	bl	8002e04 <HAL_RCC_GetClockConfig>

  /* Compute TIM11 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001bec:	f001 f8f6 	bl	8002ddc <HAL_RCC_GetPCLK2Freq>
 8001bf0:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM11 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bf4:	4a23      	ldr	r2, [pc, #140]	; (8001c84 <HAL_InitTick+0xd4>)
 8001bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfa:	0c9b      	lsrs	r3, r3, #18
 8001bfc:	3b01      	subs	r3, #1
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM11 */
  htim11.Instance = TIM11;
 8001c00:	4b21      	ldr	r3, [pc, #132]	; (8001c88 <HAL_InitTick+0xd8>)
 8001c02:	4a22      	ldr	r2, [pc, #136]	; (8001c8c <HAL_InitTick+0xdc>)
 8001c04:	601a      	str	r2, [r3, #0]
  + Period = [(TIM11CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim11.Init.Period = (1000000U / 1000U) - 1U;
 8001c06:	4b20      	ldr	r3, [pc, #128]	; (8001c88 <HAL_InitTick+0xd8>)
 8001c08:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001c0c:	60da      	str	r2, [r3, #12]
  htim11.Init.Prescaler = uwPrescalerValue;
 8001c0e:	4a1e      	ldr	r2, [pc, #120]	; (8001c88 <HAL_InitTick+0xd8>)
 8001c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c12:	6053      	str	r3, [r2, #4]
  htim11.Init.ClockDivision = 0;
 8001c14:	4b1c      	ldr	r3, [pc, #112]	; (8001c88 <HAL_InitTick+0xd8>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	611a      	str	r2, [r3, #16]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c1a:	4b1b      	ldr	r3, [pc, #108]	; (8001c88 <HAL_InitTick+0xd8>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	609a      	str	r2, [r3, #8]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c20:	4b19      	ldr	r3, [pc, #100]	; (8001c88 <HAL_InitTick+0xd8>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim11);
 8001c26:	4818      	ldr	r0, [pc, #96]	; (8001c88 <HAL_InitTick+0xd8>)
 8001c28:	f001 f91e 	bl	8002e68 <HAL_TIM_Base_Init>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001c32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d11b      	bne.n	8001c72 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim11);
 8001c3a:	4813      	ldr	r0, [pc, #76]	; (8001c88 <HAL_InitTick+0xd8>)
 8001c3c:	f001 f96e 	bl	8002f1c <HAL_TIM_Base_Start_IT>
 8001c40:	4603      	mov	r3, r0
 8001c42:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001c46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d111      	bne.n	8001c72 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM11 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001c4e:	201a      	movs	r0, #26
 8001c50:	f000 faee 	bl	8002230 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b0f      	cmp	r3, #15
 8001c58:	d808      	bhi.n	8001c6c <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, TickPriority, 0U);
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	6879      	ldr	r1, [r7, #4]
 8001c5e:	201a      	movs	r0, #26
 8001c60:	f000 faca 	bl	80021f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c64:	4a0a      	ldr	r2, [pc, #40]	; (8001c90 <HAL_InitTick+0xe0>)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	e002      	b.n	8001c72 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001c72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3730      	adds	r7, #48	; 0x30
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	40023800 	.word	0x40023800
 8001c84:	431bde83 	.word	0x431bde83
 8001c88:	200003e4 	.word	0x200003e4
 8001c8c:	40014800 	.word	0x40014800
 8001c90:	20000004 	.word	0x20000004

08001c94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c98:	e7fe      	b.n	8001c98 <NMI_Handler+0x4>

08001c9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c9e:	e7fe      	b.n	8001c9e <HardFault_Handler+0x4>

08001ca0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ca4:	e7fe      	b.n	8001ca4 <MemManage_Handler+0x4>

08001ca6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001caa:	e7fe      	b.n	8001caa <BusFault_Handler+0x4>

08001cac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cb0:	e7fe      	b.n	8001cb0 <UsageFault_Handler+0x4>

08001cb2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cb6:	bf00      	nop
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001cc4:	4802      	ldr	r0, [pc, #8]	; (8001cd0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001cc6:	f001 f98b 	bl	8002fe0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001cca:	bf00      	nop
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	200003e4 	.word	0x200003e4

08001cd4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  return 1;
 8001cd8:	2301      	movs	r3, #1
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <_kill>:

int _kill(int pid, int sig)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
 8001cec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001cee:	f006 fa83 	bl	80081f8 <__errno>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2216      	movs	r2, #22
 8001cf6:	601a      	str	r2, [r3, #0]
  return -1;
 8001cf8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3708      	adds	r7, #8
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}

08001d04 <_exit>:

void _exit (int status)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b082      	sub	sp, #8
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f7ff ffe7 	bl	8001ce4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d16:	e7fe      	b.n	8001d16 <_exit+0x12>

08001d18 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d24:	2300      	movs	r3, #0
 8001d26:	617b      	str	r3, [r7, #20]
 8001d28:	e00a      	b.n	8001d40 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d2a:	f3af 8000 	nop.w
 8001d2e:	4601      	mov	r1, r0
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	1c5a      	adds	r2, r3, #1
 8001d34:	60ba      	str	r2, [r7, #8]
 8001d36:	b2ca      	uxtb	r2, r1
 8001d38:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	617b      	str	r3, [r7, #20]
 8001d40:	697a      	ldr	r2, [r7, #20]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	dbf0      	blt.n	8001d2a <_read+0x12>
  }

  return len;
 8001d48:	687b      	ldr	r3, [r7, #4]
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3718      	adds	r7, #24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b086      	sub	sp, #24
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	60f8      	str	r0, [r7, #12]
 8001d5a:	60b9      	str	r1, [r7, #8]
 8001d5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d5e:	2300      	movs	r3, #0
 8001d60:	617b      	str	r3, [r7, #20]
 8001d62:	e009      	b.n	8001d78 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	1c5a      	adds	r2, r3, #1
 8001d68:	60ba      	str	r2, [r7, #8]
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff fac7 	bl	8001300 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	3301      	adds	r3, #1
 8001d76:	617b      	str	r3, [r7, #20]
 8001d78:	697a      	ldr	r2, [r7, #20]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	dbf1      	blt.n	8001d64 <_write+0x12>
  }
  return len;
 8001d80:	687b      	ldr	r3, [r7, #4]
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3718      	adds	r7, #24
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <_close>:

int _close(int file)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b083      	sub	sp, #12
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001da2:	b480      	push	{r7}
 8001da4:	b083      	sub	sp, #12
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
 8001daa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001db2:	605a      	str	r2, [r3, #4]
  return 0;
 8001db4:	2300      	movs	r3, #0
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr

08001dc2 <_isatty>:

int _isatty(int file)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	b083      	sub	sp, #12
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001dca:	2301      	movs	r3, #1
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b085      	sub	sp, #20
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001de4:	2300      	movs	r3, #0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3714      	adds	r7, #20
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
	...

08001df4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dfc:	4a14      	ldr	r2, [pc, #80]	; (8001e50 <_sbrk+0x5c>)
 8001dfe:	4b15      	ldr	r3, [pc, #84]	; (8001e54 <_sbrk+0x60>)
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e08:	4b13      	ldr	r3, [pc, #76]	; (8001e58 <_sbrk+0x64>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d102      	bne.n	8001e16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e10:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <_sbrk+0x64>)
 8001e12:	4a12      	ldr	r2, [pc, #72]	; (8001e5c <_sbrk+0x68>)
 8001e14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e16:	4b10      	ldr	r3, [pc, #64]	; (8001e58 <_sbrk+0x64>)
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d207      	bcs.n	8001e34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e24:	f006 f9e8 	bl	80081f8 <__errno>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	220c      	movs	r2, #12
 8001e2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e32:	e009      	b.n	8001e48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e34:	4b08      	ldr	r3, [pc, #32]	; (8001e58 <_sbrk+0x64>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e3a:	4b07      	ldr	r3, [pc, #28]	; (8001e58 <_sbrk+0x64>)
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4413      	add	r3, r2
 8001e42:	4a05      	ldr	r2, [pc, #20]	; (8001e58 <_sbrk+0x64>)
 8001e44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e46:	68fb      	ldr	r3, [r7, #12]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3718      	adds	r7, #24
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	20018000 	.word	0x20018000
 8001e54:	00000400 	.word	0x00000400
 8001e58:	2000042c 	.word	0x2000042c
 8001e5c:	20004fb8 	.word	0x20004fb8

08001e60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e64:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <SystemInit+0x20>)
 8001e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e6a:	4a05      	ldr	r2, [pc, #20]	; (8001e80 <SystemInit+0x20>)
 8001e6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e74:	bf00      	nop
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	e000ed00 	.word	0xe000ed00

08001e84 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e88:	4b11      	ldr	r3, [pc, #68]	; (8001ed0 <MX_USART2_UART_Init+0x4c>)
 8001e8a:	4a12      	ldr	r2, [pc, #72]	; (8001ed4 <MX_USART2_UART_Init+0x50>)
 8001e8c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e8e:	4b10      	ldr	r3, [pc, #64]	; (8001ed0 <MX_USART2_UART_Init+0x4c>)
 8001e90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e94:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e96:	4b0e      	ldr	r3, [pc, #56]	; (8001ed0 <MX_USART2_UART_Init+0x4c>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ed0 <MX_USART2_UART_Init+0x4c>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ea2:	4b0b      	ldr	r3, [pc, #44]	; (8001ed0 <MX_USART2_UART_Init+0x4c>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ea8:	4b09      	ldr	r3, [pc, #36]	; (8001ed0 <MX_USART2_UART_Init+0x4c>)
 8001eaa:	220c      	movs	r2, #12
 8001eac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eae:	4b08      	ldr	r3, [pc, #32]	; (8001ed0 <MX_USART2_UART_Init+0x4c>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001eb4:	4b06      	ldr	r3, [pc, #24]	; (8001ed0 <MX_USART2_UART_Init+0x4c>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001eba:	4805      	ldr	r0, [pc, #20]	; (8001ed0 <MX_USART2_UART_Init+0x4c>)
 8001ebc:	f001 fa54 	bl	8003368 <HAL_UART_Init>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d001      	beq.n	8001eca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ec6:	f7ff faaf 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20000430 	.word	0x20000430
 8001ed4:	40004400 	.word	0x40004400

08001ed8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b08a      	sub	sp, #40	; 0x28
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee0:	f107 0314 	add.w	r3, r7, #20
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	60da      	str	r2, [r3, #12]
 8001eee:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a19      	ldr	r2, [pc, #100]	; (8001f5c <HAL_UART_MspInit+0x84>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d12b      	bne.n	8001f52 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	613b      	str	r3, [r7, #16]
 8001efe:	4b18      	ldr	r3, [pc, #96]	; (8001f60 <HAL_UART_MspInit+0x88>)
 8001f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f02:	4a17      	ldr	r2, [pc, #92]	; (8001f60 <HAL_UART_MspInit+0x88>)
 8001f04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f08:	6413      	str	r3, [r2, #64]	; 0x40
 8001f0a:	4b15      	ldr	r3, [pc, #84]	; (8001f60 <HAL_UART_MspInit+0x88>)
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f12:	613b      	str	r3, [r7, #16]
 8001f14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	4b11      	ldr	r3, [pc, #68]	; (8001f60 <HAL_UART_MspInit+0x88>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	4a10      	ldr	r2, [pc, #64]	; (8001f60 <HAL_UART_MspInit+0x88>)
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	6313      	str	r3, [r2, #48]	; 0x30
 8001f26:	4b0e      	ldr	r3, [pc, #56]	; (8001f60 <HAL_UART_MspInit+0x88>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f32:	230c      	movs	r3, #12
 8001f34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f36:	2302      	movs	r3, #2
 8001f38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f42:	2307      	movs	r3, #7
 8001f44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f46:	f107 0314 	add.w	r3, r7, #20
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4805      	ldr	r0, [pc, #20]	; (8001f64 <HAL_UART_MspInit+0x8c>)
 8001f4e:	f000 f97d 	bl	800224c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001f52:	bf00      	nop
 8001f54:	3728      	adds	r7, #40	; 0x28
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40004400 	.word	0x40004400
 8001f60:	40023800 	.word	0x40023800
 8001f64:	40020000 	.word	0x40020000

08001f68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fa0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f6c:	480d      	ldr	r0, [pc, #52]	; (8001fa4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f6e:	490e      	ldr	r1, [pc, #56]	; (8001fa8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f70:	4a0e      	ldr	r2, [pc, #56]	; (8001fac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f74:	e002      	b.n	8001f7c <LoopCopyDataInit>

08001f76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f7a:	3304      	adds	r3, #4

08001f7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f80:	d3f9      	bcc.n	8001f76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f82:	4a0b      	ldr	r2, [pc, #44]	; (8001fb0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f84:	4c0b      	ldr	r4, [pc, #44]	; (8001fb4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f88:	e001      	b.n	8001f8e <LoopFillZerobss>

08001f8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f8c:	3204      	adds	r2, #4

08001f8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f90:	d3fb      	bcc.n	8001f8a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f92:	f7ff ff65 	bl	8001e60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f96:	f006 f935 	bl	8008204 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f9a:	f7ff f9c3 	bl	8001324 <main>
  bx  lr    
 8001f9e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fa0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001fa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fa8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001fac:	0800a4d4 	.word	0x0800a4d4
  ldr r2, =_sbss
 8001fb0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001fb4:	20004fb4 	.word	0x20004fb4

08001fb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fb8:	e7fe      	b.n	8001fb8 <ADC_IRQHandler>
	...

08001fbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fc0:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <HAL_Init+0x40>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a0d      	ldr	r2, [pc, #52]	; (8001ffc <HAL_Init+0x40>)
 8001fc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fcc:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <HAL_Init+0x40>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a0a      	ldr	r2, [pc, #40]	; (8001ffc <HAL_Init+0x40>)
 8001fd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fd8:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <HAL_Init+0x40>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a07      	ldr	r2, [pc, #28]	; (8001ffc <HAL_Init+0x40>)
 8001fde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fe2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fe4:	2003      	movs	r0, #3
 8001fe6:	f000 f8fc 	bl	80021e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fea:	200f      	movs	r0, #15
 8001fec:	f7ff fde0 	bl	8001bb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ff0:	f7ff fdb2 	bl	8001b58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40023c00 	.word	0x40023c00

08002000 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002004:	4b06      	ldr	r3, [pc, #24]	; (8002020 <HAL_IncTick+0x20>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	461a      	mov	r2, r3
 800200a:	4b06      	ldr	r3, [pc, #24]	; (8002024 <HAL_IncTick+0x24>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4413      	add	r3, r2
 8002010:	4a04      	ldr	r2, [pc, #16]	; (8002024 <HAL_IncTick+0x24>)
 8002012:	6013      	str	r3, [r2, #0]
}
 8002014:	bf00      	nop
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	20000008 	.word	0x20000008
 8002024:	20000474 	.word	0x20000474

08002028 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  return uwTick;
 800202c:	4b03      	ldr	r3, [pc, #12]	; (800203c <HAL_GetTick+0x14>)
 800202e:	681b      	ldr	r3, [r3, #0]
}
 8002030:	4618      	mov	r0, r3
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	20000474 	.word	0x20000474

08002040 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002048:	f7ff ffee 	bl	8002028 <HAL_GetTick>
 800204c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002058:	d005      	beq.n	8002066 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800205a:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <HAL_Delay+0x44>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	461a      	mov	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	4413      	add	r3, r2
 8002064:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002066:	bf00      	nop
 8002068:	f7ff ffde 	bl	8002028 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	429a      	cmp	r2, r3
 8002076:	d8f7      	bhi.n	8002068 <HAL_Delay+0x28>
  {
  }
}
 8002078:	bf00      	nop
 800207a:	bf00      	nop
 800207c:	3710      	adds	r7, #16
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	20000008 	.word	0x20000008

08002088 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002088:	b480      	push	{r7}
 800208a:	b085      	sub	sp, #20
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002098:	4b0c      	ldr	r3, [pc, #48]	; (80020cc <__NVIC_SetPriorityGrouping+0x44>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800209e:	68ba      	ldr	r2, [r7, #8]
 80020a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020a4:	4013      	ands	r3, r2
 80020a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020ba:	4a04      	ldr	r2, [pc, #16]	; (80020cc <__NVIC_SetPriorityGrouping+0x44>)
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	60d3      	str	r3, [r2, #12]
}
 80020c0:	bf00      	nop
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	e000ed00 	.word	0xe000ed00

080020d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020d4:	4b04      	ldr	r3, [pc, #16]	; (80020e8 <__NVIC_GetPriorityGrouping+0x18>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	0a1b      	lsrs	r3, r3, #8
 80020da:	f003 0307 	and.w	r3, r3, #7
}
 80020de:	4618      	mov	r0, r3
 80020e0:	46bd      	mov	sp, r7
 80020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e6:	4770      	bx	lr
 80020e8:	e000ed00 	.word	0xe000ed00

080020ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b083      	sub	sp, #12
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	4603      	mov	r3, r0
 80020f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	db0b      	blt.n	8002116 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020fe:	79fb      	ldrb	r3, [r7, #7]
 8002100:	f003 021f 	and.w	r2, r3, #31
 8002104:	4907      	ldr	r1, [pc, #28]	; (8002124 <__NVIC_EnableIRQ+0x38>)
 8002106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800210a:	095b      	lsrs	r3, r3, #5
 800210c:	2001      	movs	r0, #1
 800210e:	fa00 f202 	lsl.w	r2, r0, r2
 8002112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002116:	bf00      	nop
 8002118:	370c      	adds	r7, #12
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	e000e100 	.word	0xe000e100

08002128 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	4603      	mov	r3, r0
 8002130:	6039      	str	r1, [r7, #0]
 8002132:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002138:	2b00      	cmp	r3, #0
 800213a:	db0a      	blt.n	8002152 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	b2da      	uxtb	r2, r3
 8002140:	490c      	ldr	r1, [pc, #48]	; (8002174 <__NVIC_SetPriority+0x4c>)
 8002142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002146:	0112      	lsls	r2, r2, #4
 8002148:	b2d2      	uxtb	r2, r2
 800214a:	440b      	add	r3, r1
 800214c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002150:	e00a      	b.n	8002168 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	b2da      	uxtb	r2, r3
 8002156:	4908      	ldr	r1, [pc, #32]	; (8002178 <__NVIC_SetPriority+0x50>)
 8002158:	79fb      	ldrb	r3, [r7, #7]
 800215a:	f003 030f 	and.w	r3, r3, #15
 800215e:	3b04      	subs	r3, #4
 8002160:	0112      	lsls	r2, r2, #4
 8002162:	b2d2      	uxtb	r2, r2
 8002164:	440b      	add	r3, r1
 8002166:	761a      	strb	r2, [r3, #24]
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	e000e100 	.word	0xe000e100
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800217c:	b480      	push	{r7}
 800217e:	b089      	sub	sp, #36	; 0x24
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f003 0307 	and.w	r3, r3, #7
 800218e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	f1c3 0307 	rsb	r3, r3, #7
 8002196:	2b04      	cmp	r3, #4
 8002198:	bf28      	it	cs
 800219a:	2304      	movcs	r3, #4
 800219c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	3304      	adds	r3, #4
 80021a2:	2b06      	cmp	r3, #6
 80021a4:	d902      	bls.n	80021ac <NVIC_EncodePriority+0x30>
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	3b03      	subs	r3, #3
 80021aa:	e000      	b.n	80021ae <NVIC_EncodePriority+0x32>
 80021ac:	2300      	movs	r3, #0
 80021ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b0:	f04f 32ff 	mov.w	r2, #4294967295
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	43da      	mvns	r2, r3
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	401a      	ands	r2, r3
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021c4:	f04f 31ff 	mov.w	r1, #4294967295
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	fa01 f303 	lsl.w	r3, r1, r3
 80021ce:	43d9      	mvns	r1, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d4:	4313      	orrs	r3, r2
         );
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3724      	adds	r7, #36	; 0x24
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e2:	b580      	push	{r7, lr}
 80021e4:	b082      	sub	sp, #8
 80021e6:	af00      	add	r7, sp, #0
 80021e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021ea:	6878      	ldr	r0, [r7, #4]
 80021ec:	f7ff ff4c 	bl	8002088 <__NVIC_SetPriorityGrouping>
}
 80021f0:	bf00      	nop
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b086      	sub	sp, #24
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	4603      	mov	r3, r0
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
 8002204:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002206:	2300      	movs	r3, #0
 8002208:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800220a:	f7ff ff61 	bl	80020d0 <__NVIC_GetPriorityGrouping>
 800220e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	68b9      	ldr	r1, [r7, #8]
 8002214:	6978      	ldr	r0, [r7, #20]
 8002216:	f7ff ffb1 	bl	800217c <NVIC_EncodePriority>
 800221a:	4602      	mov	r2, r0
 800221c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002220:	4611      	mov	r1, r2
 8002222:	4618      	mov	r0, r3
 8002224:	f7ff ff80 	bl	8002128 <__NVIC_SetPriority>
}
 8002228:	bf00      	nop
 800222a:	3718      	adds	r7, #24
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	4603      	mov	r3, r0
 8002238:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800223a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff ff54 	bl	80020ec <__NVIC_EnableIRQ>
}
 8002244:	bf00      	nop
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800224c:	b480      	push	{r7}
 800224e:	b089      	sub	sp, #36	; 0x24
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002256:	2300      	movs	r3, #0
 8002258:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800225a:	2300      	movs	r3, #0
 800225c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800225e:	2300      	movs	r3, #0
 8002260:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002262:	2300      	movs	r3, #0
 8002264:	61fb      	str	r3, [r7, #28]
 8002266:	e159      	b.n	800251c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002268:	2201      	movs	r2, #1
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	697a      	ldr	r2, [r7, #20]
 8002278:	4013      	ands	r3, r2
 800227a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800227c:	693a      	ldr	r2, [r7, #16]
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	429a      	cmp	r2, r3
 8002282:	f040 8148 	bne.w	8002516 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f003 0303 	and.w	r3, r3, #3
 800228e:	2b01      	cmp	r3, #1
 8002290:	d005      	beq.n	800229e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800229a:	2b02      	cmp	r3, #2
 800229c:	d130      	bne.n	8002300 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022a4:	69fb      	ldr	r3, [r7, #28]
 80022a6:	005b      	lsls	r3, r3, #1
 80022a8:	2203      	movs	r2, #3
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	43db      	mvns	r3, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4013      	ands	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	68da      	ldr	r2, [r3, #12]
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022d4:	2201      	movs	r2, #1
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	43db      	mvns	r3, r3
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4013      	ands	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	091b      	lsrs	r3, r3, #4
 80022ea:	f003 0201 	and.w	r2, r3, #1
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	f003 0303 	and.w	r3, r3, #3
 8002308:	2b03      	cmp	r3, #3
 800230a:	d017      	beq.n	800233c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	2203      	movs	r2, #3
 8002318:	fa02 f303 	lsl.w	r3, r2, r3
 800231c:	43db      	mvns	r3, r3
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	4013      	ands	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	4313      	orrs	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 0303 	and.w	r3, r3, #3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d123      	bne.n	8002390 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	08da      	lsrs	r2, r3, #3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	3208      	adds	r2, #8
 8002350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002354:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	220f      	movs	r2, #15
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	43db      	mvns	r3, r3
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	4013      	ands	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	691a      	ldr	r2, [r3, #16]
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	f003 0307 	and.w	r3, r3, #7
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	fa02 f303 	lsl.w	r3, r2, r3
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	4313      	orrs	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	08da      	lsrs	r2, r3, #3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	3208      	adds	r2, #8
 800238a:	69b9      	ldr	r1, [r7, #24]
 800238c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	2203      	movs	r2, #3
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	4013      	ands	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f003 0203 	and.w	r2, r3, #3
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 80a2 	beq.w	8002516 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023d2:	2300      	movs	r3, #0
 80023d4:	60fb      	str	r3, [r7, #12]
 80023d6:	4b57      	ldr	r3, [pc, #348]	; (8002534 <HAL_GPIO_Init+0x2e8>)
 80023d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023da:	4a56      	ldr	r2, [pc, #344]	; (8002534 <HAL_GPIO_Init+0x2e8>)
 80023dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023e0:	6453      	str	r3, [r2, #68]	; 0x44
 80023e2:	4b54      	ldr	r3, [pc, #336]	; (8002534 <HAL_GPIO_Init+0x2e8>)
 80023e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023ea:	60fb      	str	r3, [r7, #12]
 80023ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023ee:	4a52      	ldr	r2, [pc, #328]	; (8002538 <HAL_GPIO_Init+0x2ec>)
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	089b      	lsrs	r3, r3, #2
 80023f4:	3302      	adds	r3, #2
 80023f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	f003 0303 	and.w	r3, r3, #3
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	220f      	movs	r2, #15
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	43db      	mvns	r3, r3
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	4013      	ands	r3, r2
 8002410:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a49      	ldr	r2, [pc, #292]	; (800253c <HAL_GPIO_Init+0x2f0>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d019      	beq.n	800244e <HAL_GPIO_Init+0x202>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a48      	ldr	r2, [pc, #288]	; (8002540 <HAL_GPIO_Init+0x2f4>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d013      	beq.n	800244a <HAL_GPIO_Init+0x1fe>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a47      	ldr	r2, [pc, #284]	; (8002544 <HAL_GPIO_Init+0x2f8>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d00d      	beq.n	8002446 <HAL_GPIO_Init+0x1fa>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a46      	ldr	r2, [pc, #280]	; (8002548 <HAL_GPIO_Init+0x2fc>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d007      	beq.n	8002442 <HAL_GPIO_Init+0x1f6>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a45      	ldr	r2, [pc, #276]	; (800254c <HAL_GPIO_Init+0x300>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d101      	bne.n	800243e <HAL_GPIO_Init+0x1f2>
 800243a:	2304      	movs	r3, #4
 800243c:	e008      	b.n	8002450 <HAL_GPIO_Init+0x204>
 800243e:	2307      	movs	r3, #7
 8002440:	e006      	b.n	8002450 <HAL_GPIO_Init+0x204>
 8002442:	2303      	movs	r3, #3
 8002444:	e004      	b.n	8002450 <HAL_GPIO_Init+0x204>
 8002446:	2302      	movs	r3, #2
 8002448:	e002      	b.n	8002450 <HAL_GPIO_Init+0x204>
 800244a:	2301      	movs	r3, #1
 800244c:	e000      	b.n	8002450 <HAL_GPIO_Init+0x204>
 800244e:	2300      	movs	r3, #0
 8002450:	69fa      	ldr	r2, [r7, #28]
 8002452:	f002 0203 	and.w	r2, r2, #3
 8002456:	0092      	lsls	r2, r2, #2
 8002458:	4093      	lsls	r3, r2
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4313      	orrs	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002460:	4935      	ldr	r1, [pc, #212]	; (8002538 <HAL_GPIO_Init+0x2ec>)
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	089b      	lsrs	r3, r3, #2
 8002466:	3302      	adds	r3, #2
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800246e:	4b38      	ldr	r3, [pc, #224]	; (8002550 <HAL_GPIO_Init+0x304>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	43db      	mvns	r3, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4013      	ands	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	4313      	orrs	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002492:	4a2f      	ldr	r2, [pc, #188]	; (8002550 <HAL_GPIO_Init+0x304>)
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002498:	4b2d      	ldr	r3, [pc, #180]	; (8002550 <HAL_GPIO_Init+0x304>)
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	43db      	mvns	r3, r3
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4013      	ands	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d003      	beq.n	80024bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	4313      	orrs	r3, r2
 80024ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024bc:	4a24      	ldr	r2, [pc, #144]	; (8002550 <HAL_GPIO_Init+0x304>)
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024c2:	4b23      	ldr	r3, [pc, #140]	; (8002550 <HAL_GPIO_Init+0x304>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	43db      	mvns	r3, r3
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	4013      	ands	r3, r2
 80024d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024e6:	4a1a      	ldr	r2, [pc, #104]	; (8002550 <HAL_GPIO_Init+0x304>)
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024ec:	4b18      	ldr	r3, [pc, #96]	; (8002550 <HAL_GPIO_Init+0x304>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	43db      	mvns	r3, r3
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4013      	ands	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002504:	2b00      	cmp	r3, #0
 8002506:	d003      	beq.n	8002510 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	4313      	orrs	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002510:	4a0f      	ldr	r2, [pc, #60]	; (8002550 <HAL_GPIO_Init+0x304>)
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	3301      	adds	r3, #1
 800251a:	61fb      	str	r3, [r7, #28]
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	2b0f      	cmp	r3, #15
 8002520:	f67f aea2 	bls.w	8002268 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002524:	bf00      	nop
 8002526:	bf00      	nop
 8002528:	3724      	adds	r7, #36	; 0x24
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	40023800 	.word	0x40023800
 8002538:	40013800 	.word	0x40013800
 800253c:	40020000 	.word	0x40020000
 8002540:	40020400 	.word	0x40020400
 8002544:	40020800 	.word	0x40020800
 8002548:	40020c00 	.word	0x40020c00
 800254c:	40021000 	.word	0x40021000
 8002550:	40013c00 	.word	0x40013c00

08002554 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b086      	sub	sp, #24
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e267      	b.n	8002a36 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b00      	cmp	r3, #0
 8002570:	d075      	beq.n	800265e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002572:	4b88      	ldr	r3, [pc, #544]	; (8002794 <HAL_RCC_OscConfig+0x240>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	f003 030c 	and.w	r3, r3, #12
 800257a:	2b04      	cmp	r3, #4
 800257c:	d00c      	beq.n	8002598 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800257e:	4b85      	ldr	r3, [pc, #532]	; (8002794 <HAL_RCC_OscConfig+0x240>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002586:	2b08      	cmp	r3, #8
 8002588:	d112      	bne.n	80025b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800258a:	4b82      	ldr	r3, [pc, #520]	; (8002794 <HAL_RCC_OscConfig+0x240>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002592:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002596:	d10b      	bne.n	80025b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002598:	4b7e      	ldr	r3, [pc, #504]	; (8002794 <HAL_RCC_OscConfig+0x240>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d05b      	beq.n	800265c <HAL_RCC_OscConfig+0x108>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d157      	bne.n	800265c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e242      	b.n	8002a36 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025b8:	d106      	bne.n	80025c8 <HAL_RCC_OscConfig+0x74>
 80025ba:	4b76      	ldr	r3, [pc, #472]	; (8002794 <HAL_RCC_OscConfig+0x240>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a75      	ldr	r2, [pc, #468]	; (8002794 <HAL_RCC_OscConfig+0x240>)
 80025c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c4:	6013      	str	r3, [r2, #0]
 80025c6:	e01d      	b.n	8002604 <HAL_RCC_OscConfig+0xb0>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025d0:	d10c      	bne.n	80025ec <HAL_RCC_OscConfig+0x98>
 80025d2:	4b70      	ldr	r3, [pc, #448]	; (8002794 <HAL_RCC_OscConfig+0x240>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a6f      	ldr	r2, [pc, #444]	; (8002794 <HAL_RCC_OscConfig+0x240>)
 80025d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025dc:	6013      	str	r3, [r2, #0]
 80025de:	4b6d      	ldr	r3, [pc, #436]	; (8002794 <HAL_RCC_OscConfig+0x240>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a6c      	ldr	r2, [pc, #432]	; (8002794 <HAL_RCC_OscConfig+0x240>)
 80025e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025e8:	6013      	str	r3, [r2, #0]
 80025ea:	e00b      	b.n	8002604 <HAL_RCC_OscConfig+0xb0>
 80025ec:	4b69      	ldr	r3, [pc, #420]	; (8002794 <HAL_RCC_OscConfig+0x240>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a68      	ldr	r2, [pc, #416]	; (8002794 <HAL_RCC_OscConfig+0x240>)
 80025f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025f6:	6013      	str	r3, [r2, #0]
 80025f8:	4b66      	ldr	r3, [pc, #408]	; (8002794 <HAL_RCC_OscConfig+0x240>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a65      	ldr	r2, [pc, #404]	; (8002794 <HAL_RCC_OscConfig+0x240>)
 80025fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002602:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d013      	beq.n	8002634 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800260c:	f7ff fd0c 	bl	8002028 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002614:	f7ff fd08 	bl	8002028 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b64      	cmp	r3, #100	; 0x64
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e207      	b.n	8002a36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002626:	4b5b      	ldr	r3, [pc, #364]	; (8002794 <HAL_RCC_OscConfig+0x240>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0f0      	beq.n	8002614 <HAL_RCC_OscConfig+0xc0>
 8002632:	e014      	b.n	800265e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002634:	f7ff fcf8 	bl	8002028 <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800263c:	f7ff fcf4 	bl	8002028 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b64      	cmp	r3, #100	; 0x64
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e1f3      	b.n	8002a36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800264e:	4b51      	ldr	r3, [pc, #324]	; (8002794 <HAL_RCC_OscConfig+0x240>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1f0      	bne.n	800263c <HAL_RCC_OscConfig+0xe8>
 800265a:	e000      	b.n	800265e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800265c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d063      	beq.n	8002732 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800266a:	4b4a      	ldr	r3, [pc, #296]	; (8002794 <HAL_RCC_OscConfig+0x240>)
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 030c 	and.w	r3, r3, #12
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00b      	beq.n	800268e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002676:	4b47      	ldr	r3, [pc, #284]	; (8002794 <HAL_RCC_OscConfig+0x240>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800267e:	2b08      	cmp	r3, #8
 8002680:	d11c      	bne.n	80026bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002682:	4b44      	ldr	r3, [pc, #272]	; (8002794 <HAL_RCC_OscConfig+0x240>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d116      	bne.n	80026bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800268e:	4b41      	ldr	r3, [pc, #260]	; (8002794 <HAL_RCC_OscConfig+0x240>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d005      	beq.n	80026a6 <HAL_RCC_OscConfig+0x152>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d001      	beq.n	80026a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e1c7      	b.n	8002a36 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a6:	4b3b      	ldr	r3, [pc, #236]	; (8002794 <HAL_RCC_OscConfig+0x240>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	4937      	ldr	r1, [pc, #220]	; (8002794 <HAL_RCC_OscConfig+0x240>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ba:	e03a      	b.n	8002732 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d020      	beq.n	8002706 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026c4:	4b34      	ldr	r3, [pc, #208]	; (8002798 <HAL_RCC_OscConfig+0x244>)
 80026c6:	2201      	movs	r2, #1
 80026c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ca:	f7ff fcad 	bl	8002028 <HAL_GetTick>
 80026ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026d0:	e008      	b.n	80026e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026d2:	f7ff fca9 	bl	8002028 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e1a8      	b.n	8002a36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e4:	4b2b      	ldr	r3, [pc, #172]	; (8002794 <HAL_RCC_OscConfig+0x240>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d0f0      	beq.n	80026d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f0:	4b28      	ldr	r3, [pc, #160]	; (8002794 <HAL_RCC_OscConfig+0x240>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	4925      	ldr	r1, [pc, #148]	; (8002794 <HAL_RCC_OscConfig+0x240>)
 8002700:	4313      	orrs	r3, r2
 8002702:	600b      	str	r3, [r1, #0]
 8002704:	e015      	b.n	8002732 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002706:	4b24      	ldr	r3, [pc, #144]	; (8002798 <HAL_RCC_OscConfig+0x244>)
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270c:	f7ff fc8c 	bl	8002028 <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002714:	f7ff fc88 	bl	8002028 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e187      	b.n	8002a36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002726:	4b1b      	ldr	r3, [pc, #108]	; (8002794 <HAL_RCC_OscConfig+0x240>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1f0      	bne.n	8002714 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0308 	and.w	r3, r3, #8
 800273a:	2b00      	cmp	r3, #0
 800273c:	d036      	beq.n	80027ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d016      	beq.n	8002774 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002746:	4b15      	ldr	r3, [pc, #84]	; (800279c <HAL_RCC_OscConfig+0x248>)
 8002748:	2201      	movs	r2, #1
 800274a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800274c:	f7ff fc6c 	bl	8002028 <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002752:	e008      	b.n	8002766 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002754:	f7ff fc68 	bl	8002028 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e167      	b.n	8002a36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002766:	4b0b      	ldr	r3, [pc, #44]	; (8002794 <HAL_RCC_OscConfig+0x240>)
 8002768:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d0f0      	beq.n	8002754 <HAL_RCC_OscConfig+0x200>
 8002772:	e01b      	b.n	80027ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002774:	4b09      	ldr	r3, [pc, #36]	; (800279c <HAL_RCC_OscConfig+0x248>)
 8002776:	2200      	movs	r2, #0
 8002778:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800277a:	f7ff fc55 	bl	8002028 <HAL_GetTick>
 800277e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002780:	e00e      	b.n	80027a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002782:	f7ff fc51 	bl	8002028 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d907      	bls.n	80027a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e150      	b.n	8002a36 <HAL_RCC_OscConfig+0x4e2>
 8002794:	40023800 	.word	0x40023800
 8002798:	42470000 	.word	0x42470000
 800279c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027a0:	4b88      	ldr	r3, [pc, #544]	; (80029c4 <HAL_RCC_OscConfig+0x470>)
 80027a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1ea      	bne.n	8002782 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0304 	and.w	r3, r3, #4
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f000 8097 	beq.w	80028e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ba:	2300      	movs	r3, #0
 80027bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027be:	4b81      	ldr	r3, [pc, #516]	; (80029c4 <HAL_RCC_OscConfig+0x470>)
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10f      	bne.n	80027ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ca:	2300      	movs	r3, #0
 80027cc:	60bb      	str	r3, [r7, #8]
 80027ce:	4b7d      	ldr	r3, [pc, #500]	; (80029c4 <HAL_RCC_OscConfig+0x470>)
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	4a7c      	ldr	r2, [pc, #496]	; (80029c4 <HAL_RCC_OscConfig+0x470>)
 80027d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027d8:	6413      	str	r3, [r2, #64]	; 0x40
 80027da:	4b7a      	ldr	r3, [pc, #488]	; (80029c4 <HAL_RCC_OscConfig+0x470>)
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e2:	60bb      	str	r3, [r7, #8]
 80027e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027e6:	2301      	movs	r3, #1
 80027e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ea:	4b77      	ldr	r3, [pc, #476]	; (80029c8 <HAL_RCC_OscConfig+0x474>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d118      	bne.n	8002828 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027f6:	4b74      	ldr	r3, [pc, #464]	; (80029c8 <HAL_RCC_OscConfig+0x474>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a73      	ldr	r2, [pc, #460]	; (80029c8 <HAL_RCC_OscConfig+0x474>)
 80027fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002800:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002802:	f7ff fc11 	bl	8002028 <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002808:	e008      	b.n	800281c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800280a:	f7ff fc0d 	bl	8002028 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e10c      	b.n	8002a36 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800281c:	4b6a      	ldr	r3, [pc, #424]	; (80029c8 <HAL_RCC_OscConfig+0x474>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0f0      	beq.n	800280a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d106      	bne.n	800283e <HAL_RCC_OscConfig+0x2ea>
 8002830:	4b64      	ldr	r3, [pc, #400]	; (80029c4 <HAL_RCC_OscConfig+0x470>)
 8002832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002834:	4a63      	ldr	r2, [pc, #396]	; (80029c4 <HAL_RCC_OscConfig+0x470>)
 8002836:	f043 0301 	orr.w	r3, r3, #1
 800283a:	6713      	str	r3, [r2, #112]	; 0x70
 800283c:	e01c      	b.n	8002878 <HAL_RCC_OscConfig+0x324>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	2b05      	cmp	r3, #5
 8002844:	d10c      	bne.n	8002860 <HAL_RCC_OscConfig+0x30c>
 8002846:	4b5f      	ldr	r3, [pc, #380]	; (80029c4 <HAL_RCC_OscConfig+0x470>)
 8002848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284a:	4a5e      	ldr	r2, [pc, #376]	; (80029c4 <HAL_RCC_OscConfig+0x470>)
 800284c:	f043 0304 	orr.w	r3, r3, #4
 8002850:	6713      	str	r3, [r2, #112]	; 0x70
 8002852:	4b5c      	ldr	r3, [pc, #368]	; (80029c4 <HAL_RCC_OscConfig+0x470>)
 8002854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002856:	4a5b      	ldr	r2, [pc, #364]	; (80029c4 <HAL_RCC_OscConfig+0x470>)
 8002858:	f043 0301 	orr.w	r3, r3, #1
 800285c:	6713      	str	r3, [r2, #112]	; 0x70
 800285e:	e00b      	b.n	8002878 <HAL_RCC_OscConfig+0x324>
 8002860:	4b58      	ldr	r3, [pc, #352]	; (80029c4 <HAL_RCC_OscConfig+0x470>)
 8002862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002864:	4a57      	ldr	r2, [pc, #348]	; (80029c4 <HAL_RCC_OscConfig+0x470>)
 8002866:	f023 0301 	bic.w	r3, r3, #1
 800286a:	6713      	str	r3, [r2, #112]	; 0x70
 800286c:	4b55      	ldr	r3, [pc, #340]	; (80029c4 <HAL_RCC_OscConfig+0x470>)
 800286e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002870:	4a54      	ldr	r2, [pc, #336]	; (80029c4 <HAL_RCC_OscConfig+0x470>)
 8002872:	f023 0304 	bic.w	r3, r3, #4
 8002876:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d015      	beq.n	80028ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002880:	f7ff fbd2 	bl	8002028 <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002886:	e00a      	b.n	800289e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002888:	f7ff fbce 	bl	8002028 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	f241 3288 	movw	r2, #5000	; 0x1388
 8002896:	4293      	cmp	r3, r2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e0cb      	b.n	8002a36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800289e:	4b49      	ldr	r3, [pc, #292]	; (80029c4 <HAL_RCC_OscConfig+0x470>)
 80028a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d0ee      	beq.n	8002888 <HAL_RCC_OscConfig+0x334>
 80028aa:	e014      	b.n	80028d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ac:	f7ff fbbc 	bl	8002028 <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028b2:	e00a      	b.n	80028ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028b4:	f7ff fbb8 	bl	8002028 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e0b5      	b.n	8002a36 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ca:	4b3e      	ldr	r3, [pc, #248]	; (80029c4 <HAL_RCC_OscConfig+0x470>)
 80028cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1ee      	bne.n	80028b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028d6:	7dfb      	ldrb	r3, [r7, #23]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d105      	bne.n	80028e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028dc:	4b39      	ldr	r3, [pc, #228]	; (80029c4 <HAL_RCC_OscConfig+0x470>)
 80028de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e0:	4a38      	ldr	r2, [pc, #224]	; (80029c4 <HAL_RCC_OscConfig+0x470>)
 80028e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f000 80a1 	beq.w	8002a34 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028f2:	4b34      	ldr	r3, [pc, #208]	; (80029c4 <HAL_RCC_OscConfig+0x470>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 030c 	and.w	r3, r3, #12
 80028fa:	2b08      	cmp	r3, #8
 80028fc:	d05c      	beq.n	80029b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	2b02      	cmp	r3, #2
 8002904:	d141      	bne.n	800298a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002906:	4b31      	ldr	r3, [pc, #196]	; (80029cc <HAL_RCC_OscConfig+0x478>)
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290c:	f7ff fb8c 	bl	8002028 <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002914:	f7ff fb88 	bl	8002028 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e087      	b.n	8002a36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002926:	4b27      	ldr	r3, [pc, #156]	; (80029c4 <HAL_RCC_OscConfig+0x470>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1f0      	bne.n	8002914 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69da      	ldr	r2, [r3, #28]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	431a      	orrs	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002940:	019b      	lsls	r3, r3, #6
 8002942:	431a      	orrs	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002948:	085b      	lsrs	r3, r3, #1
 800294a:	3b01      	subs	r3, #1
 800294c:	041b      	lsls	r3, r3, #16
 800294e:	431a      	orrs	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002954:	061b      	lsls	r3, r3, #24
 8002956:	491b      	ldr	r1, [pc, #108]	; (80029c4 <HAL_RCC_OscConfig+0x470>)
 8002958:	4313      	orrs	r3, r2
 800295a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800295c:	4b1b      	ldr	r3, [pc, #108]	; (80029cc <HAL_RCC_OscConfig+0x478>)
 800295e:	2201      	movs	r2, #1
 8002960:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002962:	f7ff fb61 	bl	8002028 <HAL_GetTick>
 8002966:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002968:	e008      	b.n	800297c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800296a:	f7ff fb5d 	bl	8002028 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	2b02      	cmp	r3, #2
 8002976:	d901      	bls.n	800297c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002978:	2303      	movs	r3, #3
 800297a:	e05c      	b.n	8002a36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800297c:	4b11      	ldr	r3, [pc, #68]	; (80029c4 <HAL_RCC_OscConfig+0x470>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d0f0      	beq.n	800296a <HAL_RCC_OscConfig+0x416>
 8002988:	e054      	b.n	8002a34 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800298a:	4b10      	ldr	r3, [pc, #64]	; (80029cc <HAL_RCC_OscConfig+0x478>)
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002990:	f7ff fb4a 	bl	8002028 <HAL_GetTick>
 8002994:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002996:	e008      	b.n	80029aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002998:	f7ff fb46 	bl	8002028 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e045      	b.n	8002a36 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029aa:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <HAL_RCC_OscConfig+0x470>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1f0      	bne.n	8002998 <HAL_RCC_OscConfig+0x444>
 80029b6:	e03d      	b.n	8002a34 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d107      	bne.n	80029d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e038      	b.n	8002a36 <HAL_RCC_OscConfig+0x4e2>
 80029c4:	40023800 	.word	0x40023800
 80029c8:	40007000 	.word	0x40007000
 80029cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029d0:	4b1b      	ldr	r3, [pc, #108]	; (8002a40 <HAL_RCC_OscConfig+0x4ec>)
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d028      	beq.n	8002a30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d121      	bne.n	8002a30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d11a      	bne.n	8002a30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a00:	4013      	ands	r3, r2
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d111      	bne.n	8002a30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a16:	085b      	lsrs	r3, r3, #1
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d107      	bne.n	8002a30 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d001      	beq.n	8002a34 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e000      	b.n	8002a36 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a34:	2300      	movs	r3, #0
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3718      	adds	r7, #24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	40023800 	.word	0x40023800

08002a44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d101      	bne.n	8002a58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	e0cc      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a58:	4b68      	ldr	r3, [pc, #416]	; (8002bfc <HAL_RCC_ClockConfig+0x1b8>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0307 	and.w	r3, r3, #7
 8002a60:	683a      	ldr	r2, [r7, #0]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d90c      	bls.n	8002a80 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a66:	4b65      	ldr	r3, [pc, #404]	; (8002bfc <HAL_RCC_ClockConfig+0x1b8>)
 8002a68:	683a      	ldr	r2, [r7, #0]
 8002a6a:	b2d2      	uxtb	r2, r2
 8002a6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a6e:	4b63      	ldr	r3, [pc, #396]	; (8002bfc <HAL_RCC_ClockConfig+0x1b8>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0307 	and.w	r3, r3, #7
 8002a76:	683a      	ldr	r2, [r7, #0]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d001      	beq.n	8002a80 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e0b8      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d020      	beq.n	8002ace <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0304 	and.w	r3, r3, #4
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d005      	beq.n	8002aa4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a98:	4b59      	ldr	r3, [pc, #356]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	4a58      	ldr	r2, [pc, #352]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002aa2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f003 0308 	and.w	r3, r3, #8
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d005      	beq.n	8002abc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ab0:	4b53      	ldr	r3, [pc, #332]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	4a52      	ldr	r2, [pc, #328]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002aba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002abc:	4b50      	ldr	r3, [pc, #320]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	494d      	ldr	r1, [pc, #308]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d044      	beq.n	8002b64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d107      	bne.n	8002af2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ae2:	4b47      	ldr	r3, [pc, #284]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d119      	bne.n	8002b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e07f      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d003      	beq.n	8002b02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002afe:	2b03      	cmp	r3, #3
 8002b00:	d107      	bne.n	8002b12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b02:	4b3f      	ldr	r3, [pc, #252]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d109      	bne.n	8002b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e06f      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b12:	4b3b      	ldr	r3, [pc, #236]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e067      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b22:	4b37      	ldr	r3, [pc, #220]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f023 0203 	bic.w	r2, r3, #3
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	4934      	ldr	r1, [pc, #208]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002b30:	4313      	orrs	r3, r2
 8002b32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b34:	f7ff fa78 	bl	8002028 <HAL_GetTick>
 8002b38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b3a:	e00a      	b.n	8002b52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b3c:	f7ff fa74 	bl	8002028 <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d901      	bls.n	8002b52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e04f      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b52:	4b2b      	ldr	r3, [pc, #172]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f003 020c 	and.w	r2, r3, #12
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d1eb      	bne.n	8002b3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b64:	4b25      	ldr	r3, [pc, #148]	; (8002bfc <HAL_RCC_ClockConfig+0x1b8>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d20c      	bcs.n	8002b8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b72:	4b22      	ldr	r3, [pc, #136]	; (8002bfc <HAL_RCC_ClockConfig+0x1b8>)
 8002b74:	683a      	ldr	r2, [r7, #0]
 8002b76:	b2d2      	uxtb	r2, r2
 8002b78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b7a:	4b20      	ldr	r3, [pc, #128]	; (8002bfc <HAL_RCC_ClockConfig+0x1b8>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d001      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e032      	b.n	8002bf2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0304 	and.w	r3, r3, #4
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d008      	beq.n	8002baa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b98:	4b19      	ldr	r3, [pc, #100]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	4916      	ldr	r1, [pc, #88]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 0308 	and.w	r3, r3, #8
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d009      	beq.n	8002bca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bb6:	4b12      	ldr	r3, [pc, #72]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	490e      	ldr	r1, [pc, #56]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bca:	f000 f821 	bl	8002c10 <HAL_RCC_GetSysClockFreq>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	4b0b      	ldr	r3, [pc, #44]	; (8002c00 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	091b      	lsrs	r3, r3, #4
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	490a      	ldr	r1, [pc, #40]	; (8002c04 <HAL_RCC_ClockConfig+0x1c0>)
 8002bdc:	5ccb      	ldrb	r3, [r1, r3]
 8002bde:	fa22 f303 	lsr.w	r3, r2, r3
 8002be2:	4a09      	ldr	r2, [pc, #36]	; (8002c08 <HAL_RCC_ClockConfig+0x1c4>)
 8002be4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002be6:	4b09      	ldr	r3, [pc, #36]	; (8002c0c <HAL_RCC_ClockConfig+0x1c8>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7fe ffe0 	bl	8001bb0 <HAL_InitTick>

  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40023c00 	.word	0x40023c00
 8002c00:	40023800 	.word	0x40023800
 8002c04:	0800a13c 	.word	0x0800a13c
 8002c08:	20000000 	.word	0x20000000
 8002c0c:	20000004 	.word	0x20000004

08002c10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c14:	b090      	sub	sp, #64	; 0x40
 8002c16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	637b      	str	r3, [r7, #52]	; 0x34
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c20:	2300      	movs	r3, #0
 8002c22:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002c24:	2300      	movs	r3, #0
 8002c26:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c28:	4b59      	ldr	r3, [pc, #356]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 030c 	and.w	r3, r3, #12
 8002c30:	2b08      	cmp	r3, #8
 8002c32:	d00d      	beq.n	8002c50 <HAL_RCC_GetSysClockFreq+0x40>
 8002c34:	2b08      	cmp	r3, #8
 8002c36:	f200 80a1 	bhi.w	8002d7c <HAL_RCC_GetSysClockFreq+0x16c>
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d002      	beq.n	8002c44 <HAL_RCC_GetSysClockFreq+0x34>
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	d003      	beq.n	8002c4a <HAL_RCC_GetSysClockFreq+0x3a>
 8002c42:	e09b      	b.n	8002d7c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c44:	4b53      	ldr	r3, [pc, #332]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c46:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002c48:	e09b      	b.n	8002d82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c4a:	4b53      	ldr	r3, [pc, #332]	; (8002d98 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c4c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c4e:	e098      	b.n	8002d82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c50:	4b4f      	ldr	r3, [pc, #316]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c58:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c5a:	4b4d      	ldr	r3, [pc, #308]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d028      	beq.n	8002cb8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c66:	4b4a      	ldr	r3, [pc, #296]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	099b      	lsrs	r3, r3, #6
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	623b      	str	r3, [r7, #32]
 8002c70:	627a      	str	r2, [r7, #36]	; 0x24
 8002c72:	6a3b      	ldr	r3, [r7, #32]
 8002c74:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002c78:	2100      	movs	r1, #0
 8002c7a:	4b47      	ldr	r3, [pc, #284]	; (8002d98 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c7c:	fb03 f201 	mul.w	r2, r3, r1
 8002c80:	2300      	movs	r3, #0
 8002c82:	fb00 f303 	mul.w	r3, r0, r3
 8002c86:	4413      	add	r3, r2
 8002c88:	4a43      	ldr	r2, [pc, #268]	; (8002d98 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c8a:	fba0 1202 	umull	r1, r2, r0, r2
 8002c8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c90:	460a      	mov	r2, r1
 8002c92:	62ba      	str	r2, [r7, #40]	; 0x28
 8002c94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c96:	4413      	add	r3, r2
 8002c98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	61bb      	str	r3, [r7, #24]
 8002ca0:	61fa      	str	r2, [r7, #28]
 8002ca2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ca6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002caa:	f7fd ff85 	bl	8000bb8 <__aeabi_uldivmod>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cb6:	e053      	b.n	8002d60 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cb8:	4b35      	ldr	r3, [pc, #212]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	099b      	lsrs	r3, r3, #6
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	613b      	str	r3, [r7, #16]
 8002cc2:	617a      	str	r2, [r7, #20]
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002cca:	f04f 0b00 	mov.w	fp, #0
 8002cce:	4652      	mov	r2, sl
 8002cd0:	465b      	mov	r3, fp
 8002cd2:	f04f 0000 	mov.w	r0, #0
 8002cd6:	f04f 0100 	mov.w	r1, #0
 8002cda:	0159      	lsls	r1, r3, #5
 8002cdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ce0:	0150      	lsls	r0, r2, #5
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	460b      	mov	r3, r1
 8002ce6:	ebb2 080a 	subs.w	r8, r2, sl
 8002cea:	eb63 090b 	sbc.w	r9, r3, fp
 8002cee:	f04f 0200 	mov.w	r2, #0
 8002cf2:	f04f 0300 	mov.w	r3, #0
 8002cf6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002cfa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002cfe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d02:	ebb2 0408 	subs.w	r4, r2, r8
 8002d06:	eb63 0509 	sbc.w	r5, r3, r9
 8002d0a:	f04f 0200 	mov.w	r2, #0
 8002d0e:	f04f 0300 	mov.w	r3, #0
 8002d12:	00eb      	lsls	r3, r5, #3
 8002d14:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d18:	00e2      	lsls	r2, r4, #3
 8002d1a:	4614      	mov	r4, r2
 8002d1c:	461d      	mov	r5, r3
 8002d1e:	eb14 030a 	adds.w	r3, r4, sl
 8002d22:	603b      	str	r3, [r7, #0]
 8002d24:	eb45 030b 	adc.w	r3, r5, fp
 8002d28:	607b      	str	r3, [r7, #4]
 8002d2a:	f04f 0200 	mov.w	r2, #0
 8002d2e:	f04f 0300 	mov.w	r3, #0
 8002d32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d36:	4629      	mov	r1, r5
 8002d38:	028b      	lsls	r3, r1, #10
 8002d3a:	4621      	mov	r1, r4
 8002d3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d40:	4621      	mov	r1, r4
 8002d42:	028a      	lsls	r2, r1, #10
 8002d44:	4610      	mov	r0, r2
 8002d46:	4619      	mov	r1, r3
 8002d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	60bb      	str	r3, [r7, #8]
 8002d4e:	60fa      	str	r2, [r7, #12]
 8002d50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d54:	f7fd ff30 	bl	8000bb8 <__aeabi_uldivmod>
 8002d58:	4602      	mov	r2, r0
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d60:	4b0b      	ldr	r3, [pc, #44]	; (8002d90 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	0c1b      	lsrs	r3, r3, #16
 8002d66:	f003 0303 	and.w	r3, r3, #3
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002d70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d78:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d7a:	e002      	b.n	8002d82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d7c:	4b05      	ldr	r3, [pc, #20]	; (8002d94 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d7e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3740      	adds	r7, #64	; 0x40
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d8e:	bf00      	nop
 8002d90:	40023800 	.word	0x40023800
 8002d94:	00f42400 	.word	0x00f42400
 8002d98:	017d7840 	.word	0x017d7840

08002d9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002da0:	4b03      	ldr	r3, [pc, #12]	; (8002db0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002da2:	681b      	ldr	r3, [r3, #0]
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	46bd      	mov	sp, r7
 8002da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dac:	4770      	bx	lr
 8002dae:	bf00      	nop
 8002db0:	20000000 	.word	0x20000000

08002db4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002db8:	f7ff fff0 	bl	8002d9c <HAL_RCC_GetHCLKFreq>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	4b05      	ldr	r3, [pc, #20]	; (8002dd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	0a9b      	lsrs	r3, r3, #10
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	4903      	ldr	r1, [pc, #12]	; (8002dd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002dca:	5ccb      	ldrb	r3, [r1, r3]
 8002dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	40023800 	.word	0x40023800
 8002dd8:	0800a14c 	.word	0x0800a14c

08002ddc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002de0:	f7ff ffdc 	bl	8002d9c <HAL_RCC_GetHCLKFreq>
 8002de4:	4602      	mov	r2, r0
 8002de6:	4b05      	ldr	r3, [pc, #20]	; (8002dfc <HAL_RCC_GetPCLK2Freq+0x20>)
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	0b5b      	lsrs	r3, r3, #13
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	4903      	ldr	r1, [pc, #12]	; (8002e00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002df2:	5ccb      	ldrb	r3, [r1, r3]
 8002df4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	0800a14c 	.word	0x0800a14c

08002e04 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002e04:	b480      	push	{r7}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	220f      	movs	r2, #15
 8002e12:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e14:	4b12      	ldr	r3, [pc, #72]	; (8002e60 <HAL_RCC_GetClockConfig+0x5c>)
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f003 0203 	and.w	r2, r3, #3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002e20:	4b0f      	ldr	r3, [pc, #60]	; (8002e60 <HAL_RCC_GetClockConfig+0x5c>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002e2c:	4b0c      	ldr	r3, [pc, #48]	; (8002e60 <HAL_RCC_GetClockConfig+0x5c>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002e38:	4b09      	ldr	r3, [pc, #36]	; (8002e60 <HAL_RCC_GetClockConfig+0x5c>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	08db      	lsrs	r3, r3, #3
 8002e3e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e46:	4b07      	ldr	r3, [pc, #28]	; (8002e64 <HAL_RCC_GetClockConfig+0x60>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0207 	and.w	r2, r3, #7
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	601a      	str	r2, [r3, #0]
}
 8002e52:	bf00      	nop
 8002e54:	370c      	adds	r7, #12
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	40023800 	.word	0x40023800
 8002e64:	40023c00 	.word	0x40023c00

08002e68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e041      	b.n	8002efe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d106      	bne.n	8002e94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f000 f839 	bl	8002f06 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2202      	movs	r2, #2
 8002e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	3304      	adds	r3, #4
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	4610      	mov	r0, r2
 8002ea8:	f000 f9ca 	bl	8003240 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002f06:	b480      	push	{r7}
 8002f08:	b083      	sub	sp, #12
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002f0e:	bf00      	nop
 8002f10:	370c      	adds	r7, #12
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
	...

08002f1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b085      	sub	sp, #20
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d001      	beq.n	8002f34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e044      	b.n	8002fbe <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2202      	movs	r2, #2
 8002f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68da      	ldr	r2, [r3, #12]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f042 0201 	orr.w	r2, r2, #1
 8002f4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a1e      	ldr	r2, [pc, #120]	; (8002fcc <HAL_TIM_Base_Start_IT+0xb0>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d018      	beq.n	8002f88 <HAL_TIM_Base_Start_IT+0x6c>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f5e:	d013      	beq.n	8002f88 <HAL_TIM_Base_Start_IT+0x6c>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a1a      	ldr	r2, [pc, #104]	; (8002fd0 <HAL_TIM_Base_Start_IT+0xb4>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d00e      	beq.n	8002f88 <HAL_TIM_Base_Start_IT+0x6c>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a19      	ldr	r2, [pc, #100]	; (8002fd4 <HAL_TIM_Base_Start_IT+0xb8>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d009      	beq.n	8002f88 <HAL_TIM_Base_Start_IT+0x6c>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a17      	ldr	r2, [pc, #92]	; (8002fd8 <HAL_TIM_Base_Start_IT+0xbc>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d004      	beq.n	8002f88 <HAL_TIM_Base_Start_IT+0x6c>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a16      	ldr	r2, [pc, #88]	; (8002fdc <HAL_TIM_Base_Start_IT+0xc0>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d111      	bne.n	8002fac <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	f003 0307 	and.w	r3, r3, #7
 8002f92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2b06      	cmp	r3, #6
 8002f98:	d010      	beq.n	8002fbc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f042 0201 	orr.w	r2, r2, #1
 8002fa8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002faa:	e007      	b.n	8002fbc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f042 0201 	orr.w	r2, r2, #1
 8002fba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fbc:	2300      	movs	r3, #0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3714      	adds	r7, #20
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	40010000 	.word	0x40010000
 8002fd0:	40000400 	.word	0x40000400
 8002fd4:	40000800 	.word	0x40000800
 8002fd8:	40000c00 	.word	0x40000c00
 8002fdc:	40014000 	.word	0x40014000

08002fe0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	691b      	ldr	r3, [r3, #16]
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d122      	bne.n	800303c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	f003 0302 	and.w	r3, r3, #2
 8003000:	2b02      	cmp	r3, #2
 8003002:	d11b      	bne.n	800303c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f06f 0202 	mvn.w	r2, #2
 800300c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	f003 0303 	and.w	r3, r3, #3
 800301e:	2b00      	cmp	r3, #0
 8003020:	d003      	beq.n	800302a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 f8ee 	bl	8003204 <HAL_TIM_IC_CaptureCallback>
 8003028:	e005      	b.n	8003036 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 f8e0 	bl	80031f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f000 f8f1 	bl	8003218 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	f003 0304 	and.w	r3, r3, #4
 8003046:	2b04      	cmp	r3, #4
 8003048:	d122      	bne.n	8003090 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	f003 0304 	and.w	r3, r3, #4
 8003054:	2b04      	cmp	r3, #4
 8003056:	d11b      	bne.n	8003090 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f06f 0204 	mvn.w	r2, #4
 8003060:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2202      	movs	r2, #2
 8003066:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003072:	2b00      	cmp	r3, #0
 8003074:	d003      	beq.n	800307e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 f8c4 	bl	8003204 <HAL_TIM_IC_CaptureCallback>
 800307c:	e005      	b.n	800308a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 f8b6 	bl	80031f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	f000 f8c7 	bl	8003218 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	f003 0308 	and.w	r3, r3, #8
 800309a:	2b08      	cmp	r3, #8
 800309c:	d122      	bne.n	80030e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	f003 0308 	and.w	r3, r3, #8
 80030a8:	2b08      	cmp	r3, #8
 80030aa:	d11b      	bne.n	80030e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f06f 0208 	mvn.w	r2, #8
 80030b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2204      	movs	r2, #4
 80030ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	69db      	ldr	r3, [r3, #28]
 80030c2:	f003 0303 	and.w	r3, r3, #3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d003      	beq.n	80030d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 f89a 	bl	8003204 <HAL_TIM_IC_CaptureCallback>
 80030d0:	e005      	b.n	80030de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 f88c 	bl	80031f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f000 f89d 	bl	8003218 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	f003 0310 	and.w	r3, r3, #16
 80030ee:	2b10      	cmp	r3, #16
 80030f0:	d122      	bne.n	8003138 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	f003 0310 	and.w	r3, r3, #16
 80030fc:	2b10      	cmp	r3, #16
 80030fe:	d11b      	bne.n	8003138 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f06f 0210 	mvn.w	r2, #16
 8003108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2208      	movs	r2, #8
 800310e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 f870 	bl	8003204 <HAL_TIM_IC_CaptureCallback>
 8003124:	e005      	b.n	8003132 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 f862 	bl	80031f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 f873 	bl	8003218 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	691b      	ldr	r3, [r3, #16]
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b01      	cmp	r3, #1
 8003144:	d10e      	bne.n	8003164 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	2b01      	cmp	r3, #1
 8003152:	d107      	bne.n	8003164 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f06f 0201 	mvn.w	r2, #1
 800315c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7fe f950 	bl	8001404 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800316e:	2b80      	cmp	r3, #128	; 0x80
 8003170:	d10e      	bne.n	8003190 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800317c:	2b80      	cmp	r3, #128	; 0x80
 800317e:	d107      	bne.n	8003190 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 f8e2 	bl	8003354 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800319a:	2b40      	cmp	r3, #64	; 0x40
 800319c:	d10e      	bne.n	80031bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a8:	2b40      	cmp	r3, #64	; 0x40
 80031aa:	d107      	bne.n	80031bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f838 	bl	800322c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	f003 0320 	and.w	r3, r3, #32
 80031c6:	2b20      	cmp	r3, #32
 80031c8:	d10e      	bne.n	80031e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	f003 0320 	and.w	r3, r3, #32
 80031d4:	2b20      	cmp	r3, #32
 80031d6:	d107      	bne.n	80031e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f06f 0220 	mvn.w	r2, #32
 80031e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 f8ac 	bl	8003340 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031e8:	bf00      	nop
 80031ea:	3708      	adds	r7, #8
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031f0:	b480      	push	{r7}
 80031f2:	b083      	sub	sp, #12
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr

08003204 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003204:	b480      	push	{r7}
 8003206:	b083      	sub	sp, #12
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800320c:	bf00      	nop
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr

08003240 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a34      	ldr	r2, [pc, #208]	; (8003324 <TIM_Base_SetConfig+0xe4>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d00f      	beq.n	8003278 <TIM_Base_SetConfig+0x38>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800325e:	d00b      	beq.n	8003278 <TIM_Base_SetConfig+0x38>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a31      	ldr	r2, [pc, #196]	; (8003328 <TIM_Base_SetConfig+0xe8>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d007      	beq.n	8003278 <TIM_Base_SetConfig+0x38>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a30      	ldr	r2, [pc, #192]	; (800332c <TIM_Base_SetConfig+0xec>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d003      	beq.n	8003278 <TIM_Base_SetConfig+0x38>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a2f      	ldr	r2, [pc, #188]	; (8003330 <TIM_Base_SetConfig+0xf0>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d108      	bne.n	800328a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800327e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	4313      	orrs	r3, r2
 8003288:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a25      	ldr	r2, [pc, #148]	; (8003324 <TIM_Base_SetConfig+0xe4>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d01b      	beq.n	80032ca <TIM_Base_SetConfig+0x8a>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003298:	d017      	beq.n	80032ca <TIM_Base_SetConfig+0x8a>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a22      	ldr	r2, [pc, #136]	; (8003328 <TIM_Base_SetConfig+0xe8>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d013      	beq.n	80032ca <TIM_Base_SetConfig+0x8a>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a21      	ldr	r2, [pc, #132]	; (800332c <TIM_Base_SetConfig+0xec>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d00f      	beq.n	80032ca <TIM_Base_SetConfig+0x8a>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	4a20      	ldr	r2, [pc, #128]	; (8003330 <TIM_Base_SetConfig+0xf0>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d00b      	beq.n	80032ca <TIM_Base_SetConfig+0x8a>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	4a1f      	ldr	r2, [pc, #124]	; (8003334 <TIM_Base_SetConfig+0xf4>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d007      	beq.n	80032ca <TIM_Base_SetConfig+0x8a>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	4a1e      	ldr	r2, [pc, #120]	; (8003338 <TIM_Base_SetConfig+0xf8>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d003      	beq.n	80032ca <TIM_Base_SetConfig+0x8a>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a1d      	ldr	r2, [pc, #116]	; (800333c <TIM_Base_SetConfig+0xfc>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d108      	bne.n	80032dc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	4313      	orrs	r3, r2
 80032da:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	4313      	orrs	r3, r2
 80032e8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	689a      	ldr	r2, [r3, #8]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a08      	ldr	r2, [pc, #32]	; (8003324 <TIM_Base_SetConfig+0xe4>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d103      	bne.n	8003310 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	691a      	ldr	r2, [r3, #16]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2201      	movs	r2, #1
 8003314:	615a      	str	r2, [r3, #20]
}
 8003316:	bf00      	nop
 8003318:	3714      	adds	r7, #20
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	40010000 	.word	0x40010000
 8003328:	40000400 	.word	0x40000400
 800332c:	40000800 	.word	0x40000800
 8003330:	40000c00 	.word	0x40000c00
 8003334:	40014000 	.word	0x40014000
 8003338:	40014400 	.word	0x40014400
 800333c:	40014800 	.word	0x40014800

08003340 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003348:	bf00      	nop
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d101      	bne.n	800337a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e03f      	b.n	80033fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d106      	bne.n	8003394 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f7fe fda2 	bl	8001ed8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2224      	movs	r2, #36	; 0x24
 8003398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68da      	ldr	r2, [r3, #12]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 f929 	bl	8003604 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	691a      	ldr	r2, [r3, #16]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	695a      	ldr	r2, [r3, #20]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68da      	ldr	r2, [r3, #12]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80033e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2220      	movs	r2, #32
 80033ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2220      	movs	r2, #32
 80033f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b08a      	sub	sp, #40	; 0x28
 8003406:	af02      	add	r7, sp, #8
 8003408:	60f8      	str	r0, [r7, #12]
 800340a:	60b9      	str	r1, [r7, #8]
 800340c:	603b      	str	r3, [r7, #0]
 800340e:	4613      	mov	r3, r2
 8003410:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003412:	2300      	movs	r3, #0
 8003414:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b20      	cmp	r3, #32
 8003420:	d17c      	bne.n	800351c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d002      	beq.n	800342e <HAL_UART_Transmit+0x2c>
 8003428:	88fb      	ldrh	r3, [r7, #6]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d101      	bne.n	8003432 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e075      	b.n	800351e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003438:	2b01      	cmp	r3, #1
 800343a:	d101      	bne.n	8003440 <HAL_UART_Transmit+0x3e>
 800343c:	2302      	movs	r3, #2
 800343e:	e06e      	b.n	800351e <HAL_UART_Transmit+0x11c>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2200      	movs	r2, #0
 800344c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2221      	movs	r2, #33	; 0x21
 8003452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003456:	f7fe fde7 	bl	8002028 <HAL_GetTick>
 800345a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	88fa      	ldrh	r2, [r7, #6]
 8003460:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	88fa      	ldrh	r2, [r7, #6]
 8003466:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003470:	d108      	bne.n	8003484 <HAL_UART_Transmit+0x82>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	691b      	ldr	r3, [r3, #16]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d104      	bne.n	8003484 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800347a:	2300      	movs	r3, #0
 800347c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	61bb      	str	r3, [r7, #24]
 8003482:	e003      	b.n	800348c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003488:	2300      	movs	r3, #0
 800348a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003494:	e02a      	b.n	80034ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	9300      	str	r3, [sp, #0]
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	2200      	movs	r2, #0
 800349e:	2180      	movs	r1, #128	; 0x80
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f000 f840 	bl	8003526 <UART_WaitOnFlagUntilTimeout>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d001      	beq.n	80034b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	e036      	b.n	800351e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80034b0:	69fb      	ldr	r3, [r7, #28]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d10b      	bne.n	80034ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	881b      	ldrh	r3, [r3, #0]
 80034ba:	461a      	mov	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	3302      	adds	r3, #2
 80034ca:	61bb      	str	r3, [r7, #24]
 80034cc:	e007      	b.n	80034de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	781a      	ldrb	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	3301      	adds	r3, #1
 80034dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	3b01      	subs	r3, #1
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1cf      	bne.n	8003496 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	2200      	movs	r2, #0
 80034fe:	2140      	movs	r1, #64	; 0x40
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f000 f810 	bl	8003526 <UART_WaitOnFlagUntilTimeout>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e006      	b.n	800351e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2220      	movs	r2, #32
 8003514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003518:	2300      	movs	r3, #0
 800351a:	e000      	b.n	800351e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800351c:	2302      	movs	r3, #2
  }
}
 800351e:	4618      	mov	r0, r3
 8003520:	3720      	adds	r7, #32
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b090      	sub	sp, #64	; 0x40
 800352a:	af00      	add	r7, sp, #0
 800352c:	60f8      	str	r0, [r7, #12]
 800352e:	60b9      	str	r1, [r7, #8]
 8003530:	603b      	str	r3, [r7, #0]
 8003532:	4613      	mov	r3, r2
 8003534:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003536:	e050      	b.n	80035da <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003538:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800353a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800353e:	d04c      	beq.n	80035da <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003540:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003542:	2b00      	cmp	r3, #0
 8003544:	d007      	beq.n	8003556 <UART_WaitOnFlagUntilTimeout+0x30>
 8003546:	f7fe fd6f 	bl	8002028 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003552:	429a      	cmp	r2, r3
 8003554:	d241      	bcs.n	80035da <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	330c      	adds	r3, #12
 800355c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800355e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003560:	e853 3f00 	ldrex	r3, [r3]
 8003564:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003568:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800356c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	330c      	adds	r3, #12
 8003574:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003576:	637a      	str	r2, [r7, #52]	; 0x34
 8003578:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800357a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800357c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800357e:	e841 2300 	strex	r3, r2, [r1]
 8003582:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003586:	2b00      	cmp	r3, #0
 8003588:	d1e5      	bne.n	8003556 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	3314      	adds	r3, #20
 8003590:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	e853 3f00 	ldrex	r3, [r3]
 8003598:	613b      	str	r3, [r7, #16]
   return(result);
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	f023 0301 	bic.w	r3, r3, #1
 80035a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	3314      	adds	r3, #20
 80035a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80035aa:	623a      	str	r2, [r7, #32]
 80035ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ae:	69f9      	ldr	r1, [r7, #28]
 80035b0:	6a3a      	ldr	r2, [r7, #32]
 80035b2:	e841 2300 	strex	r3, r2, [r1]
 80035b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1e5      	bne.n	800358a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2220      	movs	r2, #32
 80035c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2220      	movs	r2, #32
 80035ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80035d6:	2303      	movs	r3, #3
 80035d8:	e00f      	b.n	80035fa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	4013      	ands	r3, r2
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	bf0c      	ite	eq
 80035ea:	2301      	moveq	r3, #1
 80035ec:	2300      	movne	r3, #0
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	461a      	mov	r2, r3
 80035f2:	79fb      	ldrb	r3, [r7, #7]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d09f      	beq.n	8003538 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035f8:	2300      	movs	r3, #0
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3740      	adds	r7, #64	; 0x40
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
	...

08003604 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003604:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003608:	b0c0      	sub	sp, #256	; 0x100
 800360a:	af00      	add	r7, sp, #0
 800360c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800361c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003620:	68d9      	ldr	r1, [r3, #12]
 8003622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	ea40 0301 	orr.w	r3, r0, r1
 800362c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800362e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003632:	689a      	ldr	r2, [r3, #8]
 8003634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	431a      	orrs	r2, r3
 800363c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	431a      	orrs	r2, r3
 8003644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003648:	69db      	ldr	r3, [r3, #28]
 800364a:	4313      	orrs	r3, r2
 800364c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800365c:	f021 010c 	bic.w	r1, r1, #12
 8003660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800366a:	430b      	orrs	r3, r1
 800366c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800366e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800367a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800367e:	6999      	ldr	r1, [r3, #24]
 8003680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	ea40 0301 	orr.w	r3, r0, r1
 800368a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800368c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	4b8f      	ldr	r3, [pc, #572]	; (80038d0 <UART_SetConfig+0x2cc>)
 8003694:	429a      	cmp	r2, r3
 8003696:	d005      	beq.n	80036a4 <UART_SetConfig+0xa0>
 8003698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	4b8d      	ldr	r3, [pc, #564]	; (80038d4 <UART_SetConfig+0x2d0>)
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d104      	bne.n	80036ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80036a4:	f7ff fb9a 	bl	8002ddc <HAL_RCC_GetPCLK2Freq>
 80036a8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80036ac:	e003      	b.n	80036b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80036ae:	f7ff fb81 	bl	8002db4 <HAL_RCC_GetPCLK1Freq>
 80036b2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ba:	69db      	ldr	r3, [r3, #28]
 80036bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036c0:	f040 810c 	bne.w	80038dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80036c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036c8:	2200      	movs	r2, #0
 80036ca:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80036ce:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80036d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80036d6:	4622      	mov	r2, r4
 80036d8:	462b      	mov	r3, r5
 80036da:	1891      	adds	r1, r2, r2
 80036dc:	65b9      	str	r1, [r7, #88]	; 0x58
 80036de:	415b      	adcs	r3, r3
 80036e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80036e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80036e6:	4621      	mov	r1, r4
 80036e8:	eb12 0801 	adds.w	r8, r2, r1
 80036ec:	4629      	mov	r1, r5
 80036ee:	eb43 0901 	adc.w	r9, r3, r1
 80036f2:	f04f 0200 	mov.w	r2, #0
 80036f6:	f04f 0300 	mov.w	r3, #0
 80036fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80036fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003702:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003706:	4690      	mov	r8, r2
 8003708:	4699      	mov	r9, r3
 800370a:	4623      	mov	r3, r4
 800370c:	eb18 0303 	adds.w	r3, r8, r3
 8003710:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003714:	462b      	mov	r3, r5
 8003716:	eb49 0303 	adc.w	r3, r9, r3
 800371a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800371e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800372a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800372e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003732:	460b      	mov	r3, r1
 8003734:	18db      	adds	r3, r3, r3
 8003736:	653b      	str	r3, [r7, #80]	; 0x50
 8003738:	4613      	mov	r3, r2
 800373a:	eb42 0303 	adc.w	r3, r2, r3
 800373e:	657b      	str	r3, [r7, #84]	; 0x54
 8003740:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003744:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003748:	f7fd fa36 	bl	8000bb8 <__aeabi_uldivmod>
 800374c:	4602      	mov	r2, r0
 800374e:	460b      	mov	r3, r1
 8003750:	4b61      	ldr	r3, [pc, #388]	; (80038d8 <UART_SetConfig+0x2d4>)
 8003752:	fba3 2302 	umull	r2, r3, r3, r2
 8003756:	095b      	lsrs	r3, r3, #5
 8003758:	011c      	lsls	r4, r3, #4
 800375a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800375e:	2200      	movs	r2, #0
 8003760:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003764:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003768:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800376c:	4642      	mov	r2, r8
 800376e:	464b      	mov	r3, r9
 8003770:	1891      	adds	r1, r2, r2
 8003772:	64b9      	str	r1, [r7, #72]	; 0x48
 8003774:	415b      	adcs	r3, r3
 8003776:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003778:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800377c:	4641      	mov	r1, r8
 800377e:	eb12 0a01 	adds.w	sl, r2, r1
 8003782:	4649      	mov	r1, r9
 8003784:	eb43 0b01 	adc.w	fp, r3, r1
 8003788:	f04f 0200 	mov.w	r2, #0
 800378c:	f04f 0300 	mov.w	r3, #0
 8003790:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003794:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003798:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800379c:	4692      	mov	sl, r2
 800379e:	469b      	mov	fp, r3
 80037a0:	4643      	mov	r3, r8
 80037a2:	eb1a 0303 	adds.w	r3, sl, r3
 80037a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80037aa:	464b      	mov	r3, r9
 80037ac:	eb4b 0303 	adc.w	r3, fp, r3
 80037b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80037b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80037c0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80037c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80037c8:	460b      	mov	r3, r1
 80037ca:	18db      	adds	r3, r3, r3
 80037cc:	643b      	str	r3, [r7, #64]	; 0x40
 80037ce:	4613      	mov	r3, r2
 80037d0:	eb42 0303 	adc.w	r3, r2, r3
 80037d4:	647b      	str	r3, [r7, #68]	; 0x44
 80037d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80037da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80037de:	f7fd f9eb 	bl	8000bb8 <__aeabi_uldivmod>
 80037e2:	4602      	mov	r2, r0
 80037e4:	460b      	mov	r3, r1
 80037e6:	4611      	mov	r1, r2
 80037e8:	4b3b      	ldr	r3, [pc, #236]	; (80038d8 <UART_SetConfig+0x2d4>)
 80037ea:	fba3 2301 	umull	r2, r3, r3, r1
 80037ee:	095b      	lsrs	r3, r3, #5
 80037f0:	2264      	movs	r2, #100	; 0x64
 80037f2:	fb02 f303 	mul.w	r3, r2, r3
 80037f6:	1acb      	subs	r3, r1, r3
 80037f8:	00db      	lsls	r3, r3, #3
 80037fa:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80037fe:	4b36      	ldr	r3, [pc, #216]	; (80038d8 <UART_SetConfig+0x2d4>)
 8003800:	fba3 2302 	umull	r2, r3, r3, r2
 8003804:	095b      	lsrs	r3, r3, #5
 8003806:	005b      	lsls	r3, r3, #1
 8003808:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800380c:	441c      	add	r4, r3
 800380e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003812:	2200      	movs	r2, #0
 8003814:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003818:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800381c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003820:	4642      	mov	r2, r8
 8003822:	464b      	mov	r3, r9
 8003824:	1891      	adds	r1, r2, r2
 8003826:	63b9      	str	r1, [r7, #56]	; 0x38
 8003828:	415b      	adcs	r3, r3
 800382a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800382c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003830:	4641      	mov	r1, r8
 8003832:	1851      	adds	r1, r2, r1
 8003834:	6339      	str	r1, [r7, #48]	; 0x30
 8003836:	4649      	mov	r1, r9
 8003838:	414b      	adcs	r3, r1
 800383a:	637b      	str	r3, [r7, #52]	; 0x34
 800383c:	f04f 0200 	mov.w	r2, #0
 8003840:	f04f 0300 	mov.w	r3, #0
 8003844:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003848:	4659      	mov	r1, fp
 800384a:	00cb      	lsls	r3, r1, #3
 800384c:	4651      	mov	r1, sl
 800384e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003852:	4651      	mov	r1, sl
 8003854:	00ca      	lsls	r2, r1, #3
 8003856:	4610      	mov	r0, r2
 8003858:	4619      	mov	r1, r3
 800385a:	4603      	mov	r3, r0
 800385c:	4642      	mov	r2, r8
 800385e:	189b      	adds	r3, r3, r2
 8003860:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003864:	464b      	mov	r3, r9
 8003866:	460a      	mov	r2, r1
 8003868:	eb42 0303 	adc.w	r3, r2, r3
 800386c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800387c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003880:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003884:	460b      	mov	r3, r1
 8003886:	18db      	adds	r3, r3, r3
 8003888:	62bb      	str	r3, [r7, #40]	; 0x28
 800388a:	4613      	mov	r3, r2
 800388c:	eb42 0303 	adc.w	r3, r2, r3
 8003890:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003892:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003896:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800389a:	f7fd f98d 	bl	8000bb8 <__aeabi_uldivmod>
 800389e:	4602      	mov	r2, r0
 80038a0:	460b      	mov	r3, r1
 80038a2:	4b0d      	ldr	r3, [pc, #52]	; (80038d8 <UART_SetConfig+0x2d4>)
 80038a4:	fba3 1302 	umull	r1, r3, r3, r2
 80038a8:	095b      	lsrs	r3, r3, #5
 80038aa:	2164      	movs	r1, #100	; 0x64
 80038ac:	fb01 f303 	mul.w	r3, r1, r3
 80038b0:	1ad3      	subs	r3, r2, r3
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	3332      	adds	r3, #50	; 0x32
 80038b6:	4a08      	ldr	r2, [pc, #32]	; (80038d8 <UART_SetConfig+0x2d4>)
 80038b8:	fba2 2303 	umull	r2, r3, r2, r3
 80038bc:	095b      	lsrs	r3, r3, #5
 80038be:	f003 0207 	and.w	r2, r3, #7
 80038c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4422      	add	r2, r4
 80038ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80038cc:	e106      	b.n	8003adc <UART_SetConfig+0x4d8>
 80038ce:	bf00      	nop
 80038d0:	40011000 	.word	0x40011000
 80038d4:	40011400 	.word	0x40011400
 80038d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038e0:	2200      	movs	r2, #0
 80038e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80038e6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80038ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80038ee:	4642      	mov	r2, r8
 80038f0:	464b      	mov	r3, r9
 80038f2:	1891      	adds	r1, r2, r2
 80038f4:	6239      	str	r1, [r7, #32]
 80038f6:	415b      	adcs	r3, r3
 80038f8:	627b      	str	r3, [r7, #36]	; 0x24
 80038fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80038fe:	4641      	mov	r1, r8
 8003900:	1854      	adds	r4, r2, r1
 8003902:	4649      	mov	r1, r9
 8003904:	eb43 0501 	adc.w	r5, r3, r1
 8003908:	f04f 0200 	mov.w	r2, #0
 800390c:	f04f 0300 	mov.w	r3, #0
 8003910:	00eb      	lsls	r3, r5, #3
 8003912:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003916:	00e2      	lsls	r2, r4, #3
 8003918:	4614      	mov	r4, r2
 800391a:	461d      	mov	r5, r3
 800391c:	4643      	mov	r3, r8
 800391e:	18e3      	adds	r3, r4, r3
 8003920:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003924:	464b      	mov	r3, r9
 8003926:	eb45 0303 	adc.w	r3, r5, r3
 800392a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800392e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800393a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800393e:	f04f 0200 	mov.w	r2, #0
 8003942:	f04f 0300 	mov.w	r3, #0
 8003946:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800394a:	4629      	mov	r1, r5
 800394c:	008b      	lsls	r3, r1, #2
 800394e:	4621      	mov	r1, r4
 8003950:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003954:	4621      	mov	r1, r4
 8003956:	008a      	lsls	r2, r1, #2
 8003958:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800395c:	f7fd f92c 	bl	8000bb8 <__aeabi_uldivmod>
 8003960:	4602      	mov	r2, r0
 8003962:	460b      	mov	r3, r1
 8003964:	4b60      	ldr	r3, [pc, #384]	; (8003ae8 <UART_SetConfig+0x4e4>)
 8003966:	fba3 2302 	umull	r2, r3, r3, r2
 800396a:	095b      	lsrs	r3, r3, #5
 800396c:	011c      	lsls	r4, r3, #4
 800396e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003972:	2200      	movs	r2, #0
 8003974:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003978:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800397c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003980:	4642      	mov	r2, r8
 8003982:	464b      	mov	r3, r9
 8003984:	1891      	adds	r1, r2, r2
 8003986:	61b9      	str	r1, [r7, #24]
 8003988:	415b      	adcs	r3, r3
 800398a:	61fb      	str	r3, [r7, #28]
 800398c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003990:	4641      	mov	r1, r8
 8003992:	1851      	adds	r1, r2, r1
 8003994:	6139      	str	r1, [r7, #16]
 8003996:	4649      	mov	r1, r9
 8003998:	414b      	adcs	r3, r1
 800399a:	617b      	str	r3, [r7, #20]
 800399c:	f04f 0200 	mov.w	r2, #0
 80039a0:	f04f 0300 	mov.w	r3, #0
 80039a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039a8:	4659      	mov	r1, fp
 80039aa:	00cb      	lsls	r3, r1, #3
 80039ac:	4651      	mov	r1, sl
 80039ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039b2:	4651      	mov	r1, sl
 80039b4:	00ca      	lsls	r2, r1, #3
 80039b6:	4610      	mov	r0, r2
 80039b8:	4619      	mov	r1, r3
 80039ba:	4603      	mov	r3, r0
 80039bc:	4642      	mov	r2, r8
 80039be:	189b      	adds	r3, r3, r2
 80039c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80039c4:	464b      	mov	r3, r9
 80039c6:	460a      	mov	r2, r1
 80039c8:	eb42 0303 	adc.w	r3, r2, r3
 80039cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80039d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80039da:	67fa      	str	r2, [r7, #124]	; 0x7c
 80039dc:	f04f 0200 	mov.w	r2, #0
 80039e0:	f04f 0300 	mov.w	r3, #0
 80039e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80039e8:	4649      	mov	r1, r9
 80039ea:	008b      	lsls	r3, r1, #2
 80039ec:	4641      	mov	r1, r8
 80039ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039f2:	4641      	mov	r1, r8
 80039f4:	008a      	lsls	r2, r1, #2
 80039f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80039fa:	f7fd f8dd 	bl	8000bb8 <__aeabi_uldivmod>
 80039fe:	4602      	mov	r2, r0
 8003a00:	460b      	mov	r3, r1
 8003a02:	4611      	mov	r1, r2
 8003a04:	4b38      	ldr	r3, [pc, #224]	; (8003ae8 <UART_SetConfig+0x4e4>)
 8003a06:	fba3 2301 	umull	r2, r3, r3, r1
 8003a0a:	095b      	lsrs	r3, r3, #5
 8003a0c:	2264      	movs	r2, #100	; 0x64
 8003a0e:	fb02 f303 	mul.w	r3, r2, r3
 8003a12:	1acb      	subs	r3, r1, r3
 8003a14:	011b      	lsls	r3, r3, #4
 8003a16:	3332      	adds	r3, #50	; 0x32
 8003a18:	4a33      	ldr	r2, [pc, #204]	; (8003ae8 <UART_SetConfig+0x4e4>)
 8003a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003a1e:	095b      	lsrs	r3, r3, #5
 8003a20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a24:	441c      	add	r4, r3
 8003a26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	673b      	str	r3, [r7, #112]	; 0x70
 8003a2e:	677a      	str	r2, [r7, #116]	; 0x74
 8003a30:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003a34:	4642      	mov	r2, r8
 8003a36:	464b      	mov	r3, r9
 8003a38:	1891      	adds	r1, r2, r2
 8003a3a:	60b9      	str	r1, [r7, #8]
 8003a3c:	415b      	adcs	r3, r3
 8003a3e:	60fb      	str	r3, [r7, #12]
 8003a40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003a44:	4641      	mov	r1, r8
 8003a46:	1851      	adds	r1, r2, r1
 8003a48:	6039      	str	r1, [r7, #0]
 8003a4a:	4649      	mov	r1, r9
 8003a4c:	414b      	adcs	r3, r1
 8003a4e:	607b      	str	r3, [r7, #4]
 8003a50:	f04f 0200 	mov.w	r2, #0
 8003a54:	f04f 0300 	mov.w	r3, #0
 8003a58:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003a5c:	4659      	mov	r1, fp
 8003a5e:	00cb      	lsls	r3, r1, #3
 8003a60:	4651      	mov	r1, sl
 8003a62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a66:	4651      	mov	r1, sl
 8003a68:	00ca      	lsls	r2, r1, #3
 8003a6a:	4610      	mov	r0, r2
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	4603      	mov	r3, r0
 8003a70:	4642      	mov	r2, r8
 8003a72:	189b      	adds	r3, r3, r2
 8003a74:	66bb      	str	r3, [r7, #104]	; 0x68
 8003a76:	464b      	mov	r3, r9
 8003a78:	460a      	mov	r2, r1
 8003a7a:	eb42 0303 	adc.w	r3, r2, r3
 8003a7e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	663b      	str	r3, [r7, #96]	; 0x60
 8003a8a:	667a      	str	r2, [r7, #100]	; 0x64
 8003a8c:	f04f 0200 	mov.w	r2, #0
 8003a90:	f04f 0300 	mov.w	r3, #0
 8003a94:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003a98:	4649      	mov	r1, r9
 8003a9a:	008b      	lsls	r3, r1, #2
 8003a9c:	4641      	mov	r1, r8
 8003a9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003aa2:	4641      	mov	r1, r8
 8003aa4:	008a      	lsls	r2, r1, #2
 8003aa6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003aaa:	f7fd f885 	bl	8000bb8 <__aeabi_uldivmod>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	4b0d      	ldr	r3, [pc, #52]	; (8003ae8 <UART_SetConfig+0x4e4>)
 8003ab4:	fba3 1302 	umull	r1, r3, r3, r2
 8003ab8:	095b      	lsrs	r3, r3, #5
 8003aba:	2164      	movs	r1, #100	; 0x64
 8003abc:	fb01 f303 	mul.w	r3, r1, r3
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	011b      	lsls	r3, r3, #4
 8003ac4:	3332      	adds	r3, #50	; 0x32
 8003ac6:	4a08      	ldr	r2, [pc, #32]	; (8003ae8 <UART_SetConfig+0x4e4>)
 8003ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8003acc:	095b      	lsrs	r3, r3, #5
 8003ace:	f003 020f 	and.w	r2, r3, #15
 8003ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4422      	add	r2, r4
 8003ada:	609a      	str	r2, [r3, #8]
}
 8003adc:	bf00      	nop
 8003ade:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ae8:	51eb851f 	.word	0x51eb851f

08003aec <__NVIC_SetPriority>:
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	4603      	mov	r3, r0
 8003af4:	6039      	str	r1, [r7, #0]
 8003af6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	db0a      	blt.n	8003b16 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	b2da      	uxtb	r2, r3
 8003b04:	490c      	ldr	r1, [pc, #48]	; (8003b38 <__NVIC_SetPriority+0x4c>)
 8003b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b0a:	0112      	lsls	r2, r2, #4
 8003b0c:	b2d2      	uxtb	r2, r2
 8003b0e:	440b      	add	r3, r1
 8003b10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003b14:	e00a      	b.n	8003b2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	b2da      	uxtb	r2, r3
 8003b1a:	4908      	ldr	r1, [pc, #32]	; (8003b3c <__NVIC_SetPriority+0x50>)
 8003b1c:	79fb      	ldrb	r3, [r7, #7]
 8003b1e:	f003 030f 	and.w	r3, r3, #15
 8003b22:	3b04      	subs	r3, #4
 8003b24:	0112      	lsls	r2, r2, #4
 8003b26:	b2d2      	uxtb	r2, r2
 8003b28:	440b      	add	r3, r1
 8003b2a:	761a      	strb	r2, [r3, #24]
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr
 8003b38:	e000e100 	.word	0xe000e100
 8003b3c:	e000ed00 	.word	0xe000ed00

08003b40 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003b44:	4b05      	ldr	r3, [pc, #20]	; (8003b5c <SysTick_Handler+0x1c>)
 8003b46:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003b48:	f002 f9fa 	bl	8005f40 <xTaskGetSchedulerState>
 8003b4c:	4603      	mov	r3, r0
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d001      	beq.n	8003b56 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003b52:	f003 f9c1 	bl	8006ed8 <xPortSysTickHandler>
  }
}
 8003b56:	bf00      	nop
 8003b58:	bd80      	pop	{r7, pc}
 8003b5a:	bf00      	nop
 8003b5c:	e000e010 	.word	0xe000e010

08003b60 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003b60:	b580      	push	{r7, lr}
 8003b62:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003b64:	2100      	movs	r1, #0
 8003b66:	f06f 0004 	mvn.w	r0, #4
 8003b6a:	f7ff ffbf 	bl	8003aec <__NVIC_SetPriority>
#endif
}
 8003b6e:	bf00      	nop
 8003b70:	bd80      	pop	{r7, pc}
	...

08003b74 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003b74:	b480      	push	{r7}
 8003b76:	b083      	sub	sp, #12
 8003b78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b7a:	f3ef 8305 	mrs	r3, IPSR
 8003b7e:	603b      	str	r3, [r7, #0]
  return(result);
 8003b80:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d003      	beq.n	8003b8e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003b86:	f06f 0305 	mvn.w	r3, #5
 8003b8a:	607b      	str	r3, [r7, #4]
 8003b8c:	e00c      	b.n	8003ba8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003b8e:	4b0a      	ldr	r3, [pc, #40]	; (8003bb8 <osKernelInitialize+0x44>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d105      	bne.n	8003ba2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003b96:	4b08      	ldr	r3, [pc, #32]	; (8003bb8 <osKernelInitialize+0x44>)
 8003b98:	2201      	movs	r2, #1
 8003b9a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	607b      	str	r3, [r7, #4]
 8003ba0:	e002      	b.n	8003ba8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ba6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003ba8:	687b      	ldr	r3, [r7, #4]
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	370c      	adds	r7, #12
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	20000478 	.word	0x20000478

08003bbc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003bc2:	f3ef 8305 	mrs	r3, IPSR
 8003bc6:	603b      	str	r3, [r7, #0]
  return(result);
 8003bc8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d003      	beq.n	8003bd6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003bce:	f06f 0305 	mvn.w	r3, #5
 8003bd2:	607b      	str	r3, [r7, #4]
 8003bd4:	e010      	b.n	8003bf8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003bd6:	4b0b      	ldr	r3, [pc, #44]	; (8003c04 <osKernelStart+0x48>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d109      	bne.n	8003bf2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003bde:	f7ff ffbf 	bl	8003b60 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003be2:	4b08      	ldr	r3, [pc, #32]	; (8003c04 <osKernelStart+0x48>)
 8003be4:	2202      	movs	r2, #2
 8003be6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      //vTaskStartScheduler();
      vSchedulerStart();
 8003be8:	f7fd ffa2 	bl	8001b30 <vSchedulerStart>
      stat = osOK;
 8003bec:	2300      	movs	r3, #0
 8003bee:	607b      	str	r3, [r7, #4]
 8003bf0:	e002      	b.n	8003bf8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8003bf6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003bf8:	687b      	ldr	r3, [r7, #4]
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3708      	adds	r7, #8
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	20000478 	.word	0x20000478

08003c08 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b088      	sub	sp, #32
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8003c10:	2300      	movs	r3, #0
 8003c12:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c14:	f3ef 8305 	mrs	r3, IPSR
 8003c18:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c1a:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d174      	bne.n	8003d0a <osMutexNew+0x102>
    if (attr != NULL) {
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d003      	beq.n	8003c2e <osMutexNew+0x26>
      type = attr->attr_bits;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	61bb      	str	r3, [r7, #24]
 8003c2c:	e001      	b.n	8003c32 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d002      	beq.n	8003c42 <osMutexNew+0x3a>
      rmtx = 1U;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	617b      	str	r3, [r7, #20]
 8003c40:	e001      	b.n	8003c46 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8003c42:	2300      	movs	r3, #0
 8003c44:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	f003 0308 	and.w	r3, r3, #8
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d15c      	bne.n	8003d0a <osMutexNew+0x102>
      mem = -1;
 8003c50:	f04f 33ff 	mov.w	r3, #4294967295
 8003c54:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d015      	beq.n	8003c88 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d006      	beq.n	8003c72 <osMutexNew+0x6a>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	2b4f      	cmp	r3, #79	; 0x4f
 8003c6a:	d902      	bls.n	8003c72 <osMutexNew+0x6a>
          mem = 1;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	613b      	str	r3, [r7, #16]
 8003c70:	e00c      	b.n	8003c8c <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d108      	bne.n	8003c8c <osMutexNew+0x84>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d104      	bne.n	8003c8c <osMutexNew+0x84>
            mem = 0;
 8003c82:	2300      	movs	r3, #0
 8003c84:	613b      	str	r3, [r7, #16]
 8003c86:	e001      	b.n	8003c8c <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d112      	bne.n	8003cb8 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d007      	beq.n	8003ca8 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	689b      	ldr	r3, [r3, #8]
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	2004      	movs	r0, #4
 8003ca0:	f000 fb17 	bl	80042d2 <xQueueCreateMutexStatic>
 8003ca4:	61f8      	str	r0, [r7, #28]
 8003ca6:	e016      	b.n	8003cd6 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	4619      	mov	r1, r3
 8003cae:	2001      	movs	r0, #1
 8003cb0:	f000 fb0f 	bl	80042d2 <xQueueCreateMutexStatic>
 8003cb4:	61f8      	str	r0, [r7, #28]
 8003cb6:	e00e      	b.n	8003cd6 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d10b      	bne.n	8003cd6 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d004      	beq.n	8003cce <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8003cc4:	2004      	movs	r0, #4
 8003cc6:	f000 faec 	bl	80042a2 <xQueueCreateMutex>
 8003cca:	61f8      	str	r0, [r7, #28]
 8003ccc:	e003      	b.n	8003cd6 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8003cce:	2001      	movs	r0, #1
 8003cd0:	f000 fae7 	bl	80042a2 <xQueueCreateMutex>
 8003cd4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00c      	beq.n	8003cf6 <osMutexNew+0xee>
        if (attr != NULL) {
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d003      	beq.n	8003cea <osMutexNew+0xe2>
          name = attr->name;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	60fb      	str	r3, [r7, #12]
 8003ce8:	e001      	b.n	8003cee <osMutexNew+0xe6>
        } else {
          name = NULL;
 8003cea:	2300      	movs	r3, #0
 8003cec:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8003cee:	68f9      	ldr	r1, [r7, #12]
 8003cf0:	69f8      	ldr	r0, [r7, #28]
 8003cf2:	f001 f821 	bl	8004d38 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d006      	beq.n	8003d0a <osMutexNew+0x102>
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d003      	beq.n	8003d0a <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	f043 0301 	orr.w	r3, r3, #1
 8003d08:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8003d0a:	69fb      	ldr	r3, [r7, #28]
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	3720      	adds	r7, #32
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	f023 0301 	bic.w	r3, r3, #1
 8003d24:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d32:	f3ef 8305 	mrs	r3, IPSR
 8003d36:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d38:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d003      	beq.n	8003d46 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8003d3e:	f06f 0305 	mvn.w	r3, #5
 8003d42:	617b      	str	r3, [r7, #20]
 8003d44:	e02c      	b.n	8003da0 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d103      	bne.n	8003d54 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8003d4c:	f06f 0303 	mvn.w	r3, #3
 8003d50:	617b      	str	r3, [r7, #20]
 8003d52:	e025      	b.n	8003da0 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d011      	beq.n	8003d7e <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8003d5a:	6839      	ldr	r1, [r7, #0]
 8003d5c:	6938      	ldr	r0, [r7, #16]
 8003d5e:	f000 fb07 	bl	8004370 <xQueueTakeMutexRecursive>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d01b      	beq.n	8003da0 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d003      	beq.n	8003d76 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8003d6e:	f06f 0301 	mvn.w	r3, #1
 8003d72:	617b      	str	r3, [r7, #20]
 8003d74:	e014      	b.n	8003da0 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8003d76:	f06f 0302 	mvn.w	r3, #2
 8003d7a:	617b      	str	r3, [r7, #20]
 8003d7c:	e010      	b.n	8003da0 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8003d7e:	6839      	ldr	r1, [r7, #0]
 8003d80:	6938      	ldr	r0, [r7, #16]
 8003d82:	f000 fda5 	bl	80048d0 <xQueueSemaphoreTake>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d009      	beq.n	8003da0 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d003      	beq.n	8003d9a <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8003d92:	f06f 0301 	mvn.w	r3, #1
 8003d96:	617b      	str	r3, [r7, #20]
 8003d98:	e002      	b.n	8003da0 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8003d9a:	f06f 0302 	mvn.w	r3, #2
 8003d9e:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8003da0:	697b      	ldr	r3, [r7, #20]
}
 8003da2:	4618      	mov	r0, r3
 8003da4:	3718      	adds	r7, #24
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b086      	sub	sp, #24
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f023 0301 	bic.w	r3, r3, #1
 8003db8:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003dc6:	f3ef 8305 	mrs	r3, IPSR
 8003dca:	60bb      	str	r3, [r7, #8]
  return(result);
 8003dcc:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d003      	beq.n	8003dda <osMutexRelease+0x30>
    stat = osErrorISR;
 8003dd2:	f06f 0305 	mvn.w	r3, #5
 8003dd6:	617b      	str	r3, [r7, #20]
 8003dd8:	e01f      	b.n	8003e1a <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d103      	bne.n	8003de8 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8003de0:	f06f 0303 	mvn.w	r3, #3
 8003de4:	617b      	str	r3, [r7, #20]
 8003de6:	e018      	b.n	8003e1a <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d009      	beq.n	8003e02 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8003dee:	6938      	ldr	r0, [r7, #16]
 8003df0:	f000 fa8a 	bl	8004308 <xQueueGiveMutexRecursive>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d00f      	beq.n	8003e1a <osMutexRelease+0x70>
        stat = osErrorResource;
 8003dfa:	f06f 0302 	mvn.w	r3, #2
 8003dfe:	617b      	str	r3, [r7, #20]
 8003e00:	e00b      	b.n	8003e1a <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8003e02:	2300      	movs	r3, #0
 8003e04:	2200      	movs	r2, #0
 8003e06:	2100      	movs	r1, #0
 8003e08:	6938      	ldr	r0, [r7, #16]
 8003e0a:	f000 fae7 	bl	80043dc <xQueueGenericSend>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d002      	beq.n	8003e1a <osMutexRelease+0x70>
        stat = osErrorResource;
 8003e14:	f06f 0302 	mvn.w	r3, #2
 8003e18:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8003e1a:	697b      	ldr	r3, [r7, #20]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3718      	adds	r7, #24
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003e24:	b480      	push	{r7}
 8003e26:	b085      	sub	sp, #20
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	60f8      	str	r0, [r7, #12]
 8003e2c:	60b9      	str	r1, [r7, #8]
 8003e2e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	4a07      	ldr	r2, [pc, #28]	; (8003e50 <vApplicationGetIdleTaskMemory+0x2c>)
 8003e34:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	4a06      	ldr	r2, [pc, #24]	; (8003e54 <vApplicationGetIdleTaskMemory+0x30>)
 8003e3a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2280      	movs	r2, #128	; 0x80
 8003e40:	601a      	str	r2, [r3, #0]
}
 8003e42:	bf00      	nop
 8003e44:	3714      	adds	r7, #20
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	2000047c 	.word	0x2000047c
 8003e54:	20000528 	.word	0x20000528

08003e58 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	4a07      	ldr	r2, [pc, #28]	; (8003e84 <vApplicationGetTimerTaskMemory+0x2c>)
 8003e68:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	4a06      	ldr	r2, [pc, #24]	; (8003e88 <vApplicationGetTimerTaskMemory+0x30>)
 8003e6e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e76:	601a      	str	r2, [r3, #0]
}
 8003e78:	bf00      	nop
 8003e7a:	3714      	adds	r7, #20
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr
 8003e84:	20000728 	.word	0x20000728
 8003e88:	200007d4 	.word	0x200007d4

08003e8c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f103 0208 	add.w	r2, r3, #8
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ea4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f103 0208 	add.w	r2, r3, #8
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f103 0208 	add.w	r2, r3, #8
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr

08003ecc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003eda:	bf00      	nop
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr

08003ee6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	b085      	sub	sp, #20
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
 8003eee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	68fa      	ldr	r2, [r7, #12]
 8003efa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	689a      	ldr	r2, [r3, #8]
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	683a      	ldr	r2, [r7, #0]
 8003f0a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	683a      	ldr	r2, [r7, #0]
 8003f10:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	1c5a      	adds	r2, r3, #1
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	601a      	str	r2, [r3, #0]
}
 8003f22:	bf00      	nop
 8003f24:	3714      	adds	r7, #20
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr

08003f2e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f2e:	b480      	push	{r7}
 8003f30:	b085      	sub	sp, #20
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
 8003f36:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003f3e:	68bb      	ldr	r3, [r7, #8]
 8003f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f44:	d103      	bne.n	8003f4e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	60fb      	str	r3, [r7, #12]
 8003f4c:	e00c      	b.n	8003f68 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	3308      	adds	r3, #8
 8003f52:	60fb      	str	r3, [r7, #12]
 8003f54:	e002      	b.n	8003f5c <vListInsert+0x2e>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	60fb      	str	r3, [r7, #12]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68ba      	ldr	r2, [r7, #8]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d2f6      	bcs.n	8003f56 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	685a      	ldr	r2, [r3, #4]
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	683a      	ldr	r2, [r7, #0]
 8003f76:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	687a      	ldr	r2, [r7, #4]
 8003f88:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	1c5a      	adds	r2, r3, #1
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	601a      	str	r2, [r3, #0]
}
 8003f94:	bf00      	nop
 8003f96:	3714      	adds	r7, #20
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	6892      	ldr	r2, [r2, #8]
 8003fb6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	6852      	ldr	r2, [r2, #4]
 8003fc0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	685b      	ldr	r3, [r3, #4]
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d103      	bne.n	8003fd4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	689a      	ldr	r2, [r3, #8]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	1e5a      	subs	r2, r3, #1
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3714      	adds	r7, #20
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10a      	bne.n	800401e <xQueueGenericReset+0x2a>
	__asm volatile
 8004008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800400c:	f383 8811 	msr	BASEPRI, r3
 8004010:	f3bf 8f6f 	isb	sy
 8004014:	f3bf 8f4f 	dsb	sy
 8004018:	60bb      	str	r3, [r7, #8]
}
 800401a:	bf00      	nop
 800401c:	e7fe      	b.n	800401c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800401e:	f002 fec9 	bl	8006db4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800402a:	68f9      	ldr	r1, [r7, #12]
 800402c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800402e:	fb01 f303 	mul.w	r3, r1, r3
 8004032:	441a      	add	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800404e:	3b01      	subs	r3, #1
 8004050:	68f9      	ldr	r1, [r7, #12]
 8004052:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004054:	fb01 f303 	mul.w	r3, r1, r3
 8004058:	441a      	add	r2, r3
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	22ff      	movs	r2, #255	; 0xff
 8004062:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	22ff      	movs	r2, #255	; 0xff
 800406a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d114      	bne.n	800409e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d01a      	beq.n	80040b2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	3310      	adds	r3, #16
 8004080:	4618      	mov	r0, r3
 8004082:	f001 fd37 	bl	8005af4 <xTaskRemoveFromEventList>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d012      	beq.n	80040b2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800408c:	4b0c      	ldr	r3, [pc, #48]	; (80040c0 <xQueueGenericReset+0xcc>)
 800408e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004092:	601a      	str	r2, [r3, #0]
 8004094:	f3bf 8f4f 	dsb	sy
 8004098:	f3bf 8f6f 	isb	sy
 800409c:	e009      	b.n	80040b2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	3310      	adds	r3, #16
 80040a2:	4618      	mov	r0, r3
 80040a4:	f7ff fef2 	bl	8003e8c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	3324      	adds	r3, #36	; 0x24
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7ff feed 	bl	8003e8c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80040b2:	f002 feaf 	bl	8006e14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80040b6:	2301      	movs	r3, #1
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3710      	adds	r7, #16
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	e000ed04 	.word	0xe000ed04

080040c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b08e      	sub	sp, #56	; 0x38
 80040c8:	af02      	add	r7, sp, #8
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]
 80040d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d10a      	bne.n	80040ee <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80040d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040dc:	f383 8811 	msr	BASEPRI, r3
 80040e0:	f3bf 8f6f 	isb	sy
 80040e4:	f3bf 8f4f 	dsb	sy
 80040e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80040ea:	bf00      	nop
 80040ec:	e7fe      	b.n	80040ec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d10a      	bne.n	800410a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80040f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f8:	f383 8811 	msr	BASEPRI, r3
 80040fc:	f3bf 8f6f 	isb	sy
 8004100:	f3bf 8f4f 	dsb	sy
 8004104:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004106:	bf00      	nop
 8004108:	e7fe      	b.n	8004108 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d002      	beq.n	8004116 <xQueueGenericCreateStatic+0x52>
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <xQueueGenericCreateStatic+0x56>
 8004116:	2301      	movs	r3, #1
 8004118:	e000      	b.n	800411c <xQueueGenericCreateStatic+0x58>
 800411a:	2300      	movs	r3, #0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d10a      	bne.n	8004136 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004124:	f383 8811 	msr	BASEPRI, r3
 8004128:	f3bf 8f6f 	isb	sy
 800412c:	f3bf 8f4f 	dsb	sy
 8004130:	623b      	str	r3, [r7, #32]
}
 8004132:	bf00      	nop
 8004134:	e7fe      	b.n	8004134 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d102      	bne.n	8004142 <xQueueGenericCreateStatic+0x7e>
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d101      	bne.n	8004146 <xQueueGenericCreateStatic+0x82>
 8004142:	2301      	movs	r3, #1
 8004144:	e000      	b.n	8004148 <xQueueGenericCreateStatic+0x84>
 8004146:	2300      	movs	r3, #0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d10a      	bne.n	8004162 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800414c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004150:	f383 8811 	msr	BASEPRI, r3
 8004154:	f3bf 8f6f 	isb	sy
 8004158:	f3bf 8f4f 	dsb	sy
 800415c:	61fb      	str	r3, [r7, #28]
}
 800415e:	bf00      	nop
 8004160:	e7fe      	b.n	8004160 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004162:	2350      	movs	r3, #80	; 0x50
 8004164:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	2b50      	cmp	r3, #80	; 0x50
 800416a:	d00a      	beq.n	8004182 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800416c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004170:	f383 8811 	msr	BASEPRI, r3
 8004174:	f3bf 8f6f 	isb	sy
 8004178:	f3bf 8f4f 	dsb	sy
 800417c:	61bb      	str	r3, [r7, #24]
}
 800417e:	bf00      	nop
 8004180:	e7fe      	b.n	8004180 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004182:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00d      	beq.n	80041aa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800418e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004190:	2201      	movs	r2, #1
 8004192:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004196:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800419a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800419c:	9300      	str	r3, [sp, #0]
 800419e:	4613      	mov	r3, r2
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	68b9      	ldr	r1, [r7, #8]
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f000 f83f 	bl	8004228 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80041aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80041ac:	4618      	mov	r0, r3
 80041ae:	3730      	adds	r7, #48	; 0x30
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b08a      	sub	sp, #40	; 0x28
 80041b8:	af02      	add	r7, sp, #8
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	4613      	mov	r3, r2
 80041c0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d10a      	bne.n	80041de <xQueueGenericCreate+0x2a>
	__asm volatile
 80041c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041cc:	f383 8811 	msr	BASEPRI, r3
 80041d0:	f3bf 8f6f 	isb	sy
 80041d4:	f3bf 8f4f 	dsb	sy
 80041d8:	613b      	str	r3, [r7, #16]
}
 80041da:	bf00      	nop
 80041dc:	e7fe      	b.n	80041dc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	68ba      	ldr	r2, [r7, #8]
 80041e2:	fb02 f303 	mul.w	r3, r2, r3
 80041e6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	3350      	adds	r3, #80	; 0x50
 80041ec:	4618      	mov	r0, r3
 80041ee:	f002 ff03 	bl	8006ff8 <pvPortMalloc>
 80041f2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d011      	beq.n	800421e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	3350      	adds	r3, #80	; 0x50
 8004202:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800420c:	79fa      	ldrb	r2, [r7, #7]
 800420e:	69bb      	ldr	r3, [r7, #24]
 8004210:	9300      	str	r3, [sp, #0]
 8004212:	4613      	mov	r3, r2
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	68b9      	ldr	r1, [r7, #8]
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f000 f805 	bl	8004228 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800421e:	69bb      	ldr	r3, [r7, #24]
	}
 8004220:	4618      	mov	r0, r3
 8004222:	3720      	adds	r7, #32
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
 8004234:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d103      	bne.n	8004244 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800423c:	69bb      	ldr	r3, [r7, #24]
 800423e:	69ba      	ldr	r2, [r7, #24]
 8004240:	601a      	str	r2, [r3, #0]
 8004242:	e002      	b.n	800424a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800424a:	69bb      	ldr	r3, [r7, #24]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	68ba      	ldr	r2, [r7, #8]
 8004254:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004256:	2101      	movs	r1, #1
 8004258:	69b8      	ldr	r0, [r7, #24]
 800425a:	f7ff fecb 	bl	8003ff4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	78fa      	ldrb	r2, [r7, #3]
 8004262:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004266:	bf00      	nop
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}

0800426e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800426e:	b580      	push	{r7, lr}
 8004270:	b082      	sub	sp, #8
 8004272:	af00      	add	r7, sp, #0
 8004274:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00e      	beq.n	800429a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800428e:	2300      	movs	r3, #0
 8004290:	2200      	movs	r2, #0
 8004292:	2100      	movs	r1, #0
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 f8a1 	bl	80043dc <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800429a:	bf00      	nop
 800429c:	3708      	adds	r7, #8
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}

080042a2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80042a2:	b580      	push	{r7, lr}
 80042a4:	b086      	sub	sp, #24
 80042a6:	af00      	add	r7, sp, #0
 80042a8:	4603      	mov	r3, r0
 80042aa:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80042ac:	2301      	movs	r3, #1
 80042ae:	617b      	str	r3, [r7, #20]
 80042b0:	2300      	movs	r3, #0
 80042b2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80042b4:	79fb      	ldrb	r3, [r7, #7]
 80042b6:	461a      	mov	r2, r3
 80042b8:	6939      	ldr	r1, [r7, #16]
 80042ba:	6978      	ldr	r0, [r7, #20]
 80042bc:	f7ff ff7a 	bl	80041b4 <xQueueGenericCreate>
 80042c0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80042c2:	68f8      	ldr	r0, [r7, #12]
 80042c4:	f7ff ffd3 	bl	800426e <prvInitialiseMutex>

		return xNewQueue;
 80042c8:	68fb      	ldr	r3, [r7, #12]
	}
 80042ca:	4618      	mov	r0, r3
 80042cc:	3718      	adds	r7, #24
 80042ce:	46bd      	mov	sp, r7
 80042d0:	bd80      	pop	{r7, pc}

080042d2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80042d2:	b580      	push	{r7, lr}
 80042d4:	b088      	sub	sp, #32
 80042d6:	af02      	add	r7, sp, #8
 80042d8:	4603      	mov	r3, r0
 80042da:	6039      	str	r1, [r7, #0]
 80042dc:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80042de:	2301      	movs	r3, #1
 80042e0:	617b      	str	r3, [r7, #20]
 80042e2:	2300      	movs	r3, #0
 80042e4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80042e6:	79fb      	ldrb	r3, [r7, #7]
 80042e8:	9300      	str	r3, [sp, #0]
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	2200      	movs	r2, #0
 80042ee:	6939      	ldr	r1, [r7, #16]
 80042f0:	6978      	ldr	r0, [r7, #20]
 80042f2:	f7ff fee7 	bl	80040c4 <xQueueGenericCreateStatic>
 80042f6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f7ff ffb8 	bl	800426e <prvInitialiseMutex>

		return xNewQueue;
 80042fe:	68fb      	ldr	r3, [r7, #12]
	}
 8004300:	4618      	mov	r0, r3
 8004302:	3718      	adds	r7, #24
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8004308:	b590      	push	{r4, r7, lr}
 800430a:	b087      	sub	sp, #28
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10a      	bne.n	8004330 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800431a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800431e:	f383 8811 	msr	BASEPRI, r3
 8004322:	f3bf 8f6f 	isb	sy
 8004326:	f3bf 8f4f 	dsb	sy
 800432a:	60fb      	str	r3, [r7, #12]
}
 800432c:	bf00      	nop
 800432e:	e7fe      	b.n	800432e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	689c      	ldr	r4, [r3, #8]
 8004334:	f001 fdf4 	bl	8005f20 <xTaskGetCurrentTaskHandle>
 8004338:	4603      	mov	r3, r0
 800433a:	429c      	cmp	r4, r3
 800433c:	d111      	bne.n	8004362 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	1e5a      	subs	r2, r3, #1
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d105      	bne.n	800435c <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8004350:	2300      	movs	r3, #0
 8004352:	2200      	movs	r2, #0
 8004354:	2100      	movs	r1, #0
 8004356:	6938      	ldr	r0, [r7, #16]
 8004358:	f000 f840 	bl	80043dc <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800435c:	2301      	movs	r3, #1
 800435e:	617b      	str	r3, [r7, #20]
 8004360:	e001      	b.n	8004366 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8004362:	2300      	movs	r3, #0
 8004364:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8004366:	697b      	ldr	r3, [r7, #20]
	}
 8004368:	4618      	mov	r0, r3
 800436a:	371c      	adds	r7, #28
 800436c:	46bd      	mov	sp, r7
 800436e:	bd90      	pop	{r4, r7, pc}

08004370 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8004370:	b590      	push	{r4, r7, lr}
 8004372:	b087      	sub	sp, #28
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d10a      	bne.n	800439a <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8004384:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004388:	f383 8811 	msr	BASEPRI, r3
 800438c:	f3bf 8f6f 	isb	sy
 8004390:	f3bf 8f4f 	dsb	sy
 8004394:	60fb      	str	r3, [r7, #12]
}
 8004396:	bf00      	nop
 8004398:	e7fe      	b.n	8004398 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	689c      	ldr	r4, [r3, #8]
 800439e:	f001 fdbf 	bl	8005f20 <xTaskGetCurrentTaskHandle>
 80043a2:	4603      	mov	r3, r0
 80043a4:	429c      	cmp	r4, r3
 80043a6:	d107      	bne.n	80043b8 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	1c5a      	adds	r2, r3, #1
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80043b2:	2301      	movs	r3, #1
 80043b4:	617b      	str	r3, [r7, #20]
 80043b6:	e00c      	b.n	80043d2 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80043b8:	6839      	ldr	r1, [r7, #0]
 80043ba:	6938      	ldr	r0, [r7, #16]
 80043bc:	f000 fa88 	bl	80048d0 <xQueueSemaphoreTake>
 80043c0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d004      	beq.n	80043d2 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	1c5a      	adds	r2, r3, #1
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80043d2:	697b      	ldr	r3, [r7, #20]
	}
 80043d4:	4618      	mov	r0, r3
 80043d6:	371c      	adds	r7, #28
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd90      	pop	{r4, r7, pc}

080043dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b08e      	sub	sp, #56	; 0x38
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	60f8      	str	r0, [r7, #12]
 80043e4:	60b9      	str	r1, [r7, #8]
 80043e6:	607a      	str	r2, [r7, #4]
 80043e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80043ea:	2300      	movs	r3, #0
 80043ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80043f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d10a      	bne.n	800440e <xQueueGenericSend+0x32>
	__asm volatile
 80043f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fc:	f383 8811 	msr	BASEPRI, r3
 8004400:	f3bf 8f6f 	isb	sy
 8004404:	f3bf 8f4f 	dsb	sy
 8004408:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800440a:	bf00      	nop
 800440c:	e7fe      	b.n	800440c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800440e:	68bb      	ldr	r3, [r7, #8]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d103      	bne.n	800441c <xQueueGenericSend+0x40>
 8004414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004418:	2b00      	cmp	r3, #0
 800441a:	d101      	bne.n	8004420 <xQueueGenericSend+0x44>
 800441c:	2301      	movs	r3, #1
 800441e:	e000      	b.n	8004422 <xQueueGenericSend+0x46>
 8004420:	2300      	movs	r3, #0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10a      	bne.n	800443c <xQueueGenericSend+0x60>
	__asm volatile
 8004426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442a:	f383 8811 	msr	BASEPRI, r3
 800442e:	f3bf 8f6f 	isb	sy
 8004432:	f3bf 8f4f 	dsb	sy
 8004436:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004438:	bf00      	nop
 800443a:	e7fe      	b.n	800443a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	2b02      	cmp	r3, #2
 8004440:	d103      	bne.n	800444a <xQueueGenericSend+0x6e>
 8004442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004446:	2b01      	cmp	r3, #1
 8004448:	d101      	bne.n	800444e <xQueueGenericSend+0x72>
 800444a:	2301      	movs	r3, #1
 800444c:	e000      	b.n	8004450 <xQueueGenericSend+0x74>
 800444e:	2300      	movs	r3, #0
 8004450:	2b00      	cmp	r3, #0
 8004452:	d10a      	bne.n	800446a <xQueueGenericSend+0x8e>
	__asm volatile
 8004454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004458:	f383 8811 	msr	BASEPRI, r3
 800445c:	f3bf 8f6f 	isb	sy
 8004460:	f3bf 8f4f 	dsb	sy
 8004464:	623b      	str	r3, [r7, #32]
}
 8004466:	bf00      	nop
 8004468:	e7fe      	b.n	8004468 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800446a:	f001 fd69 	bl	8005f40 <xTaskGetSchedulerState>
 800446e:	4603      	mov	r3, r0
 8004470:	2b00      	cmp	r3, #0
 8004472:	d102      	bne.n	800447a <xQueueGenericSend+0x9e>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <xQueueGenericSend+0xa2>
 800447a:	2301      	movs	r3, #1
 800447c:	e000      	b.n	8004480 <xQueueGenericSend+0xa4>
 800447e:	2300      	movs	r3, #0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d10a      	bne.n	800449a <xQueueGenericSend+0xbe>
	__asm volatile
 8004484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004488:	f383 8811 	msr	BASEPRI, r3
 800448c:	f3bf 8f6f 	isb	sy
 8004490:	f3bf 8f4f 	dsb	sy
 8004494:	61fb      	str	r3, [r7, #28]
}
 8004496:	bf00      	nop
 8004498:	e7fe      	b.n	8004498 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800449a:	f002 fc8b 	bl	8006db4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800449e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d302      	bcc.n	80044b0 <xQueueGenericSend+0xd4>
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d129      	bne.n	8004504 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80044b0:	683a      	ldr	r2, [r7, #0]
 80044b2:	68b9      	ldr	r1, [r7, #8]
 80044b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044b6:	f000 fb2f 	bl	8004b18 <prvCopyDataToQueue>
 80044ba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d010      	beq.n	80044e6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c6:	3324      	adds	r3, #36	; 0x24
 80044c8:	4618      	mov	r0, r3
 80044ca:	f001 fb13 	bl	8005af4 <xTaskRemoveFromEventList>
 80044ce:	4603      	mov	r3, r0
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d013      	beq.n	80044fc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80044d4:	4b3f      	ldr	r3, [pc, #252]	; (80045d4 <xQueueGenericSend+0x1f8>)
 80044d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044da:	601a      	str	r2, [r3, #0]
 80044dc:	f3bf 8f4f 	dsb	sy
 80044e0:	f3bf 8f6f 	isb	sy
 80044e4:	e00a      	b.n	80044fc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80044e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d007      	beq.n	80044fc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80044ec:	4b39      	ldr	r3, [pc, #228]	; (80045d4 <xQueueGenericSend+0x1f8>)
 80044ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044f2:	601a      	str	r2, [r3, #0]
 80044f4:	f3bf 8f4f 	dsb	sy
 80044f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80044fc:	f002 fc8a 	bl	8006e14 <vPortExitCritical>
				return pdPASS;
 8004500:	2301      	movs	r3, #1
 8004502:	e063      	b.n	80045cc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d103      	bne.n	8004512 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800450a:	f002 fc83 	bl	8006e14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800450e:	2300      	movs	r3, #0
 8004510:	e05c      	b.n	80045cc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004512:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004514:	2b00      	cmp	r3, #0
 8004516:	d106      	bne.n	8004526 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004518:	f107 0314 	add.w	r3, r7, #20
 800451c:	4618      	mov	r0, r3
 800451e:	f001 fb4d 	bl	8005bbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004522:	2301      	movs	r3, #1
 8004524:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004526:	f002 fc75 	bl	8006e14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800452a:	f001 f891 	bl	8005650 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800452e:	f002 fc41 	bl	8006db4 <vPortEnterCritical>
 8004532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004534:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004538:	b25b      	sxtb	r3, r3
 800453a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800453e:	d103      	bne.n	8004548 <xQueueGenericSend+0x16c>
 8004540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004542:	2200      	movs	r2, #0
 8004544:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800454e:	b25b      	sxtb	r3, r3
 8004550:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004554:	d103      	bne.n	800455e <xQueueGenericSend+0x182>
 8004556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004558:	2200      	movs	r2, #0
 800455a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800455e:	f002 fc59 	bl	8006e14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004562:	1d3a      	adds	r2, r7, #4
 8004564:	f107 0314 	add.w	r3, r7, #20
 8004568:	4611      	mov	r1, r2
 800456a:	4618      	mov	r0, r3
 800456c:	f001 fb3c 	bl	8005be8 <xTaskCheckForTimeOut>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d124      	bne.n	80045c0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004576:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004578:	f000 fbc6 	bl	8004d08 <prvIsQueueFull>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d018      	beq.n	80045b4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004584:	3310      	adds	r3, #16
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	4611      	mov	r1, r2
 800458a:	4618      	mov	r0, r3
 800458c:	f001 fa62 	bl	8005a54 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004590:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004592:	f000 fb51 	bl	8004c38 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004596:	f001 f869 	bl	800566c <xTaskResumeAll>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	f47f af7c 	bne.w	800449a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80045a2:	4b0c      	ldr	r3, [pc, #48]	; (80045d4 <xQueueGenericSend+0x1f8>)
 80045a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045a8:	601a      	str	r2, [r3, #0]
 80045aa:	f3bf 8f4f 	dsb	sy
 80045ae:	f3bf 8f6f 	isb	sy
 80045b2:	e772      	b.n	800449a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80045b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045b6:	f000 fb3f 	bl	8004c38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80045ba:	f001 f857 	bl	800566c <xTaskResumeAll>
 80045be:	e76c      	b.n	800449a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80045c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045c2:	f000 fb39 	bl	8004c38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80045c6:	f001 f851 	bl	800566c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80045ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3738      	adds	r7, #56	; 0x38
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}
 80045d4:	e000ed04 	.word	0xe000ed04

080045d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b090      	sub	sp, #64	; 0x40
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
 80045e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80045ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d10a      	bne.n	8004606 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80045f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f4:	f383 8811 	msr	BASEPRI, r3
 80045f8:	f3bf 8f6f 	isb	sy
 80045fc:	f3bf 8f4f 	dsb	sy
 8004600:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004602:	bf00      	nop
 8004604:	e7fe      	b.n	8004604 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d103      	bne.n	8004614 <xQueueGenericSendFromISR+0x3c>
 800460c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800460e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004610:	2b00      	cmp	r3, #0
 8004612:	d101      	bne.n	8004618 <xQueueGenericSendFromISR+0x40>
 8004614:	2301      	movs	r3, #1
 8004616:	e000      	b.n	800461a <xQueueGenericSendFromISR+0x42>
 8004618:	2300      	movs	r3, #0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d10a      	bne.n	8004634 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800461e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004622:	f383 8811 	msr	BASEPRI, r3
 8004626:	f3bf 8f6f 	isb	sy
 800462a:	f3bf 8f4f 	dsb	sy
 800462e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004630:	bf00      	nop
 8004632:	e7fe      	b.n	8004632 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	2b02      	cmp	r3, #2
 8004638:	d103      	bne.n	8004642 <xQueueGenericSendFromISR+0x6a>
 800463a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800463c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800463e:	2b01      	cmp	r3, #1
 8004640:	d101      	bne.n	8004646 <xQueueGenericSendFromISR+0x6e>
 8004642:	2301      	movs	r3, #1
 8004644:	e000      	b.n	8004648 <xQueueGenericSendFromISR+0x70>
 8004646:	2300      	movs	r3, #0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d10a      	bne.n	8004662 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800464c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004650:	f383 8811 	msr	BASEPRI, r3
 8004654:	f3bf 8f6f 	isb	sy
 8004658:	f3bf 8f4f 	dsb	sy
 800465c:	623b      	str	r3, [r7, #32]
}
 800465e:	bf00      	nop
 8004660:	e7fe      	b.n	8004660 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004662:	f002 fc89 	bl	8006f78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004666:	f3ef 8211 	mrs	r2, BASEPRI
 800466a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466e:	f383 8811 	msr	BASEPRI, r3
 8004672:	f3bf 8f6f 	isb	sy
 8004676:	f3bf 8f4f 	dsb	sy
 800467a:	61fa      	str	r2, [r7, #28]
 800467c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800467e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004680:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004684:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800468a:	429a      	cmp	r2, r3
 800468c:	d302      	bcc.n	8004694 <xQueueGenericSendFromISR+0xbc>
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	2b02      	cmp	r3, #2
 8004692:	d12f      	bne.n	80046f4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004696:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800469a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800469e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80046a4:	683a      	ldr	r2, [r7, #0]
 80046a6:	68b9      	ldr	r1, [r7, #8]
 80046a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80046aa:	f000 fa35 	bl	8004b18 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80046ae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80046b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b6:	d112      	bne.n	80046de <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d016      	beq.n	80046ee <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c2:	3324      	adds	r3, #36	; 0x24
 80046c4:	4618      	mov	r0, r3
 80046c6:	f001 fa15 	bl	8005af4 <xTaskRemoveFromEventList>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00e      	beq.n	80046ee <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00b      	beq.n	80046ee <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2201      	movs	r2, #1
 80046da:	601a      	str	r2, [r3, #0]
 80046dc:	e007      	b.n	80046ee <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80046de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80046e2:	3301      	adds	r3, #1
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	b25a      	sxtb	r2, r3
 80046e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80046ee:	2301      	movs	r3, #1
 80046f0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80046f2:	e001      	b.n	80046f8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80046f4:	2300      	movs	r3, #0
 80046f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046fa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004702:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004706:	4618      	mov	r0, r3
 8004708:	3740      	adds	r7, #64	; 0x40
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
	...

08004710 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b08c      	sub	sp, #48	; 0x30
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800471c:	2300      	movs	r3, #0
 800471e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004726:	2b00      	cmp	r3, #0
 8004728:	d10a      	bne.n	8004740 <xQueueReceive+0x30>
	__asm volatile
 800472a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800472e:	f383 8811 	msr	BASEPRI, r3
 8004732:	f3bf 8f6f 	isb	sy
 8004736:	f3bf 8f4f 	dsb	sy
 800473a:	623b      	str	r3, [r7, #32]
}
 800473c:	bf00      	nop
 800473e:	e7fe      	b.n	800473e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d103      	bne.n	800474e <xQueueReceive+0x3e>
 8004746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <xQueueReceive+0x42>
 800474e:	2301      	movs	r3, #1
 8004750:	e000      	b.n	8004754 <xQueueReceive+0x44>
 8004752:	2300      	movs	r3, #0
 8004754:	2b00      	cmp	r3, #0
 8004756:	d10a      	bne.n	800476e <xQueueReceive+0x5e>
	__asm volatile
 8004758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800475c:	f383 8811 	msr	BASEPRI, r3
 8004760:	f3bf 8f6f 	isb	sy
 8004764:	f3bf 8f4f 	dsb	sy
 8004768:	61fb      	str	r3, [r7, #28]
}
 800476a:	bf00      	nop
 800476c:	e7fe      	b.n	800476c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800476e:	f001 fbe7 	bl	8005f40 <xTaskGetSchedulerState>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d102      	bne.n	800477e <xQueueReceive+0x6e>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d101      	bne.n	8004782 <xQueueReceive+0x72>
 800477e:	2301      	movs	r3, #1
 8004780:	e000      	b.n	8004784 <xQueueReceive+0x74>
 8004782:	2300      	movs	r3, #0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d10a      	bne.n	800479e <xQueueReceive+0x8e>
	__asm volatile
 8004788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478c:	f383 8811 	msr	BASEPRI, r3
 8004790:	f3bf 8f6f 	isb	sy
 8004794:	f3bf 8f4f 	dsb	sy
 8004798:	61bb      	str	r3, [r7, #24]
}
 800479a:	bf00      	nop
 800479c:	e7fe      	b.n	800479c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800479e:	f002 fb09 	bl	8006db4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80047a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80047a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d01f      	beq.n	80047ee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80047ae:	68b9      	ldr	r1, [r7, #8]
 80047b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047b2:	f000 fa1b 	bl	8004bec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80047b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b8:	1e5a      	subs	r2, r3, #1
 80047ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047bc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00f      	beq.n	80047e6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c8:	3310      	adds	r3, #16
 80047ca:	4618      	mov	r0, r3
 80047cc:	f001 f992 	bl	8005af4 <xTaskRemoveFromEventList>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d007      	beq.n	80047e6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80047d6:	4b3d      	ldr	r3, [pc, #244]	; (80048cc <xQueueReceive+0x1bc>)
 80047d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047dc:	601a      	str	r2, [r3, #0]
 80047de:	f3bf 8f4f 	dsb	sy
 80047e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80047e6:	f002 fb15 	bl	8006e14 <vPortExitCritical>
				return pdPASS;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e069      	b.n	80048c2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d103      	bne.n	80047fc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80047f4:	f002 fb0e 	bl	8006e14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80047f8:	2300      	movs	r3, #0
 80047fa:	e062      	b.n	80048c2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80047fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d106      	bne.n	8004810 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004802:	f107 0310 	add.w	r3, r7, #16
 8004806:	4618      	mov	r0, r3
 8004808:	f001 f9d8 	bl	8005bbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800480c:	2301      	movs	r3, #1
 800480e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004810:	f002 fb00 	bl	8006e14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004814:	f000 ff1c 	bl	8005650 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004818:	f002 facc 	bl	8006db4 <vPortEnterCritical>
 800481c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800481e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004822:	b25b      	sxtb	r3, r3
 8004824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004828:	d103      	bne.n	8004832 <xQueueReceive+0x122>
 800482a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482c:	2200      	movs	r2, #0
 800482e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004834:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004838:	b25b      	sxtb	r3, r3
 800483a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800483e:	d103      	bne.n	8004848 <xQueueReceive+0x138>
 8004840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004842:	2200      	movs	r2, #0
 8004844:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004848:	f002 fae4 	bl	8006e14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800484c:	1d3a      	adds	r2, r7, #4
 800484e:	f107 0310 	add.w	r3, r7, #16
 8004852:	4611      	mov	r1, r2
 8004854:	4618      	mov	r0, r3
 8004856:	f001 f9c7 	bl	8005be8 <xTaskCheckForTimeOut>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d123      	bne.n	80048a8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004860:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004862:	f000 fa3b 	bl	8004cdc <prvIsQueueEmpty>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d017      	beq.n	800489c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800486c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800486e:	3324      	adds	r3, #36	; 0x24
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	4611      	mov	r1, r2
 8004874:	4618      	mov	r0, r3
 8004876:	f001 f8ed 	bl	8005a54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800487a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800487c:	f000 f9dc 	bl	8004c38 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004880:	f000 fef4 	bl	800566c <xTaskResumeAll>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d189      	bne.n	800479e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800488a:	4b10      	ldr	r3, [pc, #64]	; (80048cc <xQueueReceive+0x1bc>)
 800488c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004890:	601a      	str	r2, [r3, #0]
 8004892:	f3bf 8f4f 	dsb	sy
 8004896:	f3bf 8f6f 	isb	sy
 800489a:	e780      	b.n	800479e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800489c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800489e:	f000 f9cb 	bl	8004c38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80048a2:	f000 fee3 	bl	800566c <xTaskResumeAll>
 80048a6:	e77a      	b.n	800479e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80048a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048aa:	f000 f9c5 	bl	8004c38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80048ae:	f000 fedd 	bl	800566c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80048b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048b4:	f000 fa12 	bl	8004cdc <prvIsQueueEmpty>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	f43f af6f 	beq.w	800479e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80048c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3730      	adds	r7, #48	; 0x30
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	e000ed04 	.word	0xe000ed04

080048d0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b08e      	sub	sp, #56	; 0x38
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80048da:	2300      	movs	r3, #0
 80048dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80048e2:	2300      	movs	r3, #0
 80048e4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80048e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d10a      	bne.n	8004902 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80048ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f0:	f383 8811 	msr	BASEPRI, r3
 80048f4:	f3bf 8f6f 	isb	sy
 80048f8:	f3bf 8f4f 	dsb	sy
 80048fc:	623b      	str	r3, [r7, #32]
}
 80048fe:	bf00      	nop
 8004900:	e7fe      	b.n	8004900 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004906:	2b00      	cmp	r3, #0
 8004908:	d00a      	beq.n	8004920 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800490a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800490e:	f383 8811 	msr	BASEPRI, r3
 8004912:	f3bf 8f6f 	isb	sy
 8004916:	f3bf 8f4f 	dsb	sy
 800491a:	61fb      	str	r3, [r7, #28]
}
 800491c:	bf00      	nop
 800491e:	e7fe      	b.n	800491e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004920:	f001 fb0e 	bl	8005f40 <xTaskGetSchedulerState>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d102      	bne.n	8004930 <xQueueSemaphoreTake+0x60>
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d101      	bne.n	8004934 <xQueueSemaphoreTake+0x64>
 8004930:	2301      	movs	r3, #1
 8004932:	e000      	b.n	8004936 <xQueueSemaphoreTake+0x66>
 8004934:	2300      	movs	r3, #0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d10a      	bne.n	8004950 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800493a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800493e:	f383 8811 	msr	BASEPRI, r3
 8004942:	f3bf 8f6f 	isb	sy
 8004946:	f3bf 8f4f 	dsb	sy
 800494a:	61bb      	str	r3, [r7, #24]
}
 800494c:	bf00      	nop
 800494e:	e7fe      	b.n	800494e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004950:	f002 fa30 	bl	8006db4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004958:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800495a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495c:	2b00      	cmp	r3, #0
 800495e:	d024      	beq.n	80049aa <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004962:	1e5a      	subs	r2, r3, #1
 8004964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004966:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d104      	bne.n	800497a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004970:	f001 fc5c 	bl	800622c <pvTaskIncrementMutexHeldCount>
 8004974:	4602      	mov	r2, r0
 8004976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004978:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800497a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00f      	beq.n	80049a2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004984:	3310      	adds	r3, #16
 8004986:	4618      	mov	r0, r3
 8004988:	f001 f8b4 	bl	8005af4 <xTaskRemoveFromEventList>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d007      	beq.n	80049a2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004992:	4b54      	ldr	r3, [pc, #336]	; (8004ae4 <xQueueSemaphoreTake+0x214>)
 8004994:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004998:	601a      	str	r2, [r3, #0]
 800499a:	f3bf 8f4f 	dsb	sy
 800499e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80049a2:	f002 fa37 	bl	8006e14 <vPortExitCritical>
				return pdPASS;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e097      	b.n	8004ada <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d111      	bne.n	80049d4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80049b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00a      	beq.n	80049cc <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80049b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ba:	f383 8811 	msr	BASEPRI, r3
 80049be:	f3bf 8f6f 	isb	sy
 80049c2:	f3bf 8f4f 	dsb	sy
 80049c6:	617b      	str	r3, [r7, #20]
}
 80049c8:	bf00      	nop
 80049ca:	e7fe      	b.n	80049ca <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80049cc:	f002 fa22 	bl	8006e14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80049d0:	2300      	movs	r3, #0
 80049d2:	e082      	b.n	8004ada <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80049d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d106      	bne.n	80049e8 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80049da:	f107 030c 	add.w	r3, r7, #12
 80049de:	4618      	mov	r0, r3
 80049e0:	f001 f8ec 	bl	8005bbc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80049e4:	2301      	movs	r3, #1
 80049e6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80049e8:	f002 fa14 	bl	8006e14 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80049ec:	f000 fe30 	bl	8005650 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80049f0:	f002 f9e0 	bl	8006db4 <vPortEnterCritical>
 80049f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049fa:	b25b      	sxtb	r3, r3
 80049fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a00:	d103      	bne.n	8004a0a <xQueueSemaphoreTake+0x13a>
 8004a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a04:	2200      	movs	r2, #0
 8004a06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a10:	b25b      	sxtb	r3, r3
 8004a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a16:	d103      	bne.n	8004a20 <xQueueSemaphoreTake+0x150>
 8004a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a20:	f002 f9f8 	bl	8006e14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a24:	463a      	mov	r2, r7
 8004a26:	f107 030c 	add.w	r3, r7, #12
 8004a2a:	4611      	mov	r1, r2
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f001 f8db 	bl	8005be8 <xTaskCheckForTimeOut>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d132      	bne.n	8004a9e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a3a:	f000 f94f 	bl	8004cdc <prvIsQueueEmpty>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d026      	beq.n	8004a92 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d109      	bne.n	8004a60 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004a4c:	f002 f9b2 	bl	8006db4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	4618      	mov	r0, r3
 8004a56:	f001 fa91 	bl	8005f7c <xTaskPriorityInherit>
 8004a5a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004a5c:	f002 f9da 	bl	8006e14 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a62:	3324      	adds	r3, #36	; 0x24
 8004a64:	683a      	ldr	r2, [r7, #0]
 8004a66:	4611      	mov	r1, r2
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f000 fff3 	bl	8005a54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004a6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a70:	f000 f8e2 	bl	8004c38 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004a74:	f000 fdfa 	bl	800566c <xTaskResumeAll>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	f47f af68 	bne.w	8004950 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004a80:	4b18      	ldr	r3, [pc, #96]	; (8004ae4 <xQueueSemaphoreTake+0x214>)
 8004a82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a86:	601a      	str	r2, [r3, #0]
 8004a88:	f3bf 8f4f 	dsb	sy
 8004a8c:	f3bf 8f6f 	isb	sy
 8004a90:	e75e      	b.n	8004950 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004a92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004a94:	f000 f8d0 	bl	8004c38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a98:	f000 fde8 	bl	800566c <xTaskResumeAll>
 8004a9c:	e758      	b.n	8004950 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004a9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004aa0:	f000 f8ca 	bl	8004c38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004aa4:	f000 fde2 	bl	800566c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004aa8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004aaa:	f000 f917 	bl	8004cdc <prvIsQueueEmpty>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	f43f af4d 	beq.w	8004950 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00d      	beq.n	8004ad8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004abc:	f002 f97a 	bl	8006db4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004ac0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ac2:	f000 f811 	bl	8004ae8 <prvGetDisinheritPriorityAfterTimeout>
 8004ac6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f001 fb2a 	bl	8006128 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004ad4:	f002 f99e 	bl	8006e14 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004ad8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004ada:	4618      	mov	r0, r3
 8004adc:	3738      	adds	r7, #56	; 0x38
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	e000ed04 	.word	0xe000ed04

08004ae8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004ae8:	b480      	push	{r7}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d006      	beq.n	8004b06 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8004b02:	60fb      	str	r3, [r7, #12]
 8004b04:	e001      	b.n	8004b0a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004b06:	2300      	movs	r3, #0
 8004b08:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
	}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3714      	adds	r7, #20
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b086      	sub	sp, #24
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004b24:	2300      	movs	r3, #0
 8004b26:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d10d      	bne.n	8004b52 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d14d      	bne.n	8004bda <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	4618      	mov	r0, r3
 8004b44:	f001 fa82 	bl	800604c <xTaskPriorityDisinherit>
 8004b48:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	609a      	str	r2, [r3, #8]
 8004b50:	e043      	b.n	8004bda <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d119      	bne.n	8004b8c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6858      	ldr	r0, [r3, #4]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b60:	461a      	mov	r2, r3
 8004b62:	68b9      	ldr	r1, [r7, #8]
 8004b64:	f003 fb75 	bl	8008252 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	685a      	ldr	r2, [r3, #4]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b70:	441a      	add	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	685a      	ldr	r2, [r3, #4]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d32b      	bcc.n	8004bda <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	605a      	str	r2, [r3, #4]
 8004b8a:	e026      	b.n	8004bda <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	68d8      	ldr	r0, [r3, #12]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b94:	461a      	mov	r2, r3
 8004b96:	68b9      	ldr	r1, [r7, #8]
 8004b98:	f003 fb5b 	bl	8008252 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	68da      	ldr	r2, [r3, #12]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba4:	425b      	negs	r3, r3
 8004ba6:	441a      	add	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	68da      	ldr	r2, [r3, #12]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d207      	bcs.n	8004bc8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	689a      	ldr	r2, [r3, #8]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc0:	425b      	negs	r3, r3
 8004bc2:	441a      	add	r2, r3
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d105      	bne.n	8004bda <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d002      	beq.n	8004bda <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	1c5a      	adds	r2, r3, #1
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004be2:	697b      	ldr	r3, [r7, #20]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3718      	adds	r7, #24
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}

08004bec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b082      	sub	sp, #8
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d018      	beq.n	8004c30 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	68da      	ldr	r2, [r3, #12]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c06:	441a      	add	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	68da      	ldr	r2, [r3, #12]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d303      	bcc.n	8004c20 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	68d9      	ldr	r1, [r3, #12]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c28:	461a      	mov	r2, r3
 8004c2a:	6838      	ldr	r0, [r7, #0]
 8004c2c:	f003 fb11 	bl	8008252 <memcpy>
	}
}
 8004c30:	bf00      	nop
 8004c32:	3708      	adds	r7, #8
 8004c34:	46bd      	mov	sp, r7
 8004c36:	bd80      	pop	{r7, pc}

08004c38 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004c40:	f002 f8b8 	bl	8006db4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c4a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c4c:	e011      	b.n	8004c72 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d012      	beq.n	8004c7c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	3324      	adds	r3, #36	; 0x24
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f000 ff4a 	bl	8005af4 <xTaskRemoveFromEventList>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d001      	beq.n	8004c6a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004c66:	f001 f821 	bl	8005cac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004c6a:	7bfb      	ldrb	r3, [r7, #15]
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004c72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	dce9      	bgt.n	8004c4e <prvUnlockQueue+0x16>
 8004c7a:	e000      	b.n	8004c7e <prvUnlockQueue+0x46>
					break;
 8004c7c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	22ff      	movs	r2, #255	; 0xff
 8004c82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004c86:	f002 f8c5 	bl	8006e14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004c8a:	f002 f893 	bl	8006db4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c94:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c96:	e011      	b.n	8004cbc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d012      	beq.n	8004cc6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	3310      	adds	r3, #16
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f000 ff25 	bl	8005af4 <xTaskRemoveFromEventList>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d001      	beq.n	8004cb4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004cb0:	f000 fffc 	bl	8005cac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004cb4:	7bbb      	ldrb	r3, [r7, #14]
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004cbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	dce9      	bgt.n	8004c98 <prvUnlockQueue+0x60>
 8004cc4:	e000      	b.n	8004cc8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004cc6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	22ff      	movs	r2, #255	; 0xff
 8004ccc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004cd0:	f002 f8a0 	bl	8006e14 <vPortExitCritical>
}
 8004cd4:	bf00      	nop
 8004cd6:	3710      	adds	r7, #16
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ce4:	f002 f866 	bl	8006db4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d102      	bne.n	8004cf6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	60fb      	str	r3, [r7, #12]
 8004cf4:	e001      	b.n	8004cfa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004cfa:	f002 f88b 	bl	8006e14 <vPortExitCritical>

	return xReturn;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3710      	adds	r7, #16
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d10:	f002 f850 	bl	8006db4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d102      	bne.n	8004d26 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004d20:	2301      	movs	r3, #1
 8004d22:	60fb      	str	r3, [r7, #12]
 8004d24:	e001      	b.n	8004d2a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004d26:	2300      	movs	r3, #0
 8004d28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d2a:	f002 f873 	bl	8006e14 <vPortExitCritical>

	return xReturn;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3710      	adds	r7, #16
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004d38:	b480      	push	{r7}
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d42:	2300      	movs	r3, #0
 8004d44:	60fb      	str	r3, [r7, #12]
 8004d46:	e014      	b.n	8004d72 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004d48:	4a0f      	ldr	r2, [pc, #60]	; (8004d88 <vQueueAddToRegistry+0x50>)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10b      	bne.n	8004d6c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004d54:	490c      	ldr	r1, [pc, #48]	; (8004d88 <vQueueAddToRegistry+0x50>)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	683a      	ldr	r2, [r7, #0]
 8004d5a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004d5e:	4a0a      	ldr	r2, [pc, #40]	; (8004d88 <vQueueAddToRegistry+0x50>)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	00db      	lsls	r3, r3, #3
 8004d64:	4413      	add	r3, r2
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004d6a:	e006      	b.n	8004d7a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	3301      	adds	r3, #1
 8004d70:	60fb      	str	r3, [r7, #12]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2b07      	cmp	r3, #7
 8004d76:	d9e7      	bls.n	8004d48 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004d78:	bf00      	nop
 8004d7a:	bf00      	nop
 8004d7c:	3714      	adds	r7, #20
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	20000bd4 	.word	0x20000bd4

08004d8c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b086      	sub	sp, #24
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004d9c:	f002 f80a 	bl	8006db4 <vPortEnterCritical>
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004da6:	b25b      	sxtb	r3, r3
 8004da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dac:	d103      	bne.n	8004db6 <vQueueWaitForMessageRestricted+0x2a>
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004dbc:	b25b      	sxtb	r3, r3
 8004dbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc2:	d103      	bne.n	8004dcc <vQueueWaitForMessageRestricted+0x40>
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004dcc:	f002 f822 	bl	8006e14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d106      	bne.n	8004de6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	3324      	adds	r3, #36	; 0x24
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	68b9      	ldr	r1, [r7, #8]
 8004de0:	4618      	mov	r0, r3
 8004de2:	f000 fe5b 	bl	8005a9c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004de6:	6978      	ldr	r0, [r7, #20]
 8004de8:	f7ff ff26 	bl	8004c38 <prvUnlockQueue>
	}
 8004dec:	bf00      	nop
 8004dee:	3718      	adds	r7, #24
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b08e      	sub	sp, #56	; 0x38
 8004df8:	af04      	add	r7, sp, #16
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	60b9      	str	r1, [r7, #8]
 8004dfe:	607a      	str	r2, [r7, #4]
 8004e00:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d10a      	bne.n	8004e1e <xTaskCreateStatic+0x2a>
	__asm volatile
 8004e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e0c:	f383 8811 	msr	BASEPRI, r3
 8004e10:	f3bf 8f6f 	isb	sy
 8004e14:	f3bf 8f4f 	dsb	sy
 8004e18:	623b      	str	r3, [r7, #32]
}
 8004e1a:	bf00      	nop
 8004e1c:	e7fe      	b.n	8004e1c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d10a      	bne.n	8004e3a <xTaskCreateStatic+0x46>
	__asm volatile
 8004e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e28:	f383 8811 	msr	BASEPRI, r3
 8004e2c:	f3bf 8f6f 	isb	sy
 8004e30:	f3bf 8f4f 	dsb	sy
 8004e34:	61fb      	str	r3, [r7, #28]
}
 8004e36:	bf00      	nop
 8004e38:	e7fe      	b.n	8004e38 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004e3a:	23ac      	movs	r3, #172	; 0xac
 8004e3c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	2bac      	cmp	r3, #172	; 0xac
 8004e42:	d00a      	beq.n	8004e5a <xTaskCreateStatic+0x66>
	__asm volatile
 8004e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e48:	f383 8811 	msr	BASEPRI, r3
 8004e4c:	f3bf 8f6f 	isb	sy
 8004e50:	f3bf 8f4f 	dsb	sy
 8004e54:	61bb      	str	r3, [r7, #24]
}
 8004e56:	bf00      	nop
 8004e58:	e7fe      	b.n	8004e58 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004e5a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d01e      	beq.n	8004ea0 <xTaskCreateStatic+0xac>
 8004e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d01b      	beq.n	8004ea0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e6a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e70:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e74:	2202      	movs	r2, #2
 8004e76:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	9303      	str	r3, [sp, #12]
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e80:	9302      	str	r3, [sp, #8]
 8004e82:	f107 0314 	add.w	r3, r7, #20
 8004e86:	9301      	str	r3, [sp, #4]
 8004e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8a:	9300      	str	r3, [sp, #0]
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	68b9      	ldr	r1, [r7, #8]
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f000 f850 	bl	8004f38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e9a:	f000 f903 	bl	80050a4 <prvAddNewTaskToReadyList>
 8004e9e:	e001      	b.n	8004ea4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004ea4:	697b      	ldr	r3, [r7, #20]
	}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3728      	adds	r7, #40	; 0x28
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b08c      	sub	sp, #48	; 0x30
 8004eb2:	af04      	add	r7, sp, #16
 8004eb4:	60f8      	str	r0, [r7, #12]
 8004eb6:	60b9      	str	r1, [r7, #8]
 8004eb8:	603b      	str	r3, [r7, #0]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004ebe:	88fb      	ldrh	r3, [r7, #6]
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f002 f898 	bl	8006ff8 <pvPortMalloc>
 8004ec8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00e      	beq.n	8004eee <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004ed0:	20ac      	movs	r0, #172	; 0xac
 8004ed2:	f002 f891 	bl	8006ff8 <pvPortMalloc>
 8004ed6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d003      	beq.n	8004ee6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	697a      	ldr	r2, [r7, #20]
 8004ee2:	631a      	str	r2, [r3, #48]	; 0x30
 8004ee4:	e005      	b.n	8004ef2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004ee6:	6978      	ldr	r0, [r7, #20]
 8004ee8:	f002 f952 	bl	8007190 <vPortFree>
 8004eec:	e001      	b.n	8004ef2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d017      	beq.n	8004f28 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	2200      	movs	r2, #0
 8004efc:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004f00:	88fa      	ldrh	r2, [r7, #6]
 8004f02:	2300      	movs	r3, #0
 8004f04:	9303      	str	r3, [sp, #12]
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	9302      	str	r3, [sp, #8]
 8004f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f0c:	9301      	str	r3, [sp, #4]
 8004f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f10:	9300      	str	r3, [sp, #0]
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	68b9      	ldr	r1, [r7, #8]
 8004f16:	68f8      	ldr	r0, [r7, #12]
 8004f18:	f000 f80e 	bl	8004f38 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f1c:	69f8      	ldr	r0, [r7, #28]
 8004f1e:	f000 f8c1 	bl	80050a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004f22:	2301      	movs	r3, #1
 8004f24:	61bb      	str	r3, [r7, #24]
 8004f26:	e002      	b.n	8004f2e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004f28:	f04f 33ff 	mov.w	r3, #4294967295
 8004f2c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004f2e:	69bb      	ldr	r3, [r7, #24]
	}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3720      	adds	r7, #32
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b088      	sub	sp, #32
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
 8004f44:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f48:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	461a      	mov	r2, r3
 8004f50:	21a5      	movs	r1, #165	; 0xa5
 8004f52:	f003 f8a9 	bl	80080a8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004f60:	3b01      	subs	r3, #1
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	4413      	add	r3, r2
 8004f66:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	f023 0307 	bic.w	r3, r3, #7
 8004f6e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	f003 0307 	and.w	r3, r3, #7
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00a      	beq.n	8004f90 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7e:	f383 8811 	msr	BASEPRI, r3
 8004f82:	f3bf 8f6f 	isb	sy
 8004f86:	f3bf 8f4f 	dsb	sy
 8004f8a:	617b      	str	r3, [r7, #20]
}
 8004f8c:	bf00      	nop
 8004f8e:	e7fe      	b.n	8004f8e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d01f      	beq.n	8004fd6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f96:	2300      	movs	r3, #0
 8004f98:	61fb      	str	r3, [r7, #28]
 8004f9a:	e012      	b.n	8004fc2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004f9c:	68ba      	ldr	r2, [r7, #8]
 8004f9e:	69fb      	ldr	r3, [r7, #28]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	7819      	ldrb	r1, [r3, #0]
 8004fa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	4413      	add	r3, r2
 8004faa:	3334      	adds	r3, #52	; 0x34
 8004fac:	460a      	mov	r2, r1
 8004fae:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004fb0:	68ba      	ldr	r2, [r7, #8]
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d006      	beq.n	8004fca <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	61fb      	str	r3, [r7, #28]
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	2b0f      	cmp	r3, #15
 8004fc6:	d9e9      	bls.n	8004f9c <prvInitialiseNewTask+0x64>
 8004fc8:	e000      	b.n	8004fcc <prvInitialiseNewTask+0x94>
			{
				break;
 8004fca:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fce:	2200      	movs	r2, #0
 8004fd0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fd4:	e003      	b.n	8004fde <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd8:	2200      	movs	r2, #0
 8004fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe0:	2b37      	cmp	r3, #55	; 0x37
 8004fe2:	d901      	bls.n	8004fe8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004fe4:	2337      	movs	r3, #55	; 0x37
 8004fe6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fec:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ff2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffc:	3304      	adds	r3, #4
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7fe ff64 	bl	8003ecc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005006:	3318      	adds	r3, #24
 8005008:	4618      	mov	r0, r3
 800500a:	f7fe ff5f 	bl	8003ecc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800500e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005010:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005012:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005016:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800501a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800501e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005020:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005022:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )
	{
		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 8005024:	2300      	movs	r3, #0
 8005026:	61fb      	str	r3, [r7, #28]
 8005028:	e009      	b.n	800503e <prvInitialiseNewTask+0x106>
		{
			pxNewTCB->pvThreadLocalStoragePointers[ x ] = NULL;
 800502a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800502c:	69fb      	ldr	r3, [r7, #28]
 800502e:	3314      	adds	r3, #20
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	4413      	add	r3, r2
 8005034:	2200      	movs	r2, #0
 8005036:	605a      	str	r2, [r3, #4]
		for( x = 0; x < ( UBaseType_t ) configNUM_THREAD_LOCAL_STORAGE_POINTERS; x++ )
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	3301      	adds	r3, #1
 800503c:	61fb      	str	r3, [r7, #28]
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d0f2      	beq.n	800502a <prvInitialiseNewTask+0xf2>
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005046:	2200      	movs	r2, #0
 8005048:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800504c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504e:	2200      	movs	r2, #0
 8005050:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005056:	3358      	adds	r3, #88	; 0x58
 8005058:	224c      	movs	r2, #76	; 0x4c
 800505a:	2100      	movs	r1, #0
 800505c:	4618      	mov	r0, r3
 800505e:	f003 f823 	bl	80080a8 <memset>
 8005062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005064:	4a0c      	ldr	r2, [pc, #48]	; (8005098 <prvInitialiseNewTask+0x160>)
 8005066:	65da      	str	r2, [r3, #92]	; 0x5c
 8005068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506a:	4a0c      	ldr	r2, [pc, #48]	; (800509c <prvInitialiseNewTask+0x164>)
 800506c:	661a      	str	r2, [r3, #96]	; 0x60
 800506e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005070:	4a0b      	ldr	r2, [pc, #44]	; (80050a0 <prvInitialiseNewTask+0x168>)
 8005072:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005074:	683a      	ldr	r2, [r7, #0]
 8005076:	68f9      	ldr	r1, [r7, #12]
 8005078:	69b8      	ldr	r0, [r7, #24]
 800507a:	f001 fd6d 	bl	8006b58 <pxPortInitialiseStack>
 800507e:	4602      	mov	r2, r0
 8005080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005082:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005086:	2b00      	cmp	r3, #0
 8005088:	d002      	beq.n	8005090 <prvInitialiseNewTask+0x158>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800508a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800508c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800508e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005090:	bf00      	nop
 8005092:	3720      	adds	r7, #32
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}
 8005098:	20004e68 	.word	0x20004e68
 800509c:	20004ed0 	.word	0x20004ed0
 80050a0:	20004f38 	.word	0x20004f38

080050a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80050ac:	f001 fe82 	bl	8006db4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80050b0:	4b2d      	ldr	r3, [pc, #180]	; (8005168 <prvAddNewTaskToReadyList+0xc4>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	3301      	adds	r3, #1
 80050b6:	4a2c      	ldr	r2, [pc, #176]	; (8005168 <prvAddNewTaskToReadyList+0xc4>)
 80050b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80050ba:	4b2c      	ldr	r3, [pc, #176]	; (800516c <prvAddNewTaskToReadyList+0xc8>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d109      	bne.n	80050d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80050c2:	4a2a      	ldr	r2, [pc, #168]	; (800516c <prvAddNewTaskToReadyList+0xc8>)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80050c8:	4b27      	ldr	r3, [pc, #156]	; (8005168 <prvAddNewTaskToReadyList+0xc4>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d110      	bne.n	80050f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80050d0:	f000 fe64 	bl	8005d9c <prvInitialiseTaskLists>
 80050d4:	e00d      	b.n	80050f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80050d6:	4b26      	ldr	r3, [pc, #152]	; (8005170 <prvAddNewTaskToReadyList+0xcc>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d109      	bne.n	80050f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80050de:	4b23      	ldr	r3, [pc, #140]	; (800516c <prvAddNewTaskToReadyList+0xc8>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050e8:	429a      	cmp	r2, r3
 80050ea:	d802      	bhi.n	80050f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80050ec:	4a1f      	ldr	r2, [pc, #124]	; (800516c <prvAddNewTaskToReadyList+0xc8>)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80050f2:	4b20      	ldr	r3, [pc, #128]	; (8005174 <prvAddNewTaskToReadyList+0xd0>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	3301      	adds	r3, #1
 80050f8:	4a1e      	ldr	r2, [pc, #120]	; (8005174 <prvAddNewTaskToReadyList+0xd0>)
 80050fa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80050fc:	4b1d      	ldr	r3, [pc, #116]	; (8005174 <prvAddNewTaskToReadyList+0xd0>)
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005108:	4b1b      	ldr	r3, [pc, #108]	; (8005178 <prvAddNewTaskToReadyList+0xd4>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	429a      	cmp	r2, r3
 800510e:	d903      	bls.n	8005118 <prvAddNewTaskToReadyList+0x74>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005114:	4a18      	ldr	r2, [pc, #96]	; (8005178 <prvAddNewTaskToReadyList+0xd4>)
 8005116:	6013      	str	r3, [r2, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800511c:	4613      	mov	r3, r2
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	4413      	add	r3, r2
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	4a15      	ldr	r2, [pc, #84]	; (800517c <prvAddNewTaskToReadyList+0xd8>)
 8005126:	441a      	add	r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	3304      	adds	r3, #4
 800512c:	4619      	mov	r1, r3
 800512e:	4610      	mov	r0, r2
 8005130:	f7fe fed9 	bl	8003ee6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005134:	f001 fe6e 	bl	8006e14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005138:	4b0d      	ldr	r3, [pc, #52]	; (8005170 <prvAddNewTaskToReadyList+0xcc>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d00e      	beq.n	800515e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005140:	4b0a      	ldr	r3, [pc, #40]	; (800516c <prvAddNewTaskToReadyList+0xc8>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800514a:	429a      	cmp	r2, r3
 800514c:	d207      	bcs.n	800515e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800514e:	4b0c      	ldr	r3, [pc, #48]	; (8005180 <prvAddNewTaskToReadyList+0xdc>)
 8005150:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005154:	601a      	str	r2, [r3, #0]
 8005156:	f3bf 8f4f 	dsb	sy
 800515a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800515e:	bf00      	nop
 8005160:	3708      	adds	r7, #8
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	200010e8 	.word	0x200010e8
 800516c:	20000c14 	.word	0x20000c14
 8005170:	200010f4 	.word	0x200010f4
 8005174:	20001104 	.word	0x20001104
 8005178:	200010f0 	.word	0x200010f0
 800517c:	20000c18 	.word	0x20000c18
 8005180:	e000ed04 	.word	0xe000ed04

08005184 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800518c:	f001 fe12 	bl	8006db4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d102      	bne.n	800519c <vTaskDelete+0x18>
 8005196:	4b2c      	ldr	r3, [pc, #176]	; (8005248 <vTaskDelete+0xc4>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	e000      	b.n	800519e <vTaskDelete+0x1a>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	3304      	adds	r3, #4
 80051a4:	4618      	mov	r0, r3
 80051a6:	f7fe fefb 	bl	8003fa0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d004      	beq.n	80051bc <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	3318      	adds	r3, #24
 80051b6:	4618      	mov	r0, r3
 80051b8:	f7fe fef2 	bl	8003fa0 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80051bc:	4b23      	ldr	r3, [pc, #140]	; (800524c <vTaskDelete+0xc8>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	3301      	adds	r3, #1
 80051c2:	4a22      	ldr	r2, [pc, #136]	; (800524c <vTaskDelete+0xc8>)
 80051c4:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80051c6:	4b20      	ldr	r3, [pc, #128]	; (8005248 <vTaskDelete+0xc4>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d10b      	bne.n	80051e8 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	3304      	adds	r3, #4
 80051d4:	4619      	mov	r1, r3
 80051d6:	481e      	ldr	r0, [pc, #120]	; (8005250 <vTaskDelete+0xcc>)
 80051d8:	f7fe fe85 	bl	8003ee6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 80051dc:	4b1d      	ldr	r3, [pc, #116]	; (8005254 <vTaskDelete+0xd0>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	3301      	adds	r3, #1
 80051e2:	4a1c      	ldr	r2, [pc, #112]	; (8005254 <vTaskDelete+0xd0>)
 80051e4:	6013      	str	r3, [r2, #0]
 80051e6:	e009      	b.n	80051fc <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 80051e8:	4b1b      	ldr	r3, [pc, #108]	; (8005258 <vTaskDelete+0xd4>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	3b01      	subs	r3, #1
 80051ee:	4a1a      	ldr	r2, [pc, #104]	; (8005258 <vTaskDelete+0xd4>)
 80051f0:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80051f2:	68f8      	ldr	r0, [r7, #12]
 80051f4:	f000 fe40 	bl	8005e78 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80051f8:	f000 fe72 	bl	8005ee0 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80051fc:	f001 fe0a 	bl	8006e14 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8005200:	4b16      	ldr	r3, [pc, #88]	; (800525c <vTaskDelete+0xd8>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d01b      	beq.n	8005240 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8005208:	4b0f      	ldr	r3, [pc, #60]	; (8005248 <vTaskDelete+0xc4>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68fa      	ldr	r2, [r7, #12]
 800520e:	429a      	cmp	r2, r3
 8005210:	d116      	bne.n	8005240 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8005212:	4b13      	ldr	r3, [pc, #76]	; (8005260 <vTaskDelete+0xdc>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00a      	beq.n	8005230 <vTaskDelete+0xac>
	__asm volatile
 800521a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800521e:	f383 8811 	msr	BASEPRI, r3
 8005222:	f3bf 8f6f 	isb	sy
 8005226:	f3bf 8f4f 	dsb	sy
 800522a:	60bb      	str	r3, [r7, #8]
}
 800522c:	bf00      	nop
 800522e:	e7fe      	b.n	800522e <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8005230:	4b0c      	ldr	r3, [pc, #48]	; (8005264 <vTaskDelete+0xe0>)
 8005232:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005236:	601a      	str	r2, [r3, #0]
 8005238:	f3bf 8f4f 	dsb	sy
 800523c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005240:	bf00      	nop
 8005242:	3710      	adds	r7, #16
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}
 8005248:	20000c14 	.word	0x20000c14
 800524c:	20001104 	.word	0x20001104
 8005250:	200010bc 	.word	0x200010bc
 8005254:	200010d0 	.word	0x200010d0
 8005258:	200010e8 	.word	0x200010e8
 800525c:	200010f4 	.word	0x200010f4
 8005260:	20001110 	.word	0x20001110
 8005264:	e000ed04 	.word	0xe000ed04

08005268 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8005268:	b580      	push	{r7, lr}
 800526a:	b08a      	sub	sp, #40	; 0x28
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8005272:	2300      	movs	r3, #0
 8005274:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d10a      	bne.n	8005292 <vTaskDelayUntil+0x2a>
	__asm volatile
 800527c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005280:	f383 8811 	msr	BASEPRI, r3
 8005284:	f3bf 8f6f 	isb	sy
 8005288:	f3bf 8f4f 	dsb	sy
 800528c:	617b      	str	r3, [r7, #20]
}
 800528e:	bf00      	nop
 8005290:	e7fe      	b.n	8005290 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d10a      	bne.n	80052ae <vTaskDelayUntil+0x46>
	__asm volatile
 8005298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800529c:	f383 8811 	msr	BASEPRI, r3
 80052a0:	f3bf 8f6f 	isb	sy
 80052a4:	f3bf 8f4f 	dsb	sy
 80052a8:	613b      	str	r3, [r7, #16]
}
 80052aa:	bf00      	nop
 80052ac:	e7fe      	b.n	80052ac <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 80052ae:	4b2a      	ldr	r3, [pc, #168]	; (8005358 <vTaskDelayUntil+0xf0>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d00a      	beq.n	80052cc <vTaskDelayUntil+0x64>
	__asm volatile
 80052b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ba:	f383 8811 	msr	BASEPRI, r3
 80052be:	f3bf 8f6f 	isb	sy
 80052c2:	f3bf 8f4f 	dsb	sy
 80052c6:	60fb      	str	r3, [r7, #12]
}
 80052c8:	bf00      	nop
 80052ca:	e7fe      	b.n	80052ca <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 80052cc:	f000 f9c0 	bl	8005650 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 80052d0:	4b22      	ldr	r3, [pc, #136]	; (800535c <vTaskDelayUntil+0xf4>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	683a      	ldr	r2, [r7, #0]
 80052dc:	4413      	add	r3, r2
 80052de:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	6a3a      	ldr	r2, [r7, #32]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d20b      	bcs.n	8005302 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	69fa      	ldr	r2, [r7, #28]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d211      	bcs.n	8005318 <vTaskDelayUntil+0xb0>
 80052f4:	69fa      	ldr	r2, [r7, #28]
 80052f6:	6a3b      	ldr	r3, [r7, #32]
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d90d      	bls.n	8005318 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80052fc:	2301      	movs	r3, #1
 80052fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005300:	e00a      	b.n	8005318 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	69fa      	ldr	r2, [r7, #28]
 8005308:	429a      	cmp	r2, r3
 800530a:	d303      	bcc.n	8005314 <vTaskDelayUntil+0xac>
 800530c:	69fa      	ldr	r2, [r7, #28]
 800530e:	6a3b      	ldr	r3, [r7, #32]
 8005310:	429a      	cmp	r2, r3
 8005312:	d901      	bls.n	8005318 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8005314:	2301      	movs	r3, #1
 8005316:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	69fa      	ldr	r2, [r7, #28]
 800531c:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005320:	2b00      	cmp	r3, #0
 8005322:	d006      	beq.n	8005332 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8005324:	69fa      	ldr	r2, [r7, #28]
 8005326:	6a3b      	ldr	r3, [r7, #32]
 8005328:	1ad3      	subs	r3, r2, r3
 800532a:	2100      	movs	r1, #0
 800532c:	4618      	mov	r0, r3
 800532e:	f001 f871 	bl	8006414 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8005332:	f000 f99b 	bl	800566c <xTaskResumeAll>
 8005336:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d107      	bne.n	800534e <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800533e:	4b08      	ldr	r3, [pc, #32]	; (8005360 <vTaskDelayUntil+0xf8>)
 8005340:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005344:	601a      	str	r2, [r3, #0]
 8005346:	f3bf 8f4f 	dsb	sy
 800534a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800534e:	bf00      	nop
 8005350:	3728      	adds	r7, #40	; 0x28
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	20001110 	.word	0x20001110
 800535c:	200010ec 	.word	0x200010ec
 8005360:	e000ed04 	.word	0xe000ed04

08005364 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800536c:	f001 fd22 	bl	8006db4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d102      	bne.n	800537c <vTaskSuspend+0x18>
 8005376:	4b30      	ldr	r3, [pc, #192]	; (8005438 <vTaskSuspend+0xd4>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	e000      	b.n	800537e <vTaskSuspend+0x1a>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	3304      	adds	r3, #4
 8005384:	4618      	mov	r0, r3
 8005386:	f7fe fe0b 	bl	8003fa0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800538e:	2b00      	cmp	r3, #0
 8005390:	d004      	beq.n	800539c <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	3318      	adds	r3, #24
 8005396:	4618      	mov	r0, r3
 8005398:	f7fe fe02 	bl	8003fa0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	3304      	adds	r3, #4
 80053a0:	4619      	mov	r1, r3
 80053a2:	4826      	ldr	r0, [pc, #152]	; (800543c <vTaskSuspend+0xd8>)
 80053a4:	f7fe fd9f 	bl	8003ee6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d103      	bne.n	80053bc <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 80053bc:	f001 fd2a 	bl	8006e14 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 80053c0:	4b1f      	ldr	r3, [pc, #124]	; (8005440 <vTaskSuspend+0xdc>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d005      	beq.n	80053d4 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 80053c8:	f001 fcf4 	bl	8006db4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 80053cc:	f000 fd88 	bl	8005ee0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 80053d0:	f001 fd20 	bl	8006e14 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80053d4:	4b18      	ldr	r3, [pc, #96]	; (8005438 <vTaskSuspend+0xd4>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d127      	bne.n	800542e <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 80053de:	4b18      	ldr	r3, [pc, #96]	; (8005440 <vTaskSuspend+0xdc>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d017      	beq.n	8005416 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80053e6:	4b17      	ldr	r3, [pc, #92]	; (8005444 <vTaskSuspend+0xe0>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d00a      	beq.n	8005404 <vTaskSuspend+0xa0>
	__asm volatile
 80053ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f2:	f383 8811 	msr	BASEPRI, r3
 80053f6:	f3bf 8f6f 	isb	sy
 80053fa:	f3bf 8f4f 	dsb	sy
 80053fe:	60bb      	str	r3, [r7, #8]
}
 8005400:	bf00      	nop
 8005402:	e7fe      	b.n	8005402 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8005404:	4b10      	ldr	r3, [pc, #64]	; (8005448 <vTaskSuspend+0xe4>)
 8005406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800540a:	601a      	str	r2, [r3, #0]
 800540c:	f3bf 8f4f 	dsb	sy
 8005410:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005414:	e00b      	b.n	800542e <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8005416:	4b09      	ldr	r3, [pc, #36]	; (800543c <vTaskSuspend+0xd8>)
 8005418:	681a      	ldr	r2, [r3, #0]
 800541a:	4b0c      	ldr	r3, [pc, #48]	; (800544c <vTaskSuspend+0xe8>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	429a      	cmp	r2, r3
 8005420:	d103      	bne.n	800542a <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8005422:	4b05      	ldr	r3, [pc, #20]	; (8005438 <vTaskSuspend+0xd4>)
 8005424:	2200      	movs	r2, #0
 8005426:	601a      	str	r2, [r3, #0]
	}
 8005428:	e001      	b.n	800542e <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800542a:	f000 faaf 	bl	800598c <vTaskSwitchContext>
	}
 800542e:	bf00      	nop
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	20000c14 	.word	0x20000c14
 800543c:	200010d4 	.word	0x200010d4
 8005440:	200010f4 	.word	0x200010f4
 8005444:	20001110 	.word	0x20001110
 8005448:	e000ed04 	.word	0xe000ed04
 800544c:	200010e8 	.word	0x200010e8

08005450 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8005450:	b480      	push	{r7}
 8005452:	b087      	sub	sp, #28
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8005458:	2300      	movs	r3, #0
 800545a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d10a      	bne.n	800547c <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8005466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800546a:	f383 8811 	msr	BASEPRI, r3
 800546e:	f3bf 8f6f 	isb	sy
 8005472:	f3bf 8f4f 	dsb	sy
 8005476:	60fb      	str	r3, [r7, #12]
}
 8005478:	bf00      	nop
 800547a:	e7fe      	b.n	800547a <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	695b      	ldr	r3, [r3, #20]
 8005480:	4a0a      	ldr	r2, [pc, #40]	; (80054ac <prvTaskIsTaskSuspended+0x5c>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d10a      	bne.n	800549c <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800548a:	4a09      	ldr	r2, [pc, #36]	; (80054b0 <prvTaskIsTaskSuspended+0x60>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d005      	beq.n	800549c <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005494:	2b00      	cmp	r3, #0
 8005496:	d101      	bne.n	800549c <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8005498:	2301      	movs	r3, #1
 800549a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800549c:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800549e:	4618      	mov	r0, r3
 80054a0:	371c      	adds	r7, #28
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	200010d4 	.word	0x200010d4
 80054b0:	200010a8 	.word	0x200010a8

080054b4 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d10a      	bne.n	80054dc <vTaskResume+0x28>
	__asm volatile
 80054c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ca:	f383 8811 	msr	BASEPRI, r3
 80054ce:	f3bf 8f6f 	isb	sy
 80054d2:	f3bf 8f4f 	dsb	sy
 80054d6:	60bb      	str	r3, [r7, #8]
}
 80054d8:	bf00      	nop
 80054da:	e7fe      	b.n	80054da <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80054dc:	4b20      	ldr	r3, [pc, #128]	; (8005560 <vTaskResume+0xac>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68fa      	ldr	r2, [r7, #12]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d038      	beq.n	8005558 <vTaskResume+0xa4>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d035      	beq.n	8005558 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 80054ec:	f001 fc62 	bl	8006db4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80054f0:	68f8      	ldr	r0, [r7, #12]
 80054f2:	f7ff ffad 	bl	8005450 <prvTaskIsTaskSuspended>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d02b      	beq.n	8005554 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	3304      	adds	r3, #4
 8005500:	4618      	mov	r0, r3
 8005502:	f7fe fd4d 	bl	8003fa0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800550a:	4b16      	ldr	r3, [pc, #88]	; (8005564 <vTaskResume+0xb0>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	429a      	cmp	r2, r3
 8005510:	d903      	bls.n	800551a <vTaskResume+0x66>
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005516:	4a13      	ldr	r2, [pc, #76]	; (8005564 <vTaskResume+0xb0>)
 8005518:	6013      	str	r3, [r2, #0]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800551e:	4613      	mov	r3, r2
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	4413      	add	r3, r2
 8005524:	009b      	lsls	r3, r3, #2
 8005526:	4a10      	ldr	r2, [pc, #64]	; (8005568 <vTaskResume+0xb4>)
 8005528:	441a      	add	r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	3304      	adds	r3, #4
 800552e:	4619      	mov	r1, r3
 8005530:	4610      	mov	r0, r2
 8005532:	f7fe fcd8 	bl	8003ee6 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800553a:	4b09      	ldr	r3, [pc, #36]	; (8005560 <vTaskResume+0xac>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005540:	429a      	cmp	r2, r3
 8005542:	d307      	bcc.n	8005554 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8005544:	4b09      	ldr	r3, [pc, #36]	; (800556c <vTaskResume+0xb8>)
 8005546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800554a:	601a      	str	r2, [r3, #0]
 800554c:	f3bf 8f4f 	dsb	sy
 8005550:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8005554:	f001 fc5e 	bl	8006e14 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005558:	bf00      	nop
 800555a:	3710      	adds	r7, #16
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	20000c14 	.word	0x20000c14
 8005564:	200010f0 	.word	0x200010f0
 8005568:	20000c18 	.word	0x20000c18
 800556c:	e000ed04 	.word	0xe000ed04

08005570 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b08a      	sub	sp, #40	; 0x28
 8005574:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005576:	2300      	movs	r3, #0
 8005578:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800557a:	2300      	movs	r3, #0
 800557c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800557e:	463a      	mov	r2, r7
 8005580:	1d39      	adds	r1, r7, #4
 8005582:	f107 0308 	add.w	r3, r7, #8
 8005586:	4618      	mov	r0, r3
 8005588:	f7fe fc4c 	bl	8003e24 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800558c:	6839      	ldr	r1, [r7, #0]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	68ba      	ldr	r2, [r7, #8]
 8005592:	9202      	str	r2, [sp, #8]
 8005594:	9301      	str	r3, [sp, #4]
 8005596:	2300      	movs	r3, #0
 8005598:	9300      	str	r3, [sp, #0]
 800559a:	2300      	movs	r3, #0
 800559c:	460a      	mov	r2, r1
 800559e:	4924      	ldr	r1, [pc, #144]	; (8005630 <vTaskStartScheduler+0xc0>)
 80055a0:	4824      	ldr	r0, [pc, #144]	; (8005634 <vTaskStartScheduler+0xc4>)
 80055a2:	f7ff fc27 	bl	8004df4 <xTaskCreateStatic>
 80055a6:	4603      	mov	r3, r0
 80055a8:	4a23      	ldr	r2, [pc, #140]	; (8005638 <vTaskStartScheduler+0xc8>)
 80055aa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80055ac:	4b22      	ldr	r3, [pc, #136]	; (8005638 <vTaskStartScheduler+0xc8>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d002      	beq.n	80055ba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80055b4:	2301      	movs	r3, #1
 80055b6:	617b      	str	r3, [r7, #20]
 80055b8:	e001      	b.n	80055be <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80055ba:	2300      	movs	r3, #0
 80055bc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d102      	bne.n	80055ca <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80055c4:	f000 ff7a 	bl	80064bc <xTimerCreateTimerTask>
 80055c8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d11b      	bne.n	8005608 <vTaskStartScheduler+0x98>
	__asm volatile
 80055d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d4:	f383 8811 	msr	BASEPRI, r3
 80055d8:	f3bf 8f6f 	isb	sy
 80055dc:	f3bf 8f4f 	dsb	sy
 80055e0:	613b      	str	r3, [r7, #16]
}
 80055e2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80055e4:	4b15      	ldr	r3, [pc, #84]	; (800563c <vTaskStartScheduler+0xcc>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	3358      	adds	r3, #88	; 0x58
 80055ea:	4a15      	ldr	r2, [pc, #84]	; (8005640 <vTaskStartScheduler+0xd0>)
 80055ec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80055ee:	4b15      	ldr	r3, [pc, #84]	; (8005644 <vTaskStartScheduler+0xd4>)
 80055f0:	f04f 32ff 	mov.w	r2, #4294967295
 80055f4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80055f6:	4b14      	ldr	r3, [pc, #80]	; (8005648 <vTaskStartScheduler+0xd8>)
 80055f8:	2201      	movs	r2, #1
 80055fa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80055fc:	4b13      	ldr	r3, [pc, #76]	; (800564c <vTaskStartScheduler+0xdc>)
 80055fe:	2200      	movs	r2, #0
 8005600:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005602:	f001 fb35 	bl	8006c70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005606:	e00e      	b.n	8005626 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800560e:	d10a      	bne.n	8005626 <vTaskStartScheduler+0xb6>
	__asm volatile
 8005610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005614:	f383 8811 	msr	BASEPRI, r3
 8005618:	f3bf 8f6f 	isb	sy
 800561c:	f3bf 8f4f 	dsb	sy
 8005620:	60fb      	str	r3, [r7, #12]
}
 8005622:	bf00      	nop
 8005624:	e7fe      	b.n	8005624 <vTaskStartScheduler+0xb4>
}
 8005626:	bf00      	nop
 8005628:	3718      	adds	r7, #24
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	0800a114 	.word	0x0800a114
 8005634:	08005cc5 	.word	0x08005cc5
 8005638:	2000110c 	.word	0x2000110c
 800563c:	20000c14 	.word	0x20000c14
 8005640:	20000068 	.word	0x20000068
 8005644:	20001108 	.word	0x20001108
 8005648:	200010f4 	.word	0x200010f4
 800564c:	200010ec 	.word	0x200010ec

08005650 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005650:	b480      	push	{r7}
 8005652:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005654:	4b04      	ldr	r3, [pc, #16]	; (8005668 <vTaskSuspendAll+0x18>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	3301      	adds	r3, #1
 800565a:	4a03      	ldr	r2, [pc, #12]	; (8005668 <vTaskSuspendAll+0x18>)
 800565c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800565e:	bf00      	nop
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr
 8005668:	20001110 	.word	0x20001110

0800566c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005672:	2300      	movs	r3, #0
 8005674:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005676:	2300      	movs	r3, #0
 8005678:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800567a:	4b42      	ldr	r3, [pc, #264]	; (8005784 <xTaskResumeAll+0x118>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d10a      	bne.n	8005698 <xTaskResumeAll+0x2c>
	__asm volatile
 8005682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005686:	f383 8811 	msr	BASEPRI, r3
 800568a:	f3bf 8f6f 	isb	sy
 800568e:	f3bf 8f4f 	dsb	sy
 8005692:	603b      	str	r3, [r7, #0]
}
 8005694:	bf00      	nop
 8005696:	e7fe      	b.n	8005696 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005698:	f001 fb8c 	bl	8006db4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800569c:	4b39      	ldr	r3, [pc, #228]	; (8005784 <xTaskResumeAll+0x118>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	3b01      	subs	r3, #1
 80056a2:	4a38      	ldr	r2, [pc, #224]	; (8005784 <xTaskResumeAll+0x118>)
 80056a4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056a6:	4b37      	ldr	r3, [pc, #220]	; (8005784 <xTaskResumeAll+0x118>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d162      	bne.n	8005774 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80056ae:	4b36      	ldr	r3, [pc, #216]	; (8005788 <xTaskResumeAll+0x11c>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d05e      	beq.n	8005774 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80056b6:	e02f      	b.n	8005718 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056b8:	4b34      	ldr	r3, [pc, #208]	; (800578c <xTaskResumeAll+0x120>)
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	3318      	adds	r3, #24
 80056c4:	4618      	mov	r0, r3
 80056c6:	f7fe fc6b 	bl	8003fa0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	3304      	adds	r3, #4
 80056ce:	4618      	mov	r0, r3
 80056d0:	f7fe fc66 	bl	8003fa0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056d8:	4b2d      	ldr	r3, [pc, #180]	; (8005790 <xTaskResumeAll+0x124>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d903      	bls.n	80056e8 <xTaskResumeAll+0x7c>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e4:	4a2a      	ldr	r2, [pc, #168]	; (8005790 <xTaskResumeAll+0x124>)
 80056e6:	6013      	str	r3, [r2, #0]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056ec:	4613      	mov	r3, r2
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	4413      	add	r3, r2
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	4a27      	ldr	r2, [pc, #156]	; (8005794 <xTaskResumeAll+0x128>)
 80056f6:	441a      	add	r2, r3
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	3304      	adds	r3, #4
 80056fc:	4619      	mov	r1, r3
 80056fe:	4610      	mov	r0, r2
 8005700:	f7fe fbf1 	bl	8003ee6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005708:	4b23      	ldr	r3, [pc, #140]	; (8005798 <xTaskResumeAll+0x12c>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800570e:	429a      	cmp	r2, r3
 8005710:	d302      	bcc.n	8005718 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005712:	4b22      	ldr	r3, [pc, #136]	; (800579c <xTaskResumeAll+0x130>)
 8005714:	2201      	movs	r2, #1
 8005716:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005718:	4b1c      	ldr	r3, [pc, #112]	; (800578c <xTaskResumeAll+0x120>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d1cb      	bne.n	80056b8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d001      	beq.n	800572a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005726:	f000 fbdb 	bl	8005ee0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800572a:	4b1d      	ldr	r3, [pc, #116]	; (80057a0 <xTaskResumeAll+0x134>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d010      	beq.n	8005758 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005736:	f000 f875 	bl	8005824 <xTaskIncrementTick>
 800573a:	4603      	mov	r3, r0
 800573c:	2b00      	cmp	r3, #0
 800573e:	d002      	beq.n	8005746 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005740:	4b16      	ldr	r3, [pc, #88]	; (800579c <xTaskResumeAll+0x130>)
 8005742:	2201      	movs	r2, #1
 8005744:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	3b01      	subs	r3, #1
 800574a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2b00      	cmp	r3, #0
 8005750:	d1f1      	bne.n	8005736 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005752:	4b13      	ldr	r3, [pc, #76]	; (80057a0 <xTaskResumeAll+0x134>)
 8005754:	2200      	movs	r2, #0
 8005756:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005758:	4b10      	ldr	r3, [pc, #64]	; (800579c <xTaskResumeAll+0x130>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d009      	beq.n	8005774 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005760:	2301      	movs	r3, #1
 8005762:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005764:	4b0f      	ldr	r3, [pc, #60]	; (80057a4 <xTaskResumeAll+0x138>)
 8005766:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800576a:	601a      	str	r2, [r3, #0]
 800576c:	f3bf 8f4f 	dsb	sy
 8005770:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005774:	f001 fb4e 	bl	8006e14 <vPortExitCritical>

	return xAlreadyYielded;
 8005778:	68bb      	ldr	r3, [r7, #8]
}
 800577a:	4618      	mov	r0, r3
 800577c:	3710      	adds	r7, #16
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	20001110 	.word	0x20001110
 8005788:	200010e8 	.word	0x200010e8
 800578c:	200010a8 	.word	0x200010a8
 8005790:	200010f0 	.word	0x200010f0
 8005794:	20000c18 	.word	0x20000c18
 8005798:	20000c14 	.word	0x20000c14
 800579c:	200010fc 	.word	0x200010fc
 80057a0:	200010f8 	.word	0x200010f8
 80057a4:	e000ed04 	.word	0xe000ed04

080057a8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80057ae:	4b05      	ldr	r3, [pc, #20]	; (80057c4 <xTaskGetTickCount+0x1c>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80057b4:	687b      	ldr	r3, [r7, #4]
}
 80057b6:	4618      	mov	r0, r3
 80057b8:	370c      	adds	r7, #12
 80057ba:	46bd      	mov	sp, r7
 80057bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c0:	4770      	bx	lr
 80057c2:	bf00      	nop
 80057c4:	200010ec 	.word	0x200010ec

080057c8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80057ce:	f001 fbd3 	bl	8006f78 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80057d2:	2300      	movs	r3, #0
 80057d4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80057d6:	4b04      	ldr	r3, [pc, #16]	; (80057e8 <xTaskGetTickCountFromISR+0x20>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80057dc:	683b      	ldr	r3, [r7, #0]
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3708      	adds	r7, #8
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	200010ec 	.word	0x200010ec

080057ec <xTaskGetIdleTaskHandle>:
/*----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetIdleTaskHandle == 1 )

	TaskHandle_t xTaskGetIdleTaskHandle( void )
	{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
		/* If xTaskGetIdleTaskHandle() is called before the scheduler has been
		started, then xIdleTaskHandle will be NULL. */
		configASSERT( ( xIdleTaskHandle != NULL ) );
 80057f2:	4b0b      	ldr	r3, [pc, #44]	; (8005820 <xTaskGetIdleTaskHandle+0x34>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d10a      	bne.n	8005810 <xTaskGetIdleTaskHandle+0x24>
	__asm volatile
 80057fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057fe:	f383 8811 	msr	BASEPRI, r3
 8005802:	f3bf 8f6f 	isb	sy
 8005806:	f3bf 8f4f 	dsb	sy
 800580a:	607b      	str	r3, [r7, #4]
}
 800580c:	bf00      	nop
 800580e:	e7fe      	b.n	800580e <xTaskGetIdleTaskHandle+0x22>
		return xIdleTaskHandle;
 8005810:	4b03      	ldr	r3, [pc, #12]	; (8005820 <xTaskGetIdleTaskHandle+0x34>)
 8005812:	681b      	ldr	r3, [r3, #0]
	}
 8005814:	4618      	mov	r0, r3
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr
 8005820:	2000110c 	.word	0x2000110c

08005824 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b086      	sub	sp, #24
 8005828:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800582a:	2300      	movs	r3, #0
 800582c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800582e:	4b4c      	ldr	r3, [pc, #304]	; (8005960 <xTaskIncrementTick+0x13c>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2b00      	cmp	r3, #0
 8005834:	f040 8087 	bne.w	8005946 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005838:	4b4a      	ldr	r3, [pc, #296]	; (8005964 <xTaskIncrementTick+0x140>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	3301      	adds	r3, #1
 800583e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005840:	4a48      	ldr	r2, [pc, #288]	; (8005964 <xTaskIncrementTick+0x140>)
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d120      	bne.n	800588e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800584c:	4b46      	ldr	r3, [pc, #280]	; (8005968 <xTaskIncrementTick+0x144>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d00a      	beq.n	800586c <xTaskIncrementTick+0x48>
	__asm volatile
 8005856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585a:	f383 8811 	msr	BASEPRI, r3
 800585e:	f3bf 8f6f 	isb	sy
 8005862:	f3bf 8f4f 	dsb	sy
 8005866:	603b      	str	r3, [r7, #0]
}
 8005868:	bf00      	nop
 800586a:	e7fe      	b.n	800586a <xTaskIncrementTick+0x46>
 800586c:	4b3e      	ldr	r3, [pc, #248]	; (8005968 <xTaskIncrementTick+0x144>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	60fb      	str	r3, [r7, #12]
 8005872:	4b3e      	ldr	r3, [pc, #248]	; (800596c <xTaskIncrementTick+0x148>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a3c      	ldr	r2, [pc, #240]	; (8005968 <xTaskIncrementTick+0x144>)
 8005878:	6013      	str	r3, [r2, #0]
 800587a:	4a3c      	ldr	r2, [pc, #240]	; (800596c <xTaskIncrementTick+0x148>)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6013      	str	r3, [r2, #0]
 8005880:	4b3b      	ldr	r3, [pc, #236]	; (8005970 <xTaskIncrementTick+0x14c>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	3301      	adds	r3, #1
 8005886:	4a3a      	ldr	r2, [pc, #232]	; (8005970 <xTaskIncrementTick+0x14c>)
 8005888:	6013      	str	r3, [r2, #0]
 800588a:	f000 fb29 	bl	8005ee0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800588e:	4b39      	ldr	r3, [pc, #228]	; (8005974 <xTaskIncrementTick+0x150>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	693a      	ldr	r2, [r7, #16]
 8005894:	429a      	cmp	r2, r3
 8005896:	d349      	bcc.n	800592c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005898:	4b33      	ldr	r3, [pc, #204]	; (8005968 <xTaskIncrementTick+0x144>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d104      	bne.n	80058ac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058a2:	4b34      	ldr	r3, [pc, #208]	; (8005974 <xTaskIncrementTick+0x150>)
 80058a4:	f04f 32ff 	mov.w	r2, #4294967295
 80058a8:	601a      	str	r2, [r3, #0]
					break;
 80058aa:	e03f      	b.n	800592c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058ac:	4b2e      	ldr	r3, [pc, #184]	; (8005968 <xTaskIncrementTick+0x144>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80058bc:	693a      	ldr	r2, [r7, #16]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	429a      	cmp	r2, r3
 80058c2:	d203      	bcs.n	80058cc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80058c4:	4a2b      	ldr	r2, [pc, #172]	; (8005974 <xTaskIncrementTick+0x150>)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80058ca:	e02f      	b.n	800592c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	3304      	adds	r3, #4
 80058d0:	4618      	mov	r0, r3
 80058d2:	f7fe fb65 	bl	8003fa0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d004      	beq.n	80058e8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	3318      	adds	r3, #24
 80058e2:	4618      	mov	r0, r3
 80058e4:	f7fe fb5c 	bl	8003fa0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058ec:	4b22      	ldr	r3, [pc, #136]	; (8005978 <xTaskIncrementTick+0x154>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d903      	bls.n	80058fc <xTaskIncrementTick+0xd8>
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058f8:	4a1f      	ldr	r2, [pc, #124]	; (8005978 <xTaskIncrementTick+0x154>)
 80058fa:	6013      	str	r3, [r2, #0]
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005900:	4613      	mov	r3, r2
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	4413      	add	r3, r2
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	4a1c      	ldr	r2, [pc, #112]	; (800597c <xTaskIncrementTick+0x158>)
 800590a:	441a      	add	r2, r3
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	3304      	adds	r3, #4
 8005910:	4619      	mov	r1, r3
 8005912:	4610      	mov	r0, r2
 8005914:	f7fe fae7 	bl	8003ee6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800591c:	4b18      	ldr	r3, [pc, #96]	; (8005980 <xTaskIncrementTick+0x15c>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005922:	429a      	cmp	r2, r3
 8005924:	d3b8      	bcc.n	8005898 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005926:	2301      	movs	r3, #1
 8005928:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800592a:	e7b5      	b.n	8005898 <xTaskIncrementTick+0x74>

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 800592c:	4b15      	ldr	r3, [pc, #84]	; (8005984 <xTaskIncrementTick+0x160>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d101      	bne.n	8005938 <xTaskIncrementTick+0x114>
			{
				vApplicationTickHook();
 8005934:	f7fc f8ac 	bl	8001a90 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005938:	4b13      	ldr	r3, [pc, #76]	; (8005988 <xTaskIncrementTick+0x164>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d009      	beq.n	8005954 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 8005940:	2301      	movs	r3, #1
 8005942:	617b      	str	r3, [r7, #20]
 8005944:	e006      	b.n	8005954 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005946:	4b0f      	ldr	r3, [pc, #60]	; (8005984 <xTaskIncrementTick+0x160>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	3301      	adds	r3, #1
 800594c:	4a0d      	ldr	r2, [pc, #52]	; (8005984 <xTaskIncrementTick+0x160>)
 800594e:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8005950:	f7fc f89e 	bl	8001a90 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8005954:	697b      	ldr	r3, [r7, #20]
}
 8005956:	4618      	mov	r0, r3
 8005958:	3718      	adds	r7, #24
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	20001110 	.word	0x20001110
 8005964:	200010ec 	.word	0x200010ec
 8005968:	200010a0 	.word	0x200010a0
 800596c:	200010a4 	.word	0x200010a4
 8005970:	20001100 	.word	0x20001100
 8005974:	20001108 	.word	0x20001108
 8005978:	200010f0 	.word	0x200010f0
 800597c:	20000c18 	.word	0x20000c18
 8005980:	20000c14 	.word	0x20000c14
 8005984:	200010f8 	.word	0x200010f8
 8005988:	200010fc 	.word	0x200010fc

0800598c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800598c:	b480      	push	{r7}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005992:	4b2a      	ldr	r3, [pc, #168]	; (8005a3c <vTaskSwitchContext+0xb0>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d003      	beq.n	80059a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800599a:	4b29      	ldr	r3, [pc, #164]	; (8005a40 <vTaskSwitchContext+0xb4>)
 800599c:	2201      	movs	r2, #1
 800599e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80059a0:	e046      	b.n	8005a30 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80059a2:	4b27      	ldr	r3, [pc, #156]	; (8005a40 <vTaskSwitchContext+0xb4>)
 80059a4:	2200      	movs	r2, #0
 80059a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059a8:	4b26      	ldr	r3, [pc, #152]	; (8005a44 <vTaskSwitchContext+0xb8>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	60fb      	str	r3, [r7, #12]
 80059ae:	e010      	b.n	80059d2 <vTaskSwitchContext+0x46>
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d10a      	bne.n	80059cc <vTaskSwitchContext+0x40>
	__asm volatile
 80059b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ba:	f383 8811 	msr	BASEPRI, r3
 80059be:	f3bf 8f6f 	isb	sy
 80059c2:	f3bf 8f4f 	dsb	sy
 80059c6:	607b      	str	r3, [r7, #4]
}
 80059c8:	bf00      	nop
 80059ca:	e7fe      	b.n	80059ca <vTaskSwitchContext+0x3e>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	3b01      	subs	r3, #1
 80059d0:	60fb      	str	r3, [r7, #12]
 80059d2:	491d      	ldr	r1, [pc, #116]	; (8005a48 <vTaskSwitchContext+0xbc>)
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	4613      	mov	r3, r2
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	4413      	add	r3, r2
 80059dc:	009b      	lsls	r3, r3, #2
 80059de:	440b      	add	r3, r1
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d0e4      	beq.n	80059b0 <vTaskSwitchContext+0x24>
 80059e6:	68fa      	ldr	r2, [r7, #12]
 80059e8:	4613      	mov	r3, r2
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	4413      	add	r3, r2
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	4a15      	ldr	r2, [pc, #84]	; (8005a48 <vTaskSwitchContext+0xbc>)
 80059f2:	4413      	add	r3, r2
 80059f4:	60bb      	str	r3, [r7, #8]
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	685a      	ldr	r2, [r3, #4]
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	605a      	str	r2, [r3, #4]
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	685a      	ldr	r2, [r3, #4]
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	3308      	adds	r3, #8
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d104      	bne.n	8005a16 <vTaskSwitchContext+0x8a>
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	685a      	ldr	r2, [r3, #4]
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	605a      	str	r2, [r3, #4]
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	4a0b      	ldr	r2, [pc, #44]	; (8005a4c <vTaskSwitchContext+0xc0>)
 8005a1e:	6013      	str	r3, [r2, #0]
 8005a20:	4a08      	ldr	r2, [pc, #32]	; (8005a44 <vTaskSwitchContext+0xb8>)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005a26:	4b09      	ldr	r3, [pc, #36]	; (8005a4c <vTaskSwitchContext+0xc0>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	3358      	adds	r3, #88	; 0x58
 8005a2c:	4a08      	ldr	r2, [pc, #32]	; (8005a50 <vTaskSwitchContext+0xc4>)
 8005a2e:	6013      	str	r3, [r2, #0]
}
 8005a30:	bf00      	nop
 8005a32:	3714      	adds	r7, #20
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr
 8005a3c:	20001110 	.word	0x20001110
 8005a40:	200010fc 	.word	0x200010fc
 8005a44:	200010f0 	.word	0x200010f0
 8005a48:	20000c18 	.word	0x20000c18
 8005a4c:	20000c14 	.word	0x20000c14
 8005a50:	20000068 	.word	0x20000068

08005a54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d10a      	bne.n	8005a7a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a68:	f383 8811 	msr	BASEPRI, r3
 8005a6c:	f3bf 8f6f 	isb	sy
 8005a70:	f3bf 8f4f 	dsb	sy
 8005a74:	60fb      	str	r3, [r7, #12]
}
 8005a76:	bf00      	nop
 8005a78:	e7fe      	b.n	8005a78 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005a7a:	4b07      	ldr	r3, [pc, #28]	; (8005a98 <vTaskPlaceOnEventList+0x44>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	3318      	adds	r3, #24
 8005a80:	4619      	mov	r1, r3
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f7fe fa53 	bl	8003f2e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005a88:	2101      	movs	r1, #1
 8005a8a:	6838      	ldr	r0, [r7, #0]
 8005a8c:	f000 fcc2 	bl	8006414 <prvAddCurrentTaskToDelayedList>
}
 8005a90:	bf00      	nop
 8005a92:	3710      	adds	r7, #16
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	20000c14 	.word	0x20000c14

08005a9c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b086      	sub	sp, #24
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d10a      	bne.n	8005ac4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab2:	f383 8811 	msr	BASEPRI, r3
 8005ab6:	f3bf 8f6f 	isb	sy
 8005aba:	f3bf 8f4f 	dsb	sy
 8005abe:	617b      	str	r3, [r7, #20]
}
 8005ac0:	bf00      	nop
 8005ac2:	e7fe      	b.n	8005ac2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005ac4:	4b0a      	ldr	r3, [pc, #40]	; (8005af0 <vTaskPlaceOnEventListRestricted+0x54>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	3318      	adds	r3, #24
 8005aca:	4619      	mov	r1, r3
 8005acc:	68f8      	ldr	r0, [r7, #12]
 8005ace:	f7fe fa0a 	bl	8003ee6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d002      	beq.n	8005ade <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005ad8:	f04f 33ff 	mov.w	r3, #4294967295
 8005adc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005ade:	6879      	ldr	r1, [r7, #4]
 8005ae0:	68b8      	ldr	r0, [r7, #8]
 8005ae2:	f000 fc97 	bl	8006414 <prvAddCurrentTaskToDelayedList>
	}
 8005ae6:	bf00      	nop
 8005ae8:	3718      	adds	r7, #24
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	20000c14 	.word	0x20000c14

08005af4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b086      	sub	sp, #24
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d10a      	bne.n	8005b20 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b0e:	f383 8811 	msr	BASEPRI, r3
 8005b12:	f3bf 8f6f 	isb	sy
 8005b16:	f3bf 8f4f 	dsb	sy
 8005b1a:	60fb      	str	r3, [r7, #12]
}
 8005b1c:	bf00      	nop
 8005b1e:	e7fe      	b.n	8005b1e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	3318      	adds	r3, #24
 8005b24:	4618      	mov	r0, r3
 8005b26:	f7fe fa3b 	bl	8003fa0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b2a:	4b1e      	ldr	r3, [pc, #120]	; (8005ba4 <xTaskRemoveFromEventList+0xb0>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d11d      	bne.n	8005b6e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	3304      	adds	r3, #4
 8005b36:	4618      	mov	r0, r3
 8005b38:	f7fe fa32 	bl	8003fa0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b40:	4b19      	ldr	r3, [pc, #100]	; (8005ba8 <xTaskRemoveFromEventList+0xb4>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d903      	bls.n	8005b50 <xTaskRemoveFromEventList+0x5c>
 8005b48:	693b      	ldr	r3, [r7, #16]
 8005b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b4c:	4a16      	ldr	r2, [pc, #88]	; (8005ba8 <xTaskRemoveFromEventList+0xb4>)
 8005b4e:	6013      	str	r3, [r2, #0]
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b54:	4613      	mov	r3, r2
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	4413      	add	r3, r2
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	4a13      	ldr	r2, [pc, #76]	; (8005bac <xTaskRemoveFromEventList+0xb8>)
 8005b5e:	441a      	add	r2, r3
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	3304      	adds	r3, #4
 8005b64:	4619      	mov	r1, r3
 8005b66:	4610      	mov	r0, r2
 8005b68:	f7fe f9bd 	bl	8003ee6 <vListInsertEnd>
 8005b6c:	e005      	b.n	8005b7a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	3318      	adds	r3, #24
 8005b72:	4619      	mov	r1, r3
 8005b74:	480e      	ldr	r0, [pc, #56]	; (8005bb0 <xTaskRemoveFromEventList+0xbc>)
 8005b76:	f7fe f9b6 	bl	8003ee6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b7e:	4b0d      	ldr	r3, [pc, #52]	; (8005bb4 <xTaskRemoveFromEventList+0xc0>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d905      	bls.n	8005b94 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005b8c:	4b0a      	ldr	r3, [pc, #40]	; (8005bb8 <xTaskRemoveFromEventList+0xc4>)
 8005b8e:	2201      	movs	r2, #1
 8005b90:	601a      	str	r2, [r3, #0]
 8005b92:	e001      	b.n	8005b98 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005b94:	2300      	movs	r3, #0
 8005b96:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005b98:	697b      	ldr	r3, [r7, #20]
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3718      	adds	r7, #24
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	20001110 	.word	0x20001110
 8005ba8:	200010f0 	.word	0x200010f0
 8005bac:	20000c18 	.word	0x20000c18
 8005bb0:	200010a8 	.word	0x200010a8
 8005bb4:	20000c14 	.word	0x20000c14
 8005bb8:	200010fc 	.word	0x200010fc

08005bbc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005bc4:	4b06      	ldr	r3, [pc, #24]	; (8005be0 <vTaskInternalSetTimeOutState+0x24>)
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005bcc:	4b05      	ldr	r3, [pc, #20]	; (8005be4 <vTaskInternalSetTimeOutState+0x28>)
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	605a      	str	r2, [r3, #4]
}
 8005bd4:	bf00      	nop
 8005bd6:	370c      	adds	r7, #12
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bde:	4770      	bx	lr
 8005be0:	20001100 	.word	0x20001100
 8005be4:	200010ec 	.word	0x200010ec

08005be8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b088      	sub	sp, #32
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d10a      	bne.n	8005c0e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bfc:	f383 8811 	msr	BASEPRI, r3
 8005c00:	f3bf 8f6f 	isb	sy
 8005c04:	f3bf 8f4f 	dsb	sy
 8005c08:	613b      	str	r3, [r7, #16]
}
 8005c0a:	bf00      	nop
 8005c0c:	e7fe      	b.n	8005c0c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d10a      	bne.n	8005c2a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c18:	f383 8811 	msr	BASEPRI, r3
 8005c1c:	f3bf 8f6f 	isb	sy
 8005c20:	f3bf 8f4f 	dsb	sy
 8005c24:	60fb      	str	r3, [r7, #12]
}
 8005c26:	bf00      	nop
 8005c28:	e7fe      	b.n	8005c28 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005c2a:	f001 f8c3 	bl	8006db4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005c2e:	4b1d      	ldr	r3, [pc, #116]	; (8005ca4 <xTaskCheckForTimeOut+0xbc>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	69ba      	ldr	r2, [r7, #24]
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c46:	d102      	bne.n	8005c4e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	61fb      	str	r3, [r7, #28]
 8005c4c:	e023      	b.n	8005c96 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	4b15      	ldr	r3, [pc, #84]	; (8005ca8 <xTaskCheckForTimeOut+0xc0>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d007      	beq.n	8005c6a <xTaskCheckForTimeOut+0x82>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	69ba      	ldr	r2, [r7, #24]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d302      	bcc.n	8005c6a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005c64:	2301      	movs	r3, #1
 8005c66:	61fb      	str	r3, [r7, #28]
 8005c68:	e015      	b.n	8005c96 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	697a      	ldr	r2, [r7, #20]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d20b      	bcs.n	8005c8c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	1ad2      	subs	r2, r2, r3
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f7ff ff9b 	bl	8005bbc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005c86:	2300      	movs	r3, #0
 8005c88:	61fb      	str	r3, [r7, #28]
 8005c8a:	e004      	b.n	8005c96 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005c92:	2301      	movs	r3, #1
 8005c94:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005c96:	f001 f8bd 	bl	8006e14 <vPortExitCritical>

	return xReturn;
 8005c9a:	69fb      	ldr	r3, [r7, #28]
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3720      	adds	r7, #32
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	200010ec 	.word	0x200010ec
 8005ca8:	20001100 	.word	0x20001100

08005cac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005cac:	b480      	push	{r7}
 8005cae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005cb0:	4b03      	ldr	r3, [pc, #12]	; (8005cc0 <vTaskMissedYield+0x14>)
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	601a      	str	r2, [r3, #0]
}
 8005cb6:	bf00      	nop
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr
 8005cc0:	200010fc 	.word	0x200010fc

08005cc4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b082      	sub	sp, #8
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005ccc:	f000 f8a6 	bl	8005e1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005cd0:	4b06      	ldr	r3, [pc, #24]	; (8005cec <prvIdleTask+0x28>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d9f9      	bls.n	8005ccc <prvIdleTask+0x8>
			{
				taskYIELD();
 8005cd8:	4b05      	ldr	r3, [pc, #20]	; (8005cf0 <prvIdleTask+0x2c>)
 8005cda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cde:	601a      	str	r2, [r3, #0]
 8005ce0:	f3bf 8f4f 	dsb	sy
 8005ce4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005ce8:	e7f0      	b.n	8005ccc <prvIdleTask+0x8>
 8005cea:	bf00      	nop
 8005cec:	20000c18 	.word	0x20000c18
 8005cf0:	e000ed04 	.word	0xe000ed04

08005cf4 <vTaskSetThreadLocalStoragePointer>:
/*-----------------------------------------------------------*/

#if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )

	void vTaskSetThreadLocalStoragePointer( TaskHandle_t xTaskToSet, BaseType_t xIndex, void *pvValue )
	{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b087      	sub	sp, #28
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	607a      	str	r2, [r7, #4]
	TCB_t *pxTCB;

		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	dc1c      	bgt.n	8005d40 <vTaskSetThreadLocalStoragePointer+0x4c>
		{
			pxTCB = prvGetTCBFromHandle( xTaskToSet );
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d102      	bne.n	8005d12 <vTaskSetThreadLocalStoragePointer+0x1e>
 8005d0c:	4b0f      	ldr	r3, [pc, #60]	; (8005d4c <vTaskSetThreadLocalStoragePointer+0x58>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	e000      	b.n	8005d14 <vTaskSetThreadLocalStoragePointer+0x20>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	617b      	str	r3, [r7, #20]
			configASSERT( pxTCB != NULL );
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d10a      	bne.n	8005d32 <vTaskSetThreadLocalStoragePointer+0x3e>
	__asm volatile
 8005d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d20:	f383 8811 	msr	BASEPRI, r3
 8005d24:	f3bf 8f6f 	isb	sy
 8005d28:	f3bf 8f4f 	dsb	sy
 8005d2c:	613b      	str	r3, [r7, #16]
}
 8005d2e:	bf00      	nop
 8005d30:	e7fe      	b.n	8005d30 <vTaskSetThreadLocalStoragePointer+0x3c>
			pxTCB->pvThreadLocalStoragePointers[ xIndex ] = pvValue;
 8005d32:	697a      	ldr	r2, [r7, #20]
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	3314      	adds	r3, #20
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	4413      	add	r3, r2
 8005d3c:	687a      	ldr	r2, [r7, #4]
 8005d3e:	605a      	str	r2, [r3, #4]
		}
	}
 8005d40:	bf00      	nop
 8005d42:	371c      	adds	r7, #28
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr
 8005d4c:	20000c14 	.word	0x20000c14

08005d50 <pvTaskGetThreadLocalStoragePointer>:
/*-----------------------------------------------------------*/

#if ( configNUM_THREAD_LOCAL_STORAGE_POINTERS != 0 )

	void *pvTaskGetThreadLocalStoragePointer( TaskHandle_t xTaskToQuery, BaseType_t xIndex )
	{
 8005d50:	b480      	push	{r7}
 8005d52:	b085      	sub	sp, #20
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
	void *pvReturn = NULL;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	60fb      	str	r3, [r7, #12]
	TCB_t *pxTCB;

		if( xIndex < configNUM_THREAD_LOCAL_STORAGE_POINTERS )
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	dc0f      	bgt.n	8005d84 <pvTaskGetThreadLocalStoragePointer+0x34>
		{
			pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d102      	bne.n	8005d70 <pvTaskGetThreadLocalStoragePointer+0x20>
 8005d6a:	4b0b      	ldr	r3, [pc, #44]	; (8005d98 <pvTaskGetThreadLocalStoragePointer+0x48>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	e000      	b.n	8005d72 <pvTaskGetThreadLocalStoragePointer+0x22>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	60bb      	str	r3, [r7, #8]
			pvReturn = pxTCB->pvThreadLocalStoragePointers[ xIndex ];
 8005d74:	68ba      	ldr	r2, [r7, #8]
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	3314      	adds	r3, #20
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	4413      	add	r3, r2
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	60fb      	str	r3, [r7, #12]
 8005d82:	e001      	b.n	8005d88 <pvTaskGetThreadLocalStoragePointer+0x38>
		}
		else
		{
			pvReturn = NULL;
 8005d84:	2300      	movs	r3, #0
 8005d86:	60fb      	str	r3, [r7, #12]
		}

		return pvReturn;
 8005d88:	68fb      	ldr	r3, [r7, #12]
	}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3714      	adds	r7, #20
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
 8005d96:	bf00      	nop
 8005d98:	20000c14 	.word	0x20000c14

08005d9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b082      	sub	sp, #8
 8005da0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005da2:	2300      	movs	r3, #0
 8005da4:	607b      	str	r3, [r7, #4]
 8005da6:	e00c      	b.n	8005dc2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	4613      	mov	r3, r2
 8005dac:	009b      	lsls	r3, r3, #2
 8005dae:	4413      	add	r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	4a12      	ldr	r2, [pc, #72]	; (8005dfc <prvInitialiseTaskLists+0x60>)
 8005db4:	4413      	add	r3, r2
 8005db6:	4618      	mov	r0, r3
 8005db8:	f7fe f868 	bl	8003e8c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	607b      	str	r3, [r7, #4]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2b37      	cmp	r3, #55	; 0x37
 8005dc6:	d9ef      	bls.n	8005da8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005dc8:	480d      	ldr	r0, [pc, #52]	; (8005e00 <prvInitialiseTaskLists+0x64>)
 8005dca:	f7fe f85f 	bl	8003e8c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005dce:	480d      	ldr	r0, [pc, #52]	; (8005e04 <prvInitialiseTaskLists+0x68>)
 8005dd0:	f7fe f85c 	bl	8003e8c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005dd4:	480c      	ldr	r0, [pc, #48]	; (8005e08 <prvInitialiseTaskLists+0x6c>)
 8005dd6:	f7fe f859 	bl	8003e8c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005dda:	480c      	ldr	r0, [pc, #48]	; (8005e0c <prvInitialiseTaskLists+0x70>)
 8005ddc:	f7fe f856 	bl	8003e8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005de0:	480b      	ldr	r0, [pc, #44]	; (8005e10 <prvInitialiseTaskLists+0x74>)
 8005de2:	f7fe f853 	bl	8003e8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005de6:	4b0b      	ldr	r3, [pc, #44]	; (8005e14 <prvInitialiseTaskLists+0x78>)
 8005de8:	4a05      	ldr	r2, [pc, #20]	; (8005e00 <prvInitialiseTaskLists+0x64>)
 8005dea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005dec:	4b0a      	ldr	r3, [pc, #40]	; (8005e18 <prvInitialiseTaskLists+0x7c>)
 8005dee:	4a05      	ldr	r2, [pc, #20]	; (8005e04 <prvInitialiseTaskLists+0x68>)
 8005df0:	601a      	str	r2, [r3, #0]
}
 8005df2:	bf00      	nop
 8005df4:	3708      	adds	r7, #8
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	20000c18 	.word	0x20000c18
 8005e00:	20001078 	.word	0x20001078
 8005e04:	2000108c 	.word	0x2000108c
 8005e08:	200010a8 	.word	0x200010a8
 8005e0c:	200010bc 	.word	0x200010bc
 8005e10:	200010d4 	.word	0x200010d4
 8005e14:	200010a0 	.word	0x200010a0
 8005e18:	200010a4 	.word	0x200010a4

08005e1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b082      	sub	sp, #8
 8005e20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e22:	e019      	b.n	8005e58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005e24:	f000 ffc6 	bl	8006db4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e28:	4b10      	ldr	r3, [pc, #64]	; (8005e6c <prvCheckTasksWaitingTermination+0x50>)
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	3304      	adds	r3, #4
 8005e34:	4618      	mov	r0, r3
 8005e36:	f7fe f8b3 	bl	8003fa0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005e3a:	4b0d      	ldr	r3, [pc, #52]	; (8005e70 <prvCheckTasksWaitingTermination+0x54>)
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	4a0b      	ldr	r2, [pc, #44]	; (8005e70 <prvCheckTasksWaitingTermination+0x54>)
 8005e42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005e44:	4b0b      	ldr	r3, [pc, #44]	; (8005e74 <prvCheckTasksWaitingTermination+0x58>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	3b01      	subs	r3, #1
 8005e4a:	4a0a      	ldr	r2, [pc, #40]	; (8005e74 <prvCheckTasksWaitingTermination+0x58>)
 8005e4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005e4e:	f000 ffe1 	bl	8006e14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 f810 	bl	8005e78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e58:	4b06      	ldr	r3, [pc, #24]	; (8005e74 <prvCheckTasksWaitingTermination+0x58>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d1e1      	bne.n	8005e24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005e60:	bf00      	nop
 8005e62:	bf00      	nop
 8005e64:	3708      	adds	r7, #8
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	200010bc 	.word	0x200010bc
 8005e70:	200010e8 	.word	0x200010e8
 8005e74:	200010d0 	.word	0x200010d0

08005e78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	3358      	adds	r3, #88	; 0x58
 8005e84:	4618      	mov	r0, r3
 8005e86:	f002 f92b 	bl	80080e0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d108      	bne.n	8005ea6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f001 f979 	bl	8007190 <vPortFree>
				vPortFree( pxTCB );
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f001 f976 	bl	8007190 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ea4:	e018      	b.n	8005ed8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d103      	bne.n	8005eb8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f001 f96d 	bl	8007190 <vPortFree>
	}
 8005eb6:	e00f      	b.n	8005ed8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8005ebe:	2b02      	cmp	r3, #2
 8005ec0:	d00a      	beq.n	8005ed8 <prvDeleteTCB+0x60>
	__asm volatile
 8005ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec6:	f383 8811 	msr	BASEPRI, r3
 8005eca:	f3bf 8f6f 	isb	sy
 8005ece:	f3bf 8f4f 	dsb	sy
 8005ed2:	60fb      	str	r3, [r7, #12]
}
 8005ed4:	bf00      	nop
 8005ed6:	e7fe      	b.n	8005ed6 <prvDeleteTCB+0x5e>
	}
 8005ed8:	bf00      	nop
 8005eda:	3710      	adds	r7, #16
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ee6:	4b0c      	ldr	r3, [pc, #48]	; (8005f18 <prvResetNextTaskUnblockTime+0x38>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d104      	bne.n	8005efa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005ef0:	4b0a      	ldr	r3, [pc, #40]	; (8005f1c <prvResetNextTaskUnblockTime+0x3c>)
 8005ef2:	f04f 32ff 	mov.w	r2, #4294967295
 8005ef6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005ef8:	e008      	b.n	8005f0c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005efa:	4b07      	ldr	r3, [pc, #28]	; (8005f18 <prvResetNextTaskUnblockTime+0x38>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	4a04      	ldr	r2, [pc, #16]	; (8005f1c <prvResetNextTaskUnblockTime+0x3c>)
 8005f0a:	6013      	str	r3, [r2, #0]
}
 8005f0c:	bf00      	nop
 8005f0e:	370c      	adds	r7, #12
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr
 8005f18:	200010a0 	.word	0x200010a0
 8005f1c:	20001108 	.word	0x20001108

08005f20 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8005f26:	4b05      	ldr	r3, [pc, #20]	; (8005f3c <xTaskGetCurrentTaskHandle+0x1c>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	607b      	str	r3, [r7, #4]

		return xReturn;
 8005f2c:	687b      	ldr	r3, [r7, #4]
	}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	370c      	adds	r7, #12
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	20000c14 	.word	0x20000c14

08005f40 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005f46:	4b0b      	ldr	r3, [pc, #44]	; (8005f74 <xTaskGetSchedulerState+0x34>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d102      	bne.n	8005f54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	607b      	str	r3, [r7, #4]
 8005f52:	e008      	b.n	8005f66 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f54:	4b08      	ldr	r3, [pc, #32]	; (8005f78 <xTaskGetSchedulerState+0x38>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d102      	bne.n	8005f62 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005f5c:	2302      	movs	r3, #2
 8005f5e:	607b      	str	r3, [r7, #4]
 8005f60:	e001      	b.n	8005f66 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005f62:	2300      	movs	r3, #0
 8005f64:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005f66:	687b      	ldr	r3, [r7, #4]
	}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr
 8005f74:	200010f4 	.word	0x200010f4
 8005f78:	20001110 	.word	0x20001110

08005f7c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d051      	beq.n	8006036 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f96:	4b2a      	ldr	r3, [pc, #168]	; (8006040 <xTaskPriorityInherit+0xc4>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f9c:	429a      	cmp	r2, r3
 8005f9e:	d241      	bcs.n	8006024 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	699b      	ldr	r3, [r3, #24]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	db06      	blt.n	8005fb6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fa8:	4b25      	ldr	r3, [pc, #148]	; (8006040 <xTaskPriorityInherit+0xc4>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	6959      	ldr	r1, [r3, #20]
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	4413      	add	r3, r2
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	4a1f      	ldr	r2, [pc, #124]	; (8006044 <xTaskPriorityInherit+0xc8>)
 8005fc8:	4413      	add	r3, r2
 8005fca:	4299      	cmp	r1, r3
 8005fcc:	d122      	bne.n	8006014 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	3304      	adds	r3, #4
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f7fd ffe4 	bl	8003fa0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005fd8:	4b19      	ldr	r3, [pc, #100]	; (8006040 <xTaskPriorityInherit+0xc4>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fe6:	4b18      	ldr	r3, [pc, #96]	; (8006048 <xTaskPriorityInherit+0xcc>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d903      	bls.n	8005ff6 <xTaskPriorityInherit+0x7a>
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff2:	4a15      	ldr	r2, [pc, #84]	; (8006048 <xTaskPriorityInherit+0xcc>)
 8005ff4:	6013      	str	r3, [r2, #0]
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	4413      	add	r3, r2
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	4a10      	ldr	r2, [pc, #64]	; (8006044 <xTaskPriorityInherit+0xc8>)
 8006004:	441a      	add	r2, r3
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	3304      	adds	r3, #4
 800600a:	4619      	mov	r1, r3
 800600c:	4610      	mov	r0, r2
 800600e:	f7fd ff6a 	bl	8003ee6 <vListInsertEnd>
 8006012:	e004      	b.n	800601e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006014:	4b0a      	ldr	r3, [pc, #40]	; (8006040 <xTaskPriorityInherit+0xc4>)
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800601e:	2301      	movs	r3, #1
 8006020:	60fb      	str	r3, [r7, #12]
 8006022:	e008      	b.n	8006036 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006028:	4b05      	ldr	r3, [pc, #20]	; (8006040 <xTaskPriorityInherit+0xc4>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602e:	429a      	cmp	r2, r3
 8006030:	d201      	bcs.n	8006036 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006032:	2301      	movs	r3, #1
 8006034:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006036:	68fb      	ldr	r3, [r7, #12]
	}
 8006038:	4618      	mov	r0, r3
 800603a:	3710      	adds	r7, #16
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}
 8006040:	20000c14 	.word	0x20000c14
 8006044:	20000c18 	.word	0x20000c18
 8006048:	200010f0 	.word	0x200010f0

0800604c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800604c:	b580      	push	{r7, lr}
 800604e:	b086      	sub	sp, #24
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006058:	2300      	movs	r3, #0
 800605a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d056      	beq.n	8006110 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006062:	4b2e      	ldr	r3, [pc, #184]	; (800611c <xTaskPriorityDisinherit+0xd0>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	693a      	ldr	r2, [r7, #16]
 8006068:	429a      	cmp	r2, r3
 800606a:	d00a      	beq.n	8006082 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800606c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006070:	f383 8811 	msr	BASEPRI, r3
 8006074:	f3bf 8f6f 	isb	sy
 8006078:	f3bf 8f4f 	dsb	sy
 800607c:	60fb      	str	r3, [r7, #12]
}
 800607e:	bf00      	nop
 8006080:	e7fe      	b.n	8006080 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006086:	2b00      	cmp	r3, #0
 8006088:	d10a      	bne.n	80060a0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800608a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800608e:	f383 8811 	msr	BASEPRI, r3
 8006092:	f3bf 8f6f 	isb	sy
 8006096:	f3bf 8f4f 	dsb	sy
 800609a:	60bb      	str	r3, [r7, #8]
}
 800609c:	bf00      	nop
 800609e:	e7fe      	b.n	800609e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060a4:	1e5a      	subs	r2, r3, #1
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80060aa:	693b      	ldr	r3, [r7, #16]
 80060ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060b2:	429a      	cmp	r2, r3
 80060b4:	d02c      	beq.n	8006110 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d128      	bne.n	8006110 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	3304      	adds	r3, #4
 80060c2:	4618      	mov	r0, r3
 80060c4:	f7fd ff6c 	bl	8003fa0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060e0:	4b0f      	ldr	r3, [pc, #60]	; (8006120 <xTaskPriorityDisinherit+0xd4>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d903      	bls.n	80060f0 <xTaskPriorityDisinherit+0xa4>
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ec:	4a0c      	ldr	r2, [pc, #48]	; (8006120 <xTaskPriorityDisinherit+0xd4>)
 80060ee:	6013      	str	r3, [r2, #0]
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060f4:	4613      	mov	r3, r2
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	4413      	add	r3, r2
 80060fa:	009b      	lsls	r3, r3, #2
 80060fc:	4a09      	ldr	r2, [pc, #36]	; (8006124 <xTaskPriorityDisinherit+0xd8>)
 80060fe:	441a      	add	r2, r3
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	3304      	adds	r3, #4
 8006104:	4619      	mov	r1, r3
 8006106:	4610      	mov	r0, r2
 8006108:	f7fd feed 	bl	8003ee6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800610c:	2301      	movs	r3, #1
 800610e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006110:	697b      	ldr	r3, [r7, #20]
	}
 8006112:	4618      	mov	r0, r3
 8006114:	3718      	adds	r7, #24
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	20000c14 	.word	0x20000c14
 8006120:	200010f0 	.word	0x200010f0
 8006124:	20000c18 	.word	0x20000c18

08006128 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006128:	b580      	push	{r7, lr}
 800612a:	b088      	sub	sp, #32
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006136:	2301      	movs	r3, #1
 8006138:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d06a      	beq.n	8006216 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006144:	2b00      	cmp	r3, #0
 8006146:	d10a      	bne.n	800615e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614c:	f383 8811 	msr	BASEPRI, r3
 8006150:	f3bf 8f6f 	isb	sy
 8006154:	f3bf 8f4f 	dsb	sy
 8006158:	60fb      	str	r3, [r7, #12]
}
 800615a:	bf00      	nop
 800615c:	e7fe      	b.n	800615c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800615e:	69bb      	ldr	r3, [r7, #24]
 8006160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006162:	683a      	ldr	r2, [r7, #0]
 8006164:	429a      	cmp	r2, r3
 8006166:	d902      	bls.n	800616e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	61fb      	str	r3, [r7, #28]
 800616c:	e002      	b.n	8006174 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006172:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006174:	69bb      	ldr	r3, [r7, #24]
 8006176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006178:	69fa      	ldr	r2, [r7, #28]
 800617a:	429a      	cmp	r2, r3
 800617c:	d04b      	beq.n	8006216 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	429a      	cmp	r2, r3
 8006186:	d146      	bne.n	8006216 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006188:	4b25      	ldr	r3, [pc, #148]	; (8006220 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	69ba      	ldr	r2, [r7, #24]
 800618e:	429a      	cmp	r2, r3
 8006190:	d10a      	bne.n	80061a8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006196:	f383 8811 	msr	BASEPRI, r3
 800619a:	f3bf 8f6f 	isb	sy
 800619e:	f3bf 8f4f 	dsb	sy
 80061a2:	60bb      	str	r3, [r7, #8]
}
 80061a4:	bf00      	nop
 80061a6:	e7fe      	b.n	80061a6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ac:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	69fa      	ldr	r2, [r7, #28]
 80061b2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	699b      	ldr	r3, [r3, #24]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	db04      	blt.n	80061c6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80061c6:	69bb      	ldr	r3, [r7, #24]
 80061c8:	6959      	ldr	r1, [r3, #20]
 80061ca:	693a      	ldr	r2, [r7, #16]
 80061cc:	4613      	mov	r3, r2
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	4413      	add	r3, r2
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	4a13      	ldr	r2, [pc, #76]	; (8006224 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80061d6:	4413      	add	r3, r2
 80061d8:	4299      	cmp	r1, r3
 80061da:	d11c      	bne.n	8006216 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	3304      	adds	r3, #4
 80061e0:	4618      	mov	r0, r3
 80061e2:	f7fd fedd 	bl	8003fa0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ea:	4b0f      	ldr	r3, [pc, #60]	; (8006228 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d903      	bls.n	80061fa <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f6:	4a0c      	ldr	r2, [pc, #48]	; (8006228 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80061f8:	6013      	str	r3, [r2, #0]
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061fe:	4613      	mov	r3, r2
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	4413      	add	r3, r2
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	4a07      	ldr	r2, [pc, #28]	; (8006224 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006208:	441a      	add	r2, r3
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	3304      	adds	r3, #4
 800620e:	4619      	mov	r1, r3
 8006210:	4610      	mov	r0, r2
 8006212:	f7fd fe68 	bl	8003ee6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006216:	bf00      	nop
 8006218:	3720      	adds	r7, #32
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	20000c14 	.word	0x20000c14
 8006224:	20000c18 	.word	0x20000c18
 8006228:	200010f0 	.word	0x200010f0

0800622c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800622c:	b480      	push	{r7}
 800622e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006230:	4b07      	ldr	r3, [pc, #28]	; (8006250 <pvTaskIncrementMutexHeldCount+0x24>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d004      	beq.n	8006242 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006238:	4b05      	ldr	r3, [pc, #20]	; (8006250 <pvTaskIncrementMutexHeldCount+0x24>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800623e:	3201      	adds	r2, #1
 8006240:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8006242:	4b03      	ldr	r3, [pc, #12]	; (8006250 <pvTaskIncrementMutexHeldCount+0x24>)
 8006244:	681b      	ldr	r3, [r3, #0]
	}
 8006246:	4618      	mov	r0, r3
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr
 8006250:	20000c14 	.word	0x20000c14

08006254 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800625e:	f000 fda9 	bl	8006db4 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8006262:	4b20      	ldr	r3, [pc, #128]	; (80062e4 <ulTaskNotifyTake+0x90>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800626a:	2b00      	cmp	r3, #0
 800626c:	d113      	bne.n	8006296 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800626e:	4b1d      	ldr	r3, [pc, #116]	; (80062e4 <ulTaskNotifyTake+0x90>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	2201      	movs	r2, #1
 8006274:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8

				if( xTicksToWait > ( TickType_t ) 0 )
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00b      	beq.n	8006296 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800627e:	2101      	movs	r1, #1
 8006280:	6838      	ldr	r0, [r7, #0]
 8006282:	f000 f8c7 	bl	8006414 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8006286:	4b18      	ldr	r3, [pc, #96]	; (80062e8 <ulTaskNotifyTake+0x94>)
 8006288:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800628c:	601a      	str	r2, [r3, #0]
 800628e:	f3bf 8f4f 	dsb	sy
 8006292:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006296:	f000 fdbd 	bl	8006e14 <vPortExitCritical>

		taskENTER_CRITICAL();
 800629a:	f000 fd8b 	bl	8006db4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800629e:	4b11      	ldr	r3, [pc, #68]	; (80062e4 <ulTaskNotifyTake+0x90>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80062a6:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00e      	beq.n	80062cc <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d005      	beq.n	80062c0 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80062b4:	4b0b      	ldr	r3, [pc, #44]	; (80062e4 <ulTaskNotifyTake+0x90>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2200      	movs	r2, #0
 80062ba:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
 80062be:	e005      	b.n	80062cc <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80062c0:	4b08      	ldr	r3, [pc, #32]	; (80062e4 <ulTaskNotifyTake+0x90>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	3a01      	subs	r2, #1
 80062c8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80062cc:	4b05      	ldr	r3, [pc, #20]	; (80062e4 <ulTaskNotifyTake+0x90>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2200      	movs	r2, #0
 80062d2:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
		}
		taskEXIT_CRITICAL();
 80062d6:	f000 fd9d 	bl	8006e14 <vPortExitCritical>

		return ulReturn;
 80062da:	68fb      	ldr	r3, [r7, #12]
	}
 80062dc:	4618      	mov	r0, r3
 80062de:	3710      	adds	r7, #16
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	20000c14 	.word	0x20000c14
 80062e8:	e000ed04 	.word	0xe000ed04

080062ec <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b08a      	sub	sp, #40	; 0x28
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d10a      	bne.n	8006312 <vTaskNotifyGiveFromISR+0x26>
	__asm volatile
 80062fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006300:	f383 8811 	msr	BASEPRI, r3
 8006304:	f3bf 8f6f 	isb	sy
 8006308:	f3bf 8f4f 	dsb	sy
 800630c:	61bb      	str	r3, [r7, #24]
}
 800630e:	bf00      	nop
 8006310:	e7fe      	b.n	8006310 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006312:	f000 fe31 	bl	8006f78 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	627b      	str	r3, [r7, #36]	; 0x24
	__asm volatile
 800631a:	f3ef 8211 	mrs	r2, BASEPRI
 800631e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006322:	f383 8811 	msr	BASEPRI, r3
 8006326:	f3bf 8f6f 	isb	sy
 800632a:	f3bf 8f4f 	dsb	sy
 800632e:	617a      	str	r2, [r7, #20]
 8006330:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006332:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006334:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006338:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 800633c:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800633e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006340:	2202      	movs	r2, #2
 8006342:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8006346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006348:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800634c:	1c5a      	adds	r2, r3, #1
 800634e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006350:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006354:	7ffb      	ldrb	r3, [r7, #31]
 8006356:	2b01      	cmp	r3, #1
 8006358:	d146      	bne.n	80063e8 <vTaskNotifyGiveFromISR+0xfc>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800635a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800635c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800635e:	2b00      	cmp	r3, #0
 8006360:	d00a      	beq.n	8006378 <vTaskNotifyGiveFromISR+0x8c>
	__asm volatile
 8006362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006366:	f383 8811 	msr	BASEPRI, r3
 800636a:	f3bf 8f6f 	isb	sy
 800636e:	f3bf 8f4f 	dsb	sy
 8006372:	60fb      	str	r3, [r7, #12]
}
 8006374:	bf00      	nop
 8006376:	e7fe      	b.n	8006376 <vTaskNotifyGiveFromISR+0x8a>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006378:	4b20      	ldr	r3, [pc, #128]	; (80063fc <vTaskNotifyGiveFromISR+0x110>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d11d      	bne.n	80063bc <vTaskNotifyGiveFromISR+0xd0>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006382:	3304      	adds	r3, #4
 8006384:	4618      	mov	r0, r3
 8006386:	f7fd fe0b 	bl	8003fa0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800638a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800638e:	4b1c      	ldr	r3, [pc, #112]	; (8006400 <vTaskNotifyGiveFromISR+0x114>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	429a      	cmp	r2, r3
 8006394:	d903      	bls.n	800639e <vTaskNotifyGiveFromISR+0xb2>
 8006396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800639a:	4a19      	ldr	r2, [pc, #100]	; (8006400 <vTaskNotifyGiveFromISR+0x114>)
 800639c:	6013      	str	r3, [r2, #0]
 800639e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063a2:	4613      	mov	r3, r2
 80063a4:	009b      	lsls	r3, r3, #2
 80063a6:	4413      	add	r3, r2
 80063a8:	009b      	lsls	r3, r3, #2
 80063aa:	4a16      	ldr	r2, [pc, #88]	; (8006404 <vTaskNotifyGiveFromISR+0x118>)
 80063ac:	441a      	add	r2, r3
 80063ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b0:	3304      	adds	r3, #4
 80063b2:	4619      	mov	r1, r3
 80063b4:	4610      	mov	r0, r2
 80063b6:	f7fd fd96 	bl	8003ee6 <vListInsertEnd>
 80063ba:	e005      	b.n	80063c8 <vTaskNotifyGiveFromISR+0xdc>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80063bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063be:	3318      	adds	r3, #24
 80063c0:	4619      	mov	r1, r3
 80063c2:	4811      	ldr	r0, [pc, #68]	; (8006408 <vTaskNotifyGiveFromISR+0x11c>)
 80063c4:	f7fd fd8f 	bl	8003ee6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80063c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063cc:	4b0f      	ldr	r3, [pc, #60]	; (800640c <vTaskNotifyGiveFromISR+0x120>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d908      	bls.n	80063e8 <vTaskNotifyGiveFromISR+0xfc>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d002      	beq.n	80063e2 <vTaskNotifyGiveFromISR+0xf6>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	2201      	movs	r2, #1
 80063e0:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80063e2:	4b0b      	ldr	r3, [pc, #44]	; (8006410 <vTaskNotifyGiveFromISR+0x124>)
 80063e4:	2201      	movs	r2, #1
 80063e6:	601a      	str	r2, [r3, #0]
 80063e8:	6a3b      	ldr	r3, [r7, #32]
 80063ea:	60bb      	str	r3, [r7, #8]
	__asm volatile
 80063ec:	68bb      	ldr	r3, [r7, #8]
 80063ee:	f383 8811 	msr	BASEPRI, r3
}
 80063f2:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 80063f4:	bf00      	nop
 80063f6:	3728      	adds	r7, #40	; 0x28
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	20001110 	.word	0x20001110
 8006400:	200010f0 	.word	0x200010f0
 8006404:	20000c18 	.word	0x20000c18
 8006408:	200010a8 	.word	0x200010a8
 800640c:	20000c14 	.word	0x20000c14
 8006410:	200010fc 	.word	0x200010fc

08006414 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b084      	sub	sp, #16
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800641e:	4b21      	ldr	r3, [pc, #132]	; (80064a4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006424:	4b20      	ldr	r3, [pc, #128]	; (80064a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	3304      	adds	r3, #4
 800642a:	4618      	mov	r0, r3
 800642c:	f7fd fdb8 	bl	8003fa0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006436:	d10a      	bne.n	800644e <prvAddCurrentTaskToDelayedList+0x3a>
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d007      	beq.n	800644e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800643e:	4b1a      	ldr	r3, [pc, #104]	; (80064a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	3304      	adds	r3, #4
 8006444:	4619      	mov	r1, r3
 8006446:	4819      	ldr	r0, [pc, #100]	; (80064ac <prvAddCurrentTaskToDelayedList+0x98>)
 8006448:	f7fd fd4d 	bl	8003ee6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800644c:	e026      	b.n	800649c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4413      	add	r3, r2
 8006454:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006456:	4b14      	ldr	r3, [pc, #80]	; (80064a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	68ba      	ldr	r2, [r7, #8]
 800645c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800645e:	68ba      	ldr	r2, [r7, #8]
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	429a      	cmp	r2, r3
 8006464:	d209      	bcs.n	800647a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006466:	4b12      	ldr	r3, [pc, #72]	; (80064b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	4b0f      	ldr	r3, [pc, #60]	; (80064a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	3304      	adds	r3, #4
 8006470:	4619      	mov	r1, r3
 8006472:	4610      	mov	r0, r2
 8006474:	f7fd fd5b 	bl	8003f2e <vListInsert>
}
 8006478:	e010      	b.n	800649c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800647a:	4b0e      	ldr	r3, [pc, #56]	; (80064b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	4b0a      	ldr	r3, [pc, #40]	; (80064a8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	3304      	adds	r3, #4
 8006484:	4619      	mov	r1, r3
 8006486:	4610      	mov	r0, r2
 8006488:	f7fd fd51 	bl	8003f2e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800648c:	4b0a      	ldr	r3, [pc, #40]	; (80064b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	68ba      	ldr	r2, [r7, #8]
 8006492:	429a      	cmp	r2, r3
 8006494:	d202      	bcs.n	800649c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006496:	4a08      	ldr	r2, [pc, #32]	; (80064b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	6013      	str	r3, [r2, #0]
}
 800649c:	bf00      	nop
 800649e:	3710      	adds	r7, #16
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	200010ec 	.word	0x200010ec
 80064a8:	20000c14 	.word	0x20000c14
 80064ac:	200010d4 	.word	0x200010d4
 80064b0:	200010a4 	.word	0x200010a4
 80064b4:	200010a0 	.word	0x200010a0
 80064b8:	20001108 	.word	0x20001108

080064bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b08a      	sub	sp, #40	; 0x28
 80064c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80064c2:	2300      	movs	r3, #0
 80064c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80064c6:	f000 fb07 	bl	8006ad8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80064ca:	4b1c      	ldr	r3, [pc, #112]	; (800653c <xTimerCreateTimerTask+0x80>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d021      	beq.n	8006516 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80064d2:	2300      	movs	r3, #0
 80064d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80064d6:	2300      	movs	r3, #0
 80064d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80064da:	1d3a      	adds	r2, r7, #4
 80064dc:	f107 0108 	add.w	r1, r7, #8
 80064e0:	f107 030c 	add.w	r3, r7, #12
 80064e4:	4618      	mov	r0, r3
 80064e6:	f7fd fcb7 	bl	8003e58 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80064ea:	6879      	ldr	r1, [r7, #4]
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	9202      	str	r2, [sp, #8]
 80064f2:	9301      	str	r3, [sp, #4]
 80064f4:	2302      	movs	r3, #2
 80064f6:	9300      	str	r3, [sp, #0]
 80064f8:	2300      	movs	r3, #0
 80064fa:	460a      	mov	r2, r1
 80064fc:	4910      	ldr	r1, [pc, #64]	; (8006540 <xTimerCreateTimerTask+0x84>)
 80064fe:	4811      	ldr	r0, [pc, #68]	; (8006544 <xTimerCreateTimerTask+0x88>)
 8006500:	f7fe fc78 	bl	8004df4 <xTaskCreateStatic>
 8006504:	4603      	mov	r3, r0
 8006506:	4a10      	ldr	r2, [pc, #64]	; (8006548 <xTimerCreateTimerTask+0x8c>)
 8006508:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800650a:	4b0f      	ldr	r3, [pc, #60]	; (8006548 <xTimerCreateTimerTask+0x8c>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d001      	beq.n	8006516 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006512:	2301      	movs	r3, #1
 8006514:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d10a      	bne.n	8006532 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800651c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006520:	f383 8811 	msr	BASEPRI, r3
 8006524:	f3bf 8f6f 	isb	sy
 8006528:	f3bf 8f4f 	dsb	sy
 800652c:	613b      	str	r3, [r7, #16]
}
 800652e:	bf00      	nop
 8006530:	e7fe      	b.n	8006530 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006532:	697b      	ldr	r3, [r7, #20]
}
 8006534:	4618      	mov	r0, r3
 8006536:	3718      	adds	r7, #24
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}
 800653c:	20001144 	.word	0x20001144
 8006540:	0800a11c 	.word	0x0800a11c
 8006544:	08006681 	.word	0x08006681
 8006548:	20001148 	.word	0x20001148

0800654c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b08a      	sub	sp, #40	; 0x28
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	607a      	str	r2, [r7, #4]
 8006558:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800655a:	2300      	movs	r3, #0
 800655c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d10a      	bne.n	800657a <xTimerGenericCommand+0x2e>
	__asm volatile
 8006564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006568:	f383 8811 	msr	BASEPRI, r3
 800656c:	f3bf 8f6f 	isb	sy
 8006570:	f3bf 8f4f 	dsb	sy
 8006574:	623b      	str	r3, [r7, #32]
}
 8006576:	bf00      	nop
 8006578:	e7fe      	b.n	8006578 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800657a:	4b1a      	ldr	r3, [pc, #104]	; (80065e4 <xTimerGenericCommand+0x98>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d02a      	beq.n	80065d8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	2b05      	cmp	r3, #5
 8006592:	dc18      	bgt.n	80065c6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006594:	f7ff fcd4 	bl	8005f40 <xTaskGetSchedulerState>
 8006598:	4603      	mov	r3, r0
 800659a:	2b02      	cmp	r3, #2
 800659c:	d109      	bne.n	80065b2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800659e:	4b11      	ldr	r3, [pc, #68]	; (80065e4 <xTimerGenericCommand+0x98>)
 80065a0:	6818      	ldr	r0, [r3, #0]
 80065a2:	f107 0110 	add.w	r1, r7, #16
 80065a6:	2300      	movs	r3, #0
 80065a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065aa:	f7fd ff17 	bl	80043dc <xQueueGenericSend>
 80065ae:	6278      	str	r0, [r7, #36]	; 0x24
 80065b0:	e012      	b.n	80065d8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80065b2:	4b0c      	ldr	r3, [pc, #48]	; (80065e4 <xTimerGenericCommand+0x98>)
 80065b4:	6818      	ldr	r0, [r3, #0]
 80065b6:	f107 0110 	add.w	r1, r7, #16
 80065ba:	2300      	movs	r3, #0
 80065bc:	2200      	movs	r2, #0
 80065be:	f7fd ff0d 	bl	80043dc <xQueueGenericSend>
 80065c2:	6278      	str	r0, [r7, #36]	; 0x24
 80065c4:	e008      	b.n	80065d8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80065c6:	4b07      	ldr	r3, [pc, #28]	; (80065e4 <xTimerGenericCommand+0x98>)
 80065c8:	6818      	ldr	r0, [r3, #0]
 80065ca:	f107 0110 	add.w	r1, r7, #16
 80065ce:	2300      	movs	r3, #0
 80065d0:	683a      	ldr	r2, [r7, #0]
 80065d2:	f7fe f801 	bl	80045d8 <xQueueGenericSendFromISR>
 80065d6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80065d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3728      	adds	r7, #40	; 0x28
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	bf00      	nop
 80065e4:	20001144 	.word	0x20001144

080065e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b088      	sub	sp, #32
 80065ec:	af02      	add	r7, sp, #8
 80065ee:	6078      	str	r0, [r7, #4]
 80065f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065f2:	4b22      	ldr	r3, [pc, #136]	; (800667c <prvProcessExpiredTimer+0x94>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	3304      	adds	r3, #4
 8006600:	4618      	mov	r0, r3
 8006602:	f7fd fccd 	bl	8003fa0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800660c:	f003 0304 	and.w	r3, r3, #4
 8006610:	2b00      	cmp	r3, #0
 8006612:	d022      	beq.n	800665a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	699a      	ldr	r2, [r3, #24]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	18d1      	adds	r1, r2, r3
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	683a      	ldr	r2, [r7, #0]
 8006620:	6978      	ldr	r0, [r7, #20]
 8006622:	f000 f8d1 	bl	80067c8 <prvInsertTimerInActiveList>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d01f      	beq.n	800666c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800662c:	2300      	movs	r3, #0
 800662e:	9300      	str	r3, [sp, #0]
 8006630:	2300      	movs	r3, #0
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	2100      	movs	r1, #0
 8006636:	6978      	ldr	r0, [r7, #20]
 8006638:	f7ff ff88 	bl	800654c <xTimerGenericCommand>
 800663c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d113      	bne.n	800666c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006648:	f383 8811 	msr	BASEPRI, r3
 800664c:	f3bf 8f6f 	isb	sy
 8006650:	f3bf 8f4f 	dsb	sy
 8006654:	60fb      	str	r3, [r7, #12]
}
 8006656:	bf00      	nop
 8006658:	e7fe      	b.n	8006658 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006660:	f023 0301 	bic.w	r3, r3, #1
 8006664:	b2da      	uxtb	r2, r3
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	6a1b      	ldr	r3, [r3, #32]
 8006670:	6978      	ldr	r0, [r7, #20]
 8006672:	4798      	blx	r3
}
 8006674:	bf00      	nop
 8006676:	3718      	adds	r7, #24
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}
 800667c:	2000113c 	.word	0x2000113c

08006680 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b084      	sub	sp, #16
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006688:	f107 0308 	add.w	r3, r7, #8
 800668c:	4618      	mov	r0, r3
 800668e:	f000 f857 	bl	8006740 <prvGetNextExpireTime>
 8006692:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	4619      	mov	r1, r3
 8006698:	68f8      	ldr	r0, [r7, #12]
 800669a:	f000 f803 	bl	80066a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800669e:	f000 f8d5 	bl	800684c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80066a2:	e7f1      	b.n	8006688 <prvTimerTask+0x8>

080066a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80066ae:	f7fe ffcf 	bl	8005650 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80066b2:	f107 0308 	add.w	r3, r7, #8
 80066b6:	4618      	mov	r0, r3
 80066b8:	f000 f866 	bl	8006788 <prvSampleTimeNow>
 80066bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d130      	bne.n	8006726 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d10a      	bne.n	80066e0 <prvProcessTimerOrBlockTask+0x3c>
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d806      	bhi.n	80066e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80066d2:	f7fe ffcb 	bl	800566c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80066d6:	68f9      	ldr	r1, [r7, #12]
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f7ff ff85 	bl	80065e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80066de:	e024      	b.n	800672a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d008      	beq.n	80066f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80066e6:	4b13      	ldr	r3, [pc, #76]	; (8006734 <prvProcessTimerOrBlockTask+0x90>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d101      	bne.n	80066f4 <prvProcessTimerOrBlockTask+0x50>
 80066f0:	2301      	movs	r3, #1
 80066f2:	e000      	b.n	80066f6 <prvProcessTimerOrBlockTask+0x52>
 80066f4:	2300      	movs	r3, #0
 80066f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80066f8:	4b0f      	ldr	r3, [pc, #60]	; (8006738 <prvProcessTimerOrBlockTask+0x94>)
 80066fa:	6818      	ldr	r0, [r3, #0]
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	1ad3      	subs	r3, r2, r3
 8006702:	683a      	ldr	r2, [r7, #0]
 8006704:	4619      	mov	r1, r3
 8006706:	f7fe fb41 	bl	8004d8c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800670a:	f7fe ffaf 	bl	800566c <xTaskResumeAll>
 800670e:	4603      	mov	r3, r0
 8006710:	2b00      	cmp	r3, #0
 8006712:	d10a      	bne.n	800672a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006714:	4b09      	ldr	r3, [pc, #36]	; (800673c <prvProcessTimerOrBlockTask+0x98>)
 8006716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800671a:	601a      	str	r2, [r3, #0]
 800671c:	f3bf 8f4f 	dsb	sy
 8006720:	f3bf 8f6f 	isb	sy
}
 8006724:	e001      	b.n	800672a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006726:	f7fe ffa1 	bl	800566c <xTaskResumeAll>
}
 800672a:	bf00      	nop
 800672c:	3710      	adds	r7, #16
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}
 8006732:	bf00      	nop
 8006734:	20001140 	.word	0x20001140
 8006738:	20001144 	.word	0x20001144
 800673c:	e000ed04 	.word	0xe000ed04

08006740 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006740:	b480      	push	{r7}
 8006742:	b085      	sub	sp, #20
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006748:	4b0e      	ldr	r3, [pc, #56]	; (8006784 <prvGetNextExpireTime+0x44>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d101      	bne.n	8006756 <prvGetNextExpireTime+0x16>
 8006752:	2201      	movs	r2, #1
 8006754:	e000      	b.n	8006758 <prvGetNextExpireTime+0x18>
 8006756:	2200      	movs	r2, #0
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d105      	bne.n	8006770 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006764:	4b07      	ldr	r3, [pc, #28]	; (8006784 <prvGetNextExpireTime+0x44>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68db      	ldr	r3, [r3, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	60fb      	str	r3, [r7, #12]
 800676e:	e001      	b.n	8006774 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006770:	2300      	movs	r3, #0
 8006772:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006774:	68fb      	ldr	r3, [r7, #12]
}
 8006776:	4618      	mov	r0, r3
 8006778:	3714      	adds	r7, #20
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	2000113c 	.word	0x2000113c

08006788 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b084      	sub	sp, #16
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006790:	f7ff f80a 	bl	80057a8 <xTaskGetTickCount>
 8006794:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006796:	4b0b      	ldr	r3, [pc, #44]	; (80067c4 <prvSampleTimeNow+0x3c>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	68fa      	ldr	r2, [r7, #12]
 800679c:	429a      	cmp	r2, r3
 800679e:	d205      	bcs.n	80067ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80067a0:	f000 f936 	bl	8006a10 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	601a      	str	r2, [r3, #0]
 80067aa:	e002      	b.n	80067b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80067b2:	4a04      	ldr	r2, [pc, #16]	; (80067c4 <prvSampleTimeNow+0x3c>)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80067b8:	68fb      	ldr	r3, [r7, #12]
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3710      	adds	r7, #16
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	2000114c 	.word	0x2000114c

080067c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b086      	sub	sp, #24
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	60f8      	str	r0, [r7, #12]
 80067d0:	60b9      	str	r1, [r7, #8]
 80067d2:	607a      	str	r2, [r7, #4]
 80067d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80067d6:	2300      	movs	r3, #0
 80067d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	68ba      	ldr	r2, [r7, #8]
 80067de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	68fa      	ldr	r2, [r7, #12]
 80067e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80067e6:	68ba      	ldr	r2, [r7, #8]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d812      	bhi.n	8006814 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	1ad2      	subs	r2, r2, r3
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	699b      	ldr	r3, [r3, #24]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d302      	bcc.n	8006802 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80067fc:	2301      	movs	r3, #1
 80067fe:	617b      	str	r3, [r7, #20]
 8006800:	e01b      	b.n	800683a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006802:	4b10      	ldr	r3, [pc, #64]	; (8006844 <prvInsertTimerInActiveList+0x7c>)
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	3304      	adds	r3, #4
 800680a:	4619      	mov	r1, r3
 800680c:	4610      	mov	r0, r2
 800680e:	f7fd fb8e 	bl	8003f2e <vListInsert>
 8006812:	e012      	b.n	800683a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	429a      	cmp	r2, r3
 800681a:	d206      	bcs.n	800682a <prvInsertTimerInActiveList+0x62>
 800681c:	68ba      	ldr	r2, [r7, #8]
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	429a      	cmp	r2, r3
 8006822:	d302      	bcc.n	800682a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006824:	2301      	movs	r3, #1
 8006826:	617b      	str	r3, [r7, #20]
 8006828:	e007      	b.n	800683a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800682a:	4b07      	ldr	r3, [pc, #28]	; (8006848 <prvInsertTimerInActiveList+0x80>)
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	3304      	adds	r3, #4
 8006832:	4619      	mov	r1, r3
 8006834:	4610      	mov	r0, r2
 8006836:	f7fd fb7a 	bl	8003f2e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800683a:	697b      	ldr	r3, [r7, #20]
}
 800683c:	4618      	mov	r0, r3
 800683e:	3718      	adds	r7, #24
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}
 8006844:	20001140 	.word	0x20001140
 8006848:	2000113c 	.word	0x2000113c

0800684c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b08e      	sub	sp, #56	; 0x38
 8006850:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006852:	e0ca      	b.n	80069ea <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2b00      	cmp	r3, #0
 8006858:	da18      	bge.n	800688c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800685a:	1d3b      	adds	r3, r7, #4
 800685c:	3304      	adds	r3, #4
 800685e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006862:	2b00      	cmp	r3, #0
 8006864:	d10a      	bne.n	800687c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800686a:	f383 8811 	msr	BASEPRI, r3
 800686e:	f3bf 8f6f 	isb	sy
 8006872:	f3bf 8f4f 	dsb	sy
 8006876:	61fb      	str	r3, [r7, #28]
}
 8006878:	bf00      	nop
 800687a:	e7fe      	b.n	800687a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800687c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006882:	6850      	ldr	r0, [r2, #4]
 8006884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006886:	6892      	ldr	r2, [r2, #8]
 8006888:	4611      	mov	r1, r2
 800688a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2b00      	cmp	r3, #0
 8006890:	f2c0 80ab 	blt.w	80069ea <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689a:	695b      	ldr	r3, [r3, #20]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d004      	beq.n	80068aa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80068a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a2:	3304      	adds	r3, #4
 80068a4:	4618      	mov	r0, r3
 80068a6:	f7fd fb7b 	bl	8003fa0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80068aa:	463b      	mov	r3, r7
 80068ac:	4618      	mov	r0, r3
 80068ae:	f7ff ff6b 	bl	8006788 <prvSampleTimeNow>
 80068b2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2b09      	cmp	r3, #9
 80068b8:	f200 8096 	bhi.w	80069e8 <prvProcessReceivedCommands+0x19c>
 80068bc:	a201      	add	r2, pc, #4	; (adr r2, 80068c4 <prvProcessReceivedCommands+0x78>)
 80068be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c2:	bf00      	nop
 80068c4:	080068ed 	.word	0x080068ed
 80068c8:	080068ed 	.word	0x080068ed
 80068cc:	080068ed 	.word	0x080068ed
 80068d0:	08006961 	.word	0x08006961
 80068d4:	08006975 	.word	0x08006975
 80068d8:	080069bf 	.word	0x080069bf
 80068dc:	080068ed 	.word	0x080068ed
 80068e0:	080068ed 	.word	0x080068ed
 80068e4:	08006961 	.word	0x08006961
 80068e8:	08006975 	.word	0x08006975
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80068ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068f2:	f043 0301 	orr.w	r3, r3, #1
 80068f6:	b2da      	uxtb	r2, r3
 80068f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80068fe:	68ba      	ldr	r2, [r7, #8]
 8006900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006902:	699b      	ldr	r3, [r3, #24]
 8006904:	18d1      	adds	r1, r2, r3
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800690a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800690c:	f7ff ff5c 	bl	80067c8 <prvInsertTimerInActiveList>
 8006910:	4603      	mov	r3, r0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d069      	beq.n	80069ea <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006918:	6a1b      	ldr	r3, [r3, #32]
 800691a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800691c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800691e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006920:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006924:	f003 0304 	and.w	r3, r3, #4
 8006928:	2b00      	cmp	r3, #0
 800692a:	d05e      	beq.n	80069ea <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800692c:	68ba      	ldr	r2, [r7, #8]
 800692e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006930:	699b      	ldr	r3, [r3, #24]
 8006932:	441a      	add	r2, r3
 8006934:	2300      	movs	r3, #0
 8006936:	9300      	str	r3, [sp, #0]
 8006938:	2300      	movs	r3, #0
 800693a:	2100      	movs	r1, #0
 800693c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800693e:	f7ff fe05 	bl	800654c <xTimerGenericCommand>
 8006942:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006944:	6a3b      	ldr	r3, [r7, #32]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d14f      	bne.n	80069ea <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800694a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800694e:	f383 8811 	msr	BASEPRI, r3
 8006952:	f3bf 8f6f 	isb	sy
 8006956:	f3bf 8f4f 	dsb	sy
 800695a:	61bb      	str	r3, [r7, #24]
}
 800695c:	bf00      	nop
 800695e:	e7fe      	b.n	800695e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006962:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006966:	f023 0301 	bic.w	r3, r3, #1
 800696a:	b2da      	uxtb	r2, r3
 800696c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800696e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006972:	e03a      	b.n	80069ea <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006976:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800697a:	f043 0301 	orr.w	r3, r3, #1
 800697e:	b2da      	uxtb	r2, r3
 8006980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006982:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006986:	68ba      	ldr	r2, [r7, #8]
 8006988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800698c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698e:	699b      	ldr	r3, [r3, #24]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d10a      	bne.n	80069aa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006998:	f383 8811 	msr	BASEPRI, r3
 800699c:	f3bf 8f6f 	isb	sy
 80069a0:	f3bf 8f4f 	dsb	sy
 80069a4:	617b      	str	r3, [r7, #20]
}
 80069a6:	bf00      	nop
 80069a8:	e7fe      	b.n	80069a8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80069aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ac:	699a      	ldr	r2, [r3, #24]
 80069ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b0:	18d1      	adds	r1, r2, r3
 80069b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069b8:	f7ff ff06 	bl	80067c8 <prvInsertTimerInActiveList>
					break;
 80069bc:	e015      	b.n	80069ea <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80069be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069c4:	f003 0302 	and.w	r3, r3, #2
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d103      	bne.n	80069d4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80069cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069ce:	f000 fbdf 	bl	8007190 <vPortFree>
 80069d2:	e00a      	b.n	80069ea <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80069d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069da:	f023 0301 	bic.w	r3, r3, #1
 80069de:	b2da      	uxtb	r2, r3
 80069e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80069e6:	e000      	b.n	80069ea <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80069e8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80069ea:	4b08      	ldr	r3, [pc, #32]	; (8006a0c <prvProcessReceivedCommands+0x1c0>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	1d39      	adds	r1, r7, #4
 80069f0:	2200      	movs	r2, #0
 80069f2:	4618      	mov	r0, r3
 80069f4:	f7fd fe8c 	bl	8004710 <xQueueReceive>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	f47f af2a 	bne.w	8006854 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006a00:	bf00      	nop
 8006a02:	bf00      	nop
 8006a04:	3730      	adds	r7, #48	; 0x30
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	20001144 	.word	0x20001144

08006a10 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b088      	sub	sp, #32
 8006a14:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006a16:	e048      	b.n	8006aaa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a18:	4b2d      	ldr	r3, [pc, #180]	; (8006ad0 <prvSwitchTimerLists+0xc0>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a22:	4b2b      	ldr	r3, [pc, #172]	; (8006ad0 <prvSwitchTimerLists+0xc0>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	3304      	adds	r3, #4
 8006a30:	4618      	mov	r0, r3
 8006a32:	f7fd fab5 	bl	8003fa0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	68f8      	ldr	r0, [r7, #12]
 8006a3c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a44:	f003 0304 	and.w	r3, r3, #4
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d02e      	beq.n	8006aaa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	699b      	ldr	r3, [r3, #24]
 8006a50:	693a      	ldr	r2, [r7, #16]
 8006a52:	4413      	add	r3, r2
 8006a54:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006a56:	68ba      	ldr	r2, [r7, #8]
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d90e      	bls.n	8006a7c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	68ba      	ldr	r2, [r7, #8]
 8006a62:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	68fa      	ldr	r2, [r7, #12]
 8006a68:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006a6a:	4b19      	ldr	r3, [pc, #100]	; (8006ad0 <prvSwitchTimerLists+0xc0>)
 8006a6c:	681a      	ldr	r2, [r3, #0]
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	3304      	adds	r3, #4
 8006a72:	4619      	mov	r1, r3
 8006a74:	4610      	mov	r0, r2
 8006a76:	f7fd fa5a 	bl	8003f2e <vListInsert>
 8006a7a:	e016      	b.n	8006aaa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	9300      	str	r3, [sp, #0]
 8006a80:	2300      	movs	r3, #0
 8006a82:	693a      	ldr	r2, [r7, #16]
 8006a84:	2100      	movs	r1, #0
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	f7ff fd60 	bl	800654c <xTimerGenericCommand>
 8006a8c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d10a      	bne.n	8006aaa <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a98:	f383 8811 	msr	BASEPRI, r3
 8006a9c:	f3bf 8f6f 	isb	sy
 8006aa0:	f3bf 8f4f 	dsb	sy
 8006aa4:	603b      	str	r3, [r7, #0]
}
 8006aa6:	bf00      	nop
 8006aa8:	e7fe      	b.n	8006aa8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006aaa:	4b09      	ldr	r3, [pc, #36]	; (8006ad0 <prvSwitchTimerLists+0xc0>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d1b1      	bne.n	8006a18 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006ab4:	4b06      	ldr	r3, [pc, #24]	; (8006ad0 <prvSwitchTimerLists+0xc0>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006aba:	4b06      	ldr	r3, [pc, #24]	; (8006ad4 <prvSwitchTimerLists+0xc4>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a04      	ldr	r2, [pc, #16]	; (8006ad0 <prvSwitchTimerLists+0xc0>)
 8006ac0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006ac2:	4a04      	ldr	r2, [pc, #16]	; (8006ad4 <prvSwitchTimerLists+0xc4>)
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	6013      	str	r3, [r2, #0]
}
 8006ac8:	bf00      	nop
 8006aca:	3718      	adds	r7, #24
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	2000113c 	.word	0x2000113c
 8006ad4:	20001140 	.word	0x20001140

08006ad8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b082      	sub	sp, #8
 8006adc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006ade:	f000 f969 	bl	8006db4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006ae2:	4b15      	ldr	r3, [pc, #84]	; (8006b38 <prvCheckForValidListAndQueue+0x60>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d120      	bne.n	8006b2c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006aea:	4814      	ldr	r0, [pc, #80]	; (8006b3c <prvCheckForValidListAndQueue+0x64>)
 8006aec:	f7fd f9ce 	bl	8003e8c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006af0:	4813      	ldr	r0, [pc, #76]	; (8006b40 <prvCheckForValidListAndQueue+0x68>)
 8006af2:	f7fd f9cb 	bl	8003e8c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006af6:	4b13      	ldr	r3, [pc, #76]	; (8006b44 <prvCheckForValidListAndQueue+0x6c>)
 8006af8:	4a10      	ldr	r2, [pc, #64]	; (8006b3c <prvCheckForValidListAndQueue+0x64>)
 8006afa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006afc:	4b12      	ldr	r3, [pc, #72]	; (8006b48 <prvCheckForValidListAndQueue+0x70>)
 8006afe:	4a10      	ldr	r2, [pc, #64]	; (8006b40 <prvCheckForValidListAndQueue+0x68>)
 8006b00:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006b02:	2300      	movs	r3, #0
 8006b04:	9300      	str	r3, [sp, #0]
 8006b06:	4b11      	ldr	r3, [pc, #68]	; (8006b4c <prvCheckForValidListAndQueue+0x74>)
 8006b08:	4a11      	ldr	r2, [pc, #68]	; (8006b50 <prvCheckForValidListAndQueue+0x78>)
 8006b0a:	2110      	movs	r1, #16
 8006b0c:	200a      	movs	r0, #10
 8006b0e:	f7fd fad9 	bl	80040c4 <xQueueGenericCreateStatic>
 8006b12:	4603      	mov	r3, r0
 8006b14:	4a08      	ldr	r2, [pc, #32]	; (8006b38 <prvCheckForValidListAndQueue+0x60>)
 8006b16:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006b18:	4b07      	ldr	r3, [pc, #28]	; (8006b38 <prvCheckForValidListAndQueue+0x60>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d005      	beq.n	8006b2c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006b20:	4b05      	ldr	r3, [pc, #20]	; (8006b38 <prvCheckForValidListAndQueue+0x60>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	490b      	ldr	r1, [pc, #44]	; (8006b54 <prvCheckForValidListAndQueue+0x7c>)
 8006b26:	4618      	mov	r0, r3
 8006b28:	f7fe f906 	bl	8004d38 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b2c:	f000 f972 	bl	8006e14 <vPortExitCritical>
}
 8006b30:	bf00      	nop
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop
 8006b38:	20001144 	.word	0x20001144
 8006b3c:	20001114 	.word	0x20001114
 8006b40:	20001128 	.word	0x20001128
 8006b44:	2000113c 	.word	0x2000113c
 8006b48:	20001140 	.word	0x20001140
 8006b4c:	200011f0 	.word	0x200011f0
 8006b50:	20001150 	.word	0x20001150
 8006b54:	0800a124 	.word	0x0800a124

08006b58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	3b04      	subs	r3, #4
 8006b68:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006b70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	3b04      	subs	r3, #4
 8006b76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	f023 0201 	bic.w	r2, r3, #1
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	3b04      	subs	r3, #4
 8006b86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006b88:	4a0c      	ldr	r2, [pc, #48]	; (8006bbc <pxPortInitialiseStack+0x64>)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	3b14      	subs	r3, #20
 8006b92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006b94:	687a      	ldr	r2, [r7, #4]
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	3b04      	subs	r3, #4
 8006b9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f06f 0202 	mvn.w	r2, #2
 8006ba6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	3b20      	subs	r3, #32
 8006bac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006bae:	68fb      	ldr	r3, [r7, #12]
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3714      	adds	r7, #20
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr
 8006bbc:	08006bc1 	.word	0x08006bc1

08006bc0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b085      	sub	sp, #20
 8006bc4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006bca:	4b12      	ldr	r3, [pc, #72]	; (8006c14 <prvTaskExitError+0x54>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bd2:	d00a      	beq.n	8006bea <prvTaskExitError+0x2a>
	__asm volatile
 8006bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd8:	f383 8811 	msr	BASEPRI, r3
 8006bdc:	f3bf 8f6f 	isb	sy
 8006be0:	f3bf 8f4f 	dsb	sy
 8006be4:	60fb      	str	r3, [r7, #12]
}
 8006be6:	bf00      	nop
 8006be8:	e7fe      	b.n	8006be8 <prvTaskExitError+0x28>
	__asm volatile
 8006bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bee:	f383 8811 	msr	BASEPRI, r3
 8006bf2:	f3bf 8f6f 	isb	sy
 8006bf6:	f3bf 8f4f 	dsb	sy
 8006bfa:	60bb      	str	r3, [r7, #8]
}
 8006bfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006bfe:	bf00      	nop
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d0fc      	beq.n	8006c00 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006c06:	bf00      	nop
 8006c08:	bf00      	nop
 8006c0a:	3714      	adds	r7, #20
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c12:	4770      	bx	lr
 8006c14:	2000000c 	.word	0x2000000c
	...

08006c20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006c20:	4b07      	ldr	r3, [pc, #28]	; (8006c40 <pxCurrentTCBConst2>)
 8006c22:	6819      	ldr	r1, [r3, #0]
 8006c24:	6808      	ldr	r0, [r1, #0]
 8006c26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c2a:	f380 8809 	msr	PSP, r0
 8006c2e:	f3bf 8f6f 	isb	sy
 8006c32:	f04f 0000 	mov.w	r0, #0
 8006c36:	f380 8811 	msr	BASEPRI, r0
 8006c3a:	4770      	bx	lr
 8006c3c:	f3af 8000 	nop.w

08006c40 <pxCurrentTCBConst2>:
 8006c40:	20000c14 	.word	0x20000c14
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006c44:	bf00      	nop
 8006c46:	bf00      	nop

08006c48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006c48:	4808      	ldr	r0, [pc, #32]	; (8006c6c <prvPortStartFirstTask+0x24>)
 8006c4a:	6800      	ldr	r0, [r0, #0]
 8006c4c:	6800      	ldr	r0, [r0, #0]
 8006c4e:	f380 8808 	msr	MSP, r0
 8006c52:	f04f 0000 	mov.w	r0, #0
 8006c56:	f380 8814 	msr	CONTROL, r0
 8006c5a:	b662      	cpsie	i
 8006c5c:	b661      	cpsie	f
 8006c5e:	f3bf 8f4f 	dsb	sy
 8006c62:	f3bf 8f6f 	isb	sy
 8006c66:	df00      	svc	0
 8006c68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006c6a:	bf00      	nop
 8006c6c:	e000ed08 	.word	0xe000ed08

08006c70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b086      	sub	sp, #24
 8006c74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006c76:	4b46      	ldr	r3, [pc, #280]	; (8006d90 <xPortStartScheduler+0x120>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4a46      	ldr	r2, [pc, #280]	; (8006d94 <xPortStartScheduler+0x124>)
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d10a      	bne.n	8006c96 <xPortStartScheduler+0x26>
	__asm volatile
 8006c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c84:	f383 8811 	msr	BASEPRI, r3
 8006c88:	f3bf 8f6f 	isb	sy
 8006c8c:	f3bf 8f4f 	dsb	sy
 8006c90:	613b      	str	r3, [r7, #16]
}
 8006c92:	bf00      	nop
 8006c94:	e7fe      	b.n	8006c94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006c96:	4b3e      	ldr	r3, [pc, #248]	; (8006d90 <xPortStartScheduler+0x120>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a3f      	ldr	r2, [pc, #252]	; (8006d98 <xPortStartScheduler+0x128>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d10a      	bne.n	8006cb6 <xPortStartScheduler+0x46>
	__asm volatile
 8006ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca4:	f383 8811 	msr	BASEPRI, r3
 8006ca8:	f3bf 8f6f 	isb	sy
 8006cac:	f3bf 8f4f 	dsb	sy
 8006cb0:	60fb      	str	r3, [r7, #12]
}
 8006cb2:	bf00      	nop
 8006cb4:	e7fe      	b.n	8006cb4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006cb6:	4b39      	ldr	r3, [pc, #228]	; (8006d9c <xPortStartScheduler+0x12c>)
 8006cb8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	22ff      	movs	r2, #255	; 0xff
 8006cc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006cd0:	78fb      	ldrb	r3, [r7, #3]
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006cd8:	b2da      	uxtb	r2, r3
 8006cda:	4b31      	ldr	r3, [pc, #196]	; (8006da0 <xPortStartScheduler+0x130>)
 8006cdc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006cde:	4b31      	ldr	r3, [pc, #196]	; (8006da4 <xPortStartScheduler+0x134>)
 8006ce0:	2207      	movs	r2, #7
 8006ce2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006ce4:	e009      	b.n	8006cfa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006ce6:	4b2f      	ldr	r3, [pc, #188]	; (8006da4 <xPortStartScheduler+0x134>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	3b01      	subs	r3, #1
 8006cec:	4a2d      	ldr	r2, [pc, #180]	; (8006da4 <xPortStartScheduler+0x134>)
 8006cee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006cf0:	78fb      	ldrb	r3, [r7, #3]
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	005b      	lsls	r3, r3, #1
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006cfa:	78fb      	ldrb	r3, [r7, #3]
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d02:	2b80      	cmp	r3, #128	; 0x80
 8006d04:	d0ef      	beq.n	8006ce6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006d06:	4b27      	ldr	r3, [pc, #156]	; (8006da4 <xPortStartScheduler+0x134>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f1c3 0307 	rsb	r3, r3, #7
 8006d0e:	2b04      	cmp	r3, #4
 8006d10:	d00a      	beq.n	8006d28 <xPortStartScheduler+0xb8>
	__asm volatile
 8006d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d16:	f383 8811 	msr	BASEPRI, r3
 8006d1a:	f3bf 8f6f 	isb	sy
 8006d1e:	f3bf 8f4f 	dsb	sy
 8006d22:	60bb      	str	r3, [r7, #8]
}
 8006d24:	bf00      	nop
 8006d26:	e7fe      	b.n	8006d26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006d28:	4b1e      	ldr	r3, [pc, #120]	; (8006da4 <xPortStartScheduler+0x134>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	021b      	lsls	r3, r3, #8
 8006d2e:	4a1d      	ldr	r2, [pc, #116]	; (8006da4 <xPortStartScheduler+0x134>)
 8006d30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006d32:	4b1c      	ldr	r3, [pc, #112]	; (8006da4 <xPortStartScheduler+0x134>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006d3a:	4a1a      	ldr	r2, [pc, #104]	; (8006da4 <xPortStartScheduler+0x134>)
 8006d3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	b2da      	uxtb	r2, r3
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006d46:	4b18      	ldr	r3, [pc, #96]	; (8006da8 <xPortStartScheduler+0x138>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a17      	ldr	r2, [pc, #92]	; (8006da8 <xPortStartScheduler+0x138>)
 8006d4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006d50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006d52:	4b15      	ldr	r3, [pc, #84]	; (8006da8 <xPortStartScheduler+0x138>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	4a14      	ldr	r2, [pc, #80]	; (8006da8 <xPortStartScheduler+0x138>)
 8006d58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006d5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006d5e:	f000 f8dd 	bl	8006f1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006d62:	4b12      	ldr	r3, [pc, #72]	; (8006dac <xPortStartScheduler+0x13c>)
 8006d64:	2200      	movs	r2, #0
 8006d66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006d68:	f000 f8fc 	bl	8006f64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006d6c:	4b10      	ldr	r3, [pc, #64]	; (8006db0 <xPortStartScheduler+0x140>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4a0f      	ldr	r2, [pc, #60]	; (8006db0 <xPortStartScheduler+0x140>)
 8006d72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006d76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006d78:	f7ff ff66 	bl	8006c48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006d7c:	f7fe fe06 	bl	800598c <vTaskSwitchContext>
	prvTaskExitError();
 8006d80:	f7ff ff1e 	bl	8006bc0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006d84:	2300      	movs	r3, #0
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	3718      	adds	r7, #24
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}
 8006d8e:	bf00      	nop
 8006d90:	e000ed00 	.word	0xe000ed00
 8006d94:	410fc271 	.word	0x410fc271
 8006d98:	410fc270 	.word	0x410fc270
 8006d9c:	e000e400 	.word	0xe000e400
 8006da0:	20001240 	.word	0x20001240
 8006da4:	20001244 	.word	0x20001244
 8006da8:	e000ed20 	.word	0xe000ed20
 8006dac:	2000000c 	.word	0x2000000c
 8006db0:	e000ef34 	.word	0xe000ef34

08006db4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
	__asm volatile
 8006dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dbe:	f383 8811 	msr	BASEPRI, r3
 8006dc2:	f3bf 8f6f 	isb	sy
 8006dc6:	f3bf 8f4f 	dsb	sy
 8006dca:	607b      	str	r3, [r7, #4]
}
 8006dcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006dce:	4b0f      	ldr	r3, [pc, #60]	; (8006e0c <vPortEnterCritical+0x58>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	4a0d      	ldr	r2, [pc, #52]	; (8006e0c <vPortEnterCritical+0x58>)
 8006dd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006dd8:	4b0c      	ldr	r3, [pc, #48]	; (8006e0c <vPortEnterCritical+0x58>)
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d10f      	bne.n	8006e00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006de0:	4b0b      	ldr	r3, [pc, #44]	; (8006e10 <vPortEnterCritical+0x5c>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00a      	beq.n	8006e00 <vPortEnterCritical+0x4c>
	__asm volatile
 8006dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dee:	f383 8811 	msr	BASEPRI, r3
 8006df2:	f3bf 8f6f 	isb	sy
 8006df6:	f3bf 8f4f 	dsb	sy
 8006dfa:	603b      	str	r3, [r7, #0]
}
 8006dfc:	bf00      	nop
 8006dfe:	e7fe      	b.n	8006dfe <vPortEnterCritical+0x4a>
	}
}
 8006e00:	bf00      	nop
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr
 8006e0c:	2000000c 	.word	0x2000000c
 8006e10:	e000ed04 	.word	0xe000ed04

08006e14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006e1a:	4b12      	ldr	r3, [pc, #72]	; (8006e64 <vPortExitCritical+0x50>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d10a      	bne.n	8006e38 <vPortExitCritical+0x24>
	__asm volatile
 8006e22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e26:	f383 8811 	msr	BASEPRI, r3
 8006e2a:	f3bf 8f6f 	isb	sy
 8006e2e:	f3bf 8f4f 	dsb	sy
 8006e32:	607b      	str	r3, [r7, #4]
}
 8006e34:	bf00      	nop
 8006e36:	e7fe      	b.n	8006e36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006e38:	4b0a      	ldr	r3, [pc, #40]	; (8006e64 <vPortExitCritical+0x50>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	3b01      	subs	r3, #1
 8006e3e:	4a09      	ldr	r2, [pc, #36]	; (8006e64 <vPortExitCritical+0x50>)
 8006e40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006e42:	4b08      	ldr	r3, [pc, #32]	; (8006e64 <vPortExitCritical+0x50>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d105      	bne.n	8006e56 <vPortExitCritical+0x42>
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	f383 8811 	msr	BASEPRI, r3
}
 8006e54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006e56:	bf00      	nop
 8006e58:	370c      	adds	r7, #12
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr
 8006e62:	bf00      	nop
 8006e64:	2000000c 	.word	0x2000000c
	...

08006e70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006e70:	f3ef 8009 	mrs	r0, PSP
 8006e74:	f3bf 8f6f 	isb	sy
 8006e78:	4b15      	ldr	r3, [pc, #84]	; (8006ed0 <pxCurrentTCBConst>)
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	f01e 0f10 	tst.w	lr, #16
 8006e80:	bf08      	it	eq
 8006e82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006e86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e8a:	6010      	str	r0, [r2, #0]
 8006e8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006e90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006e94:	f380 8811 	msr	BASEPRI, r0
 8006e98:	f3bf 8f4f 	dsb	sy
 8006e9c:	f3bf 8f6f 	isb	sy
 8006ea0:	f7fe fd74 	bl	800598c <vTaskSwitchContext>
 8006ea4:	f04f 0000 	mov.w	r0, #0
 8006ea8:	f380 8811 	msr	BASEPRI, r0
 8006eac:	bc09      	pop	{r0, r3}
 8006eae:	6819      	ldr	r1, [r3, #0]
 8006eb0:	6808      	ldr	r0, [r1, #0]
 8006eb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006eb6:	f01e 0f10 	tst.w	lr, #16
 8006eba:	bf08      	it	eq
 8006ebc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006ec0:	f380 8809 	msr	PSP, r0
 8006ec4:	f3bf 8f6f 	isb	sy
 8006ec8:	4770      	bx	lr
 8006eca:	bf00      	nop
 8006ecc:	f3af 8000 	nop.w

08006ed0 <pxCurrentTCBConst>:
 8006ed0:	20000c14 	.word	0x20000c14
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ed4:	bf00      	nop
 8006ed6:	bf00      	nop

08006ed8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b082      	sub	sp, #8
 8006edc:	af00      	add	r7, sp, #0
	__asm volatile
 8006ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ee2:	f383 8811 	msr	BASEPRI, r3
 8006ee6:	f3bf 8f6f 	isb	sy
 8006eea:	f3bf 8f4f 	dsb	sy
 8006eee:	607b      	str	r3, [r7, #4]
}
 8006ef0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ef2:	f7fe fc97 	bl	8005824 <xTaskIncrementTick>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d003      	beq.n	8006f04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006efc:	4b06      	ldr	r3, [pc, #24]	; (8006f18 <xPortSysTickHandler+0x40>)
 8006efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f02:	601a      	str	r2, [r3, #0]
 8006f04:	2300      	movs	r3, #0
 8006f06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	f383 8811 	msr	BASEPRI, r3
}
 8006f0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006f10:	bf00      	nop
 8006f12:	3708      	adds	r7, #8
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	e000ed04 	.word	0xe000ed04

08006f1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006f20:	4b0b      	ldr	r3, [pc, #44]	; (8006f50 <vPortSetupTimerInterrupt+0x34>)
 8006f22:	2200      	movs	r2, #0
 8006f24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006f26:	4b0b      	ldr	r3, [pc, #44]	; (8006f54 <vPortSetupTimerInterrupt+0x38>)
 8006f28:	2200      	movs	r2, #0
 8006f2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006f2c:	4b0a      	ldr	r3, [pc, #40]	; (8006f58 <vPortSetupTimerInterrupt+0x3c>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a0a      	ldr	r2, [pc, #40]	; (8006f5c <vPortSetupTimerInterrupt+0x40>)
 8006f32:	fba2 2303 	umull	r2, r3, r2, r3
 8006f36:	099b      	lsrs	r3, r3, #6
 8006f38:	4a09      	ldr	r2, [pc, #36]	; (8006f60 <vPortSetupTimerInterrupt+0x44>)
 8006f3a:	3b01      	subs	r3, #1
 8006f3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006f3e:	4b04      	ldr	r3, [pc, #16]	; (8006f50 <vPortSetupTimerInterrupt+0x34>)
 8006f40:	2207      	movs	r2, #7
 8006f42:	601a      	str	r2, [r3, #0]
}
 8006f44:	bf00      	nop
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr
 8006f4e:	bf00      	nop
 8006f50:	e000e010 	.word	0xe000e010
 8006f54:	e000e018 	.word	0xe000e018
 8006f58:	20000000 	.word	0x20000000
 8006f5c:	10624dd3 	.word	0x10624dd3
 8006f60:	e000e014 	.word	0xe000e014

08006f64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006f64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006f74 <vPortEnableVFP+0x10>
 8006f68:	6801      	ldr	r1, [r0, #0]
 8006f6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006f6e:	6001      	str	r1, [r0, #0]
 8006f70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006f72:	bf00      	nop
 8006f74:	e000ed88 	.word	0xe000ed88

08006f78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006f78:	b480      	push	{r7}
 8006f7a:	b085      	sub	sp, #20
 8006f7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006f7e:	f3ef 8305 	mrs	r3, IPSR
 8006f82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2b0f      	cmp	r3, #15
 8006f88:	d914      	bls.n	8006fb4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006f8a:	4a17      	ldr	r2, [pc, #92]	; (8006fe8 <vPortValidateInterruptPriority+0x70>)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	4413      	add	r3, r2
 8006f90:	781b      	ldrb	r3, [r3, #0]
 8006f92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006f94:	4b15      	ldr	r3, [pc, #84]	; (8006fec <vPortValidateInterruptPriority+0x74>)
 8006f96:	781b      	ldrb	r3, [r3, #0]
 8006f98:	7afa      	ldrb	r2, [r7, #11]
 8006f9a:	429a      	cmp	r2, r3
 8006f9c:	d20a      	bcs.n	8006fb4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa2:	f383 8811 	msr	BASEPRI, r3
 8006fa6:	f3bf 8f6f 	isb	sy
 8006faa:	f3bf 8f4f 	dsb	sy
 8006fae:	607b      	str	r3, [r7, #4]
}
 8006fb0:	bf00      	nop
 8006fb2:	e7fe      	b.n	8006fb2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006fb4:	4b0e      	ldr	r3, [pc, #56]	; (8006ff0 <vPortValidateInterruptPriority+0x78>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006fbc:	4b0d      	ldr	r3, [pc, #52]	; (8006ff4 <vPortValidateInterruptPriority+0x7c>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d90a      	bls.n	8006fda <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fc8:	f383 8811 	msr	BASEPRI, r3
 8006fcc:	f3bf 8f6f 	isb	sy
 8006fd0:	f3bf 8f4f 	dsb	sy
 8006fd4:	603b      	str	r3, [r7, #0]
}
 8006fd6:	bf00      	nop
 8006fd8:	e7fe      	b.n	8006fd8 <vPortValidateInterruptPriority+0x60>
	}
 8006fda:	bf00      	nop
 8006fdc:	3714      	adds	r7, #20
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr
 8006fe6:	bf00      	nop
 8006fe8:	e000e3f0 	.word	0xe000e3f0
 8006fec:	20001240 	.word	0x20001240
 8006ff0:	e000ed0c 	.word	0xe000ed0c
 8006ff4:	20001244 	.word	0x20001244

08006ff8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b08a      	sub	sp, #40	; 0x28
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007000:	2300      	movs	r3, #0
 8007002:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007004:	f7fe fb24 	bl	8005650 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007008:	4b5b      	ldr	r3, [pc, #364]	; (8007178 <pvPortMalloc+0x180>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	2b00      	cmp	r3, #0
 800700e:	d101      	bne.n	8007014 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007010:	f000 f920 	bl	8007254 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007014:	4b59      	ldr	r3, [pc, #356]	; (800717c <pvPortMalloc+0x184>)
 8007016:	681a      	ldr	r2, [r3, #0]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	4013      	ands	r3, r2
 800701c:	2b00      	cmp	r3, #0
 800701e:	f040 8093 	bne.w	8007148 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d01d      	beq.n	8007064 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007028:	2208      	movs	r2, #8
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4413      	add	r3, r2
 800702e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f003 0307 	and.w	r3, r3, #7
 8007036:	2b00      	cmp	r3, #0
 8007038:	d014      	beq.n	8007064 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f023 0307 	bic.w	r3, r3, #7
 8007040:	3308      	adds	r3, #8
 8007042:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f003 0307 	and.w	r3, r3, #7
 800704a:	2b00      	cmp	r3, #0
 800704c:	d00a      	beq.n	8007064 <pvPortMalloc+0x6c>
	__asm volatile
 800704e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007052:	f383 8811 	msr	BASEPRI, r3
 8007056:	f3bf 8f6f 	isb	sy
 800705a:	f3bf 8f4f 	dsb	sy
 800705e:	617b      	str	r3, [r7, #20]
}
 8007060:	bf00      	nop
 8007062:	e7fe      	b.n	8007062 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d06e      	beq.n	8007148 <pvPortMalloc+0x150>
 800706a:	4b45      	ldr	r3, [pc, #276]	; (8007180 <pvPortMalloc+0x188>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	429a      	cmp	r2, r3
 8007072:	d869      	bhi.n	8007148 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007074:	4b43      	ldr	r3, [pc, #268]	; (8007184 <pvPortMalloc+0x18c>)
 8007076:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007078:	4b42      	ldr	r3, [pc, #264]	; (8007184 <pvPortMalloc+0x18c>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800707e:	e004      	b.n	800708a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007082:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800708a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	429a      	cmp	r2, r3
 8007092:	d903      	bls.n	800709c <pvPortMalloc+0xa4>
 8007094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d1f1      	bne.n	8007080 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800709c:	4b36      	ldr	r3, [pc, #216]	; (8007178 <pvPortMalloc+0x180>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070a2:	429a      	cmp	r2, r3
 80070a4:	d050      	beq.n	8007148 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80070a6:	6a3b      	ldr	r3, [r7, #32]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2208      	movs	r2, #8
 80070ac:	4413      	add	r3, r2
 80070ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80070b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	6a3b      	ldr	r3, [r7, #32]
 80070b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80070b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ba:	685a      	ldr	r2, [r3, #4]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	1ad2      	subs	r2, r2, r3
 80070c0:	2308      	movs	r3, #8
 80070c2:	005b      	lsls	r3, r3, #1
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d91f      	bls.n	8007108 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80070c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4413      	add	r3, r2
 80070ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80070d0:	69bb      	ldr	r3, [r7, #24]
 80070d2:	f003 0307 	and.w	r3, r3, #7
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d00a      	beq.n	80070f0 <pvPortMalloc+0xf8>
	__asm volatile
 80070da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070de:	f383 8811 	msr	BASEPRI, r3
 80070e2:	f3bf 8f6f 	isb	sy
 80070e6:	f3bf 8f4f 	dsb	sy
 80070ea:	613b      	str	r3, [r7, #16]
}
 80070ec:	bf00      	nop
 80070ee:	e7fe      	b.n	80070ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80070f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f2:	685a      	ldr	r2, [r3, #4]
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	1ad2      	subs	r2, r2, r3
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80070fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007102:	69b8      	ldr	r0, [r7, #24]
 8007104:	f000 f908 	bl	8007318 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007108:	4b1d      	ldr	r3, [pc, #116]	; (8007180 <pvPortMalloc+0x188>)
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	1ad3      	subs	r3, r2, r3
 8007112:	4a1b      	ldr	r2, [pc, #108]	; (8007180 <pvPortMalloc+0x188>)
 8007114:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007116:	4b1a      	ldr	r3, [pc, #104]	; (8007180 <pvPortMalloc+0x188>)
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	4b1b      	ldr	r3, [pc, #108]	; (8007188 <pvPortMalloc+0x190>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	429a      	cmp	r2, r3
 8007120:	d203      	bcs.n	800712a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007122:	4b17      	ldr	r3, [pc, #92]	; (8007180 <pvPortMalloc+0x188>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a18      	ldr	r2, [pc, #96]	; (8007188 <pvPortMalloc+0x190>)
 8007128:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800712a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712c:	685a      	ldr	r2, [r3, #4]
 800712e:	4b13      	ldr	r3, [pc, #76]	; (800717c <pvPortMalloc+0x184>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	431a      	orrs	r2, r3
 8007134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007136:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713a:	2200      	movs	r2, #0
 800713c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800713e:	4b13      	ldr	r3, [pc, #76]	; (800718c <pvPortMalloc+0x194>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	3301      	adds	r3, #1
 8007144:	4a11      	ldr	r2, [pc, #68]	; (800718c <pvPortMalloc+0x194>)
 8007146:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007148:	f7fe fa90 	bl	800566c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	f003 0307 	and.w	r3, r3, #7
 8007152:	2b00      	cmp	r3, #0
 8007154:	d00a      	beq.n	800716c <pvPortMalloc+0x174>
	__asm volatile
 8007156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800715a:	f383 8811 	msr	BASEPRI, r3
 800715e:	f3bf 8f6f 	isb	sy
 8007162:	f3bf 8f4f 	dsb	sy
 8007166:	60fb      	str	r3, [r7, #12]
}
 8007168:	bf00      	nop
 800716a:	e7fe      	b.n	800716a <pvPortMalloc+0x172>
	return pvReturn;
 800716c:	69fb      	ldr	r3, [r7, #28]
}
 800716e:	4618      	mov	r0, r3
 8007170:	3728      	adds	r7, #40	; 0x28
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	20004e50 	.word	0x20004e50
 800717c:	20004e64 	.word	0x20004e64
 8007180:	20004e54 	.word	0x20004e54
 8007184:	20004e48 	.word	0x20004e48
 8007188:	20004e58 	.word	0x20004e58
 800718c:	20004e5c 	.word	0x20004e5c

08007190 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b086      	sub	sp, #24
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d04d      	beq.n	800723e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80071a2:	2308      	movs	r3, #8
 80071a4:	425b      	negs	r3, r3
 80071a6:	697a      	ldr	r2, [r7, #20]
 80071a8:	4413      	add	r3, r2
 80071aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80071b0:	693b      	ldr	r3, [r7, #16]
 80071b2:	685a      	ldr	r2, [r3, #4]
 80071b4:	4b24      	ldr	r3, [pc, #144]	; (8007248 <vPortFree+0xb8>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4013      	ands	r3, r2
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d10a      	bne.n	80071d4 <vPortFree+0x44>
	__asm volatile
 80071be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c2:	f383 8811 	msr	BASEPRI, r3
 80071c6:	f3bf 8f6f 	isb	sy
 80071ca:	f3bf 8f4f 	dsb	sy
 80071ce:	60fb      	str	r3, [r7, #12]
}
 80071d0:	bf00      	nop
 80071d2:	e7fe      	b.n	80071d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00a      	beq.n	80071f2 <vPortFree+0x62>
	__asm volatile
 80071dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e0:	f383 8811 	msr	BASEPRI, r3
 80071e4:	f3bf 8f6f 	isb	sy
 80071e8:	f3bf 8f4f 	dsb	sy
 80071ec:	60bb      	str	r3, [r7, #8]
}
 80071ee:	bf00      	nop
 80071f0:	e7fe      	b.n	80071f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80071f2:	693b      	ldr	r3, [r7, #16]
 80071f4:	685a      	ldr	r2, [r3, #4]
 80071f6:	4b14      	ldr	r3, [pc, #80]	; (8007248 <vPortFree+0xb8>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4013      	ands	r3, r2
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d01e      	beq.n	800723e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d11a      	bne.n	800723e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	685a      	ldr	r2, [r3, #4]
 800720c:	4b0e      	ldr	r3, [pc, #56]	; (8007248 <vPortFree+0xb8>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	43db      	mvns	r3, r3
 8007212:	401a      	ands	r2, r3
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007218:	f7fe fa1a 	bl	8005650 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	685a      	ldr	r2, [r3, #4]
 8007220:	4b0a      	ldr	r3, [pc, #40]	; (800724c <vPortFree+0xbc>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4413      	add	r3, r2
 8007226:	4a09      	ldr	r2, [pc, #36]	; (800724c <vPortFree+0xbc>)
 8007228:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800722a:	6938      	ldr	r0, [r7, #16]
 800722c:	f000 f874 	bl	8007318 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007230:	4b07      	ldr	r3, [pc, #28]	; (8007250 <vPortFree+0xc0>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	3301      	adds	r3, #1
 8007236:	4a06      	ldr	r2, [pc, #24]	; (8007250 <vPortFree+0xc0>)
 8007238:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800723a:	f7fe fa17 	bl	800566c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800723e:	bf00      	nop
 8007240:	3718      	adds	r7, #24
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop
 8007248:	20004e64 	.word	0x20004e64
 800724c:	20004e54 	.word	0x20004e54
 8007250:	20004e60 	.word	0x20004e60

08007254 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007254:	b480      	push	{r7}
 8007256:	b085      	sub	sp, #20
 8007258:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800725a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800725e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007260:	4b27      	ldr	r3, [pc, #156]	; (8007300 <prvHeapInit+0xac>)
 8007262:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f003 0307 	and.w	r3, r3, #7
 800726a:	2b00      	cmp	r3, #0
 800726c:	d00c      	beq.n	8007288 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	3307      	adds	r3, #7
 8007272:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f023 0307 	bic.w	r3, r3, #7
 800727a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800727c:	68ba      	ldr	r2, [r7, #8]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	1ad3      	subs	r3, r2, r3
 8007282:	4a1f      	ldr	r2, [pc, #124]	; (8007300 <prvHeapInit+0xac>)
 8007284:	4413      	add	r3, r2
 8007286:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800728c:	4a1d      	ldr	r2, [pc, #116]	; (8007304 <prvHeapInit+0xb0>)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007292:	4b1c      	ldr	r3, [pc, #112]	; (8007304 <prvHeapInit+0xb0>)
 8007294:	2200      	movs	r2, #0
 8007296:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	68ba      	ldr	r2, [r7, #8]
 800729c:	4413      	add	r3, r2
 800729e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80072a0:	2208      	movs	r2, #8
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	1a9b      	subs	r3, r3, r2
 80072a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f023 0307 	bic.w	r3, r3, #7
 80072ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	4a15      	ldr	r2, [pc, #84]	; (8007308 <prvHeapInit+0xb4>)
 80072b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80072b6:	4b14      	ldr	r3, [pc, #80]	; (8007308 <prvHeapInit+0xb4>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	2200      	movs	r2, #0
 80072bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80072be:	4b12      	ldr	r3, [pc, #72]	; (8007308 <prvHeapInit+0xb4>)
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	2200      	movs	r2, #0
 80072c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	68fa      	ldr	r2, [r7, #12]
 80072ce:	1ad2      	subs	r2, r2, r3
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80072d4:	4b0c      	ldr	r3, [pc, #48]	; (8007308 <prvHeapInit+0xb4>)
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	4a0a      	ldr	r2, [pc, #40]	; (800730c <prvHeapInit+0xb8>)
 80072e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	4a09      	ldr	r2, [pc, #36]	; (8007310 <prvHeapInit+0xbc>)
 80072ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80072ec:	4b09      	ldr	r3, [pc, #36]	; (8007314 <prvHeapInit+0xc0>)
 80072ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80072f2:	601a      	str	r2, [r3, #0]
}
 80072f4:	bf00      	nop
 80072f6:	3714      	adds	r7, #20
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr
 8007300:	20001248 	.word	0x20001248
 8007304:	20004e48 	.word	0x20004e48
 8007308:	20004e50 	.word	0x20004e50
 800730c:	20004e58 	.word	0x20004e58
 8007310:	20004e54 	.word	0x20004e54
 8007314:	20004e64 	.word	0x20004e64

08007318 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007318:	b480      	push	{r7}
 800731a:	b085      	sub	sp, #20
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007320:	4b28      	ldr	r3, [pc, #160]	; (80073c4 <prvInsertBlockIntoFreeList+0xac>)
 8007322:	60fb      	str	r3, [r7, #12]
 8007324:	e002      	b.n	800732c <prvInsertBlockIntoFreeList+0x14>
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	60fb      	str	r3, [r7, #12]
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	429a      	cmp	r2, r3
 8007334:	d8f7      	bhi.n	8007326 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	68ba      	ldr	r2, [r7, #8]
 8007340:	4413      	add	r3, r2
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	429a      	cmp	r2, r3
 8007346:	d108      	bne.n	800735a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	685a      	ldr	r2, [r3, #4]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	441a      	add	r2, r3
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	68ba      	ldr	r2, [r7, #8]
 8007364:	441a      	add	r2, r3
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	429a      	cmp	r2, r3
 800736c:	d118      	bne.n	80073a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681a      	ldr	r2, [r3, #0]
 8007372:	4b15      	ldr	r3, [pc, #84]	; (80073c8 <prvInsertBlockIntoFreeList+0xb0>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	429a      	cmp	r2, r3
 8007378:	d00d      	beq.n	8007396 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	685a      	ldr	r2, [r3, #4]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	441a      	add	r2, r3
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	601a      	str	r2, [r3, #0]
 8007394:	e008      	b.n	80073a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007396:	4b0c      	ldr	r3, [pc, #48]	; (80073c8 <prvInsertBlockIntoFreeList+0xb0>)
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	601a      	str	r2, [r3, #0]
 800739e:	e003      	b.n	80073a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80073a8:	68fa      	ldr	r2, [r7, #12]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d002      	beq.n	80073b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073b6:	bf00      	nop
 80073b8:	3714      	adds	r7, #20
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr
 80073c2:	bf00      	nop
 80073c4:	20004e48 	.word	0x20004e48
 80073c8:	20004e50 	.word	0x20004e50

080073cc <__cvt>:
 80073cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073d0:	ec55 4b10 	vmov	r4, r5, d0
 80073d4:	2d00      	cmp	r5, #0
 80073d6:	460e      	mov	r6, r1
 80073d8:	4619      	mov	r1, r3
 80073da:	462b      	mov	r3, r5
 80073dc:	bfbb      	ittet	lt
 80073de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80073e2:	461d      	movlt	r5, r3
 80073e4:	2300      	movge	r3, #0
 80073e6:	232d      	movlt	r3, #45	; 0x2d
 80073e8:	700b      	strb	r3, [r1, #0]
 80073ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073ec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80073f0:	4691      	mov	r9, r2
 80073f2:	f023 0820 	bic.w	r8, r3, #32
 80073f6:	bfbc      	itt	lt
 80073f8:	4622      	movlt	r2, r4
 80073fa:	4614      	movlt	r4, r2
 80073fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007400:	d005      	beq.n	800740e <__cvt+0x42>
 8007402:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007406:	d100      	bne.n	800740a <__cvt+0x3e>
 8007408:	3601      	adds	r6, #1
 800740a:	2102      	movs	r1, #2
 800740c:	e000      	b.n	8007410 <__cvt+0x44>
 800740e:	2103      	movs	r1, #3
 8007410:	ab03      	add	r3, sp, #12
 8007412:	9301      	str	r3, [sp, #4]
 8007414:	ab02      	add	r3, sp, #8
 8007416:	9300      	str	r3, [sp, #0]
 8007418:	ec45 4b10 	vmov	d0, r4, r5
 800741c:	4653      	mov	r3, sl
 800741e:	4632      	mov	r2, r6
 8007420:	f000 ffae 	bl	8008380 <_dtoa_r>
 8007424:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007428:	4607      	mov	r7, r0
 800742a:	d102      	bne.n	8007432 <__cvt+0x66>
 800742c:	f019 0f01 	tst.w	r9, #1
 8007430:	d022      	beq.n	8007478 <__cvt+0xac>
 8007432:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007436:	eb07 0906 	add.w	r9, r7, r6
 800743a:	d110      	bne.n	800745e <__cvt+0x92>
 800743c:	783b      	ldrb	r3, [r7, #0]
 800743e:	2b30      	cmp	r3, #48	; 0x30
 8007440:	d10a      	bne.n	8007458 <__cvt+0x8c>
 8007442:	2200      	movs	r2, #0
 8007444:	2300      	movs	r3, #0
 8007446:	4620      	mov	r0, r4
 8007448:	4629      	mov	r1, r5
 800744a:	f7f9 fb45 	bl	8000ad8 <__aeabi_dcmpeq>
 800744e:	b918      	cbnz	r0, 8007458 <__cvt+0x8c>
 8007450:	f1c6 0601 	rsb	r6, r6, #1
 8007454:	f8ca 6000 	str.w	r6, [sl]
 8007458:	f8da 3000 	ldr.w	r3, [sl]
 800745c:	4499      	add	r9, r3
 800745e:	2200      	movs	r2, #0
 8007460:	2300      	movs	r3, #0
 8007462:	4620      	mov	r0, r4
 8007464:	4629      	mov	r1, r5
 8007466:	f7f9 fb37 	bl	8000ad8 <__aeabi_dcmpeq>
 800746a:	b108      	cbz	r0, 8007470 <__cvt+0xa4>
 800746c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007470:	2230      	movs	r2, #48	; 0x30
 8007472:	9b03      	ldr	r3, [sp, #12]
 8007474:	454b      	cmp	r3, r9
 8007476:	d307      	bcc.n	8007488 <__cvt+0xbc>
 8007478:	9b03      	ldr	r3, [sp, #12]
 800747a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800747c:	1bdb      	subs	r3, r3, r7
 800747e:	4638      	mov	r0, r7
 8007480:	6013      	str	r3, [r2, #0]
 8007482:	b004      	add	sp, #16
 8007484:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007488:	1c59      	adds	r1, r3, #1
 800748a:	9103      	str	r1, [sp, #12]
 800748c:	701a      	strb	r2, [r3, #0]
 800748e:	e7f0      	b.n	8007472 <__cvt+0xa6>

08007490 <__exponent>:
 8007490:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007492:	4603      	mov	r3, r0
 8007494:	2900      	cmp	r1, #0
 8007496:	bfb8      	it	lt
 8007498:	4249      	neglt	r1, r1
 800749a:	f803 2b02 	strb.w	r2, [r3], #2
 800749e:	bfb4      	ite	lt
 80074a0:	222d      	movlt	r2, #45	; 0x2d
 80074a2:	222b      	movge	r2, #43	; 0x2b
 80074a4:	2909      	cmp	r1, #9
 80074a6:	7042      	strb	r2, [r0, #1]
 80074a8:	dd2a      	ble.n	8007500 <__exponent+0x70>
 80074aa:	f10d 0207 	add.w	r2, sp, #7
 80074ae:	4617      	mov	r7, r2
 80074b0:	260a      	movs	r6, #10
 80074b2:	4694      	mov	ip, r2
 80074b4:	fb91 f5f6 	sdiv	r5, r1, r6
 80074b8:	fb06 1415 	mls	r4, r6, r5, r1
 80074bc:	3430      	adds	r4, #48	; 0x30
 80074be:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80074c2:	460c      	mov	r4, r1
 80074c4:	2c63      	cmp	r4, #99	; 0x63
 80074c6:	f102 32ff 	add.w	r2, r2, #4294967295
 80074ca:	4629      	mov	r1, r5
 80074cc:	dcf1      	bgt.n	80074b2 <__exponent+0x22>
 80074ce:	3130      	adds	r1, #48	; 0x30
 80074d0:	f1ac 0402 	sub.w	r4, ip, #2
 80074d4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80074d8:	1c41      	adds	r1, r0, #1
 80074da:	4622      	mov	r2, r4
 80074dc:	42ba      	cmp	r2, r7
 80074de:	d30a      	bcc.n	80074f6 <__exponent+0x66>
 80074e0:	f10d 0209 	add.w	r2, sp, #9
 80074e4:	eba2 020c 	sub.w	r2, r2, ip
 80074e8:	42bc      	cmp	r4, r7
 80074ea:	bf88      	it	hi
 80074ec:	2200      	movhi	r2, #0
 80074ee:	4413      	add	r3, r2
 80074f0:	1a18      	subs	r0, r3, r0
 80074f2:	b003      	add	sp, #12
 80074f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074f6:	f812 5b01 	ldrb.w	r5, [r2], #1
 80074fa:	f801 5f01 	strb.w	r5, [r1, #1]!
 80074fe:	e7ed      	b.n	80074dc <__exponent+0x4c>
 8007500:	2330      	movs	r3, #48	; 0x30
 8007502:	3130      	adds	r1, #48	; 0x30
 8007504:	7083      	strb	r3, [r0, #2]
 8007506:	70c1      	strb	r1, [r0, #3]
 8007508:	1d03      	adds	r3, r0, #4
 800750a:	e7f1      	b.n	80074f0 <__exponent+0x60>

0800750c <_printf_float>:
 800750c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007510:	ed2d 8b02 	vpush	{d8}
 8007514:	b08d      	sub	sp, #52	; 0x34
 8007516:	460c      	mov	r4, r1
 8007518:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800751c:	4616      	mov	r6, r2
 800751e:	461f      	mov	r7, r3
 8007520:	4605      	mov	r5, r0
 8007522:	f000 fdc9 	bl	80080b8 <_localeconv_r>
 8007526:	f8d0 a000 	ldr.w	sl, [r0]
 800752a:	4650      	mov	r0, sl
 800752c:	f7f8 fea8 	bl	8000280 <strlen>
 8007530:	2300      	movs	r3, #0
 8007532:	930a      	str	r3, [sp, #40]	; 0x28
 8007534:	6823      	ldr	r3, [r4, #0]
 8007536:	9305      	str	r3, [sp, #20]
 8007538:	f8d8 3000 	ldr.w	r3, [r8]
 800753c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007540:	3307      	adds	r3, #7
 8007542:	f023 0307 	bic.w	r3, r3, #7
 8007546:	f103 0208 	add.w	r2, r3, #8
 800754a:	f8c8 2000 	str.w	r2, [r8]
 800754e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007552:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007556:	9307      	str	r3, [sp, #28]
 8007558:	f8cd 8018 	str.w	r8, [sp, #24]
 800755c:	ee08 0a10 	vmov	s16, r0
 8007560:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007564:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007568:	4b9e      	ldr	r3, [pc, #632]	; (80077e4 <_printf_float+0x2d8>)
 800756a:	f04f 32ff 	mov.w	r2, #4294967295
 800756e:	f7f9 fae5 	bl	8000b3c <__aeabi_dcmpun>
 8007572:	bb88      	cbnz	r0, 80075d8 <_printf_float+0xcc>
 8007574:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007578:	4b9a      	ldr	r3, [pc, #616]	; (80077e4 <_printf_float+0x2d8>)
 800757a:	f04f 32ff 	mov.w	r2, #4294967295
 800757e:	f7f9 fabf 	bl	8000b00 <__aeabi_dcmple>
 8007582:	bb48      	cbnz	r0, 80075d8 <_printf_float+0xcc>
 8007584:	2200      	movs	r2, #0
 8007586:	2300      	movs	r3, #0
 8007588:	4640      	mov	r0, r8
 800758a:	4649      	mov	r1, r9
 800758c:	f7f9 faae 	bl	8000aec <__aeabi_dcmplt>
 8007590:	b110      	cbz	r0, 8007598 <_printf_float+0x8c>
 8007592:	232d      	movs	r3, #45	; 0x2d
 8007594:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007598:	4a93      	ldr	r2, [pc, #588]	; (80077e8 <_printf_float+0x2dc>)
 800759a:	4b94      	ldr	r3, [pc, #592]	; (80077ec <_printf_float+0x2e0>)
 800759c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80075a0:	bf94      	ite	ls
 80075a2:	4690      	movls	r8, r2
 80075a4:	4698      	movhi	r8, r3
 80075a6:	2303      	movs	r3, #3
 80075a8:	6123      	str	r3, [r4, #16]
 80075aa:	9b05      	ldr	r3, [sp, #20]
 80075ac:	f023 0304 	bic.w	r3, r3, #4
 80075b0:	6023      	str	r3, [r4, #0]
 80075b2:	f04f 0900 	mov.w	r9, #0
 80075b6:	9700      	str	r7, [sp, #0]
 80075b8:	4633      	mov	r3, r6
 80075ba:	aa0b      	add	r2, sp, #44	; 0x2c
 80075bc:	4621      	mov	r1, r4
 80075be:	4628      	mov	r0, r5
 80075c0:	f000 f9da 	bl	8007978 <_printf_common>
 80075c4:	3001      	adds	r0, #1
 80075c6:	f040 8090 	bne.w	80076ea <_printf_float+0x1de>
 80075ca:	f04f 30ff 	mov.w	r0, #4294967295
 80075ce:	b00d      	add	sp, #52	; 0x34
 80075d0:	ecbd 8b02 	vpop	{d8}
 80075d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075d8:	4642      	mov	r2, r8
 80075da:	464b      	mov	r3, r9
 80075dc:	4640      	mov	r0, r8
 80075de:	4649      	mov	r1, r9
 80075e0:	f7f9 faac 	bl	8000b3c <__aeabi_dcmpun>
 80075e4:	b140      	cbz	r0, 80075f8 <_printf_float+0xec>
 80075e6:	464b      	mov	r3, r9
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	bfbc      	itt	lt
 80075ec:	232d      	movlt	r3, #45	; 0x2d
 80075ee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80075f2:	4a7f      	ldr	r2, [pc, #508]	; (80077f0 <_printf_float+0x2e4>)
 80075f4:	4b7f      	ldr	r3, [pc, #508]	; (80077f4 <_printf_float+0x2e8>)
 80075f6:	e7d1      	b.n	800759c <_printf_float+0x90>
 80075f8:	6863      	ldr	r3, [r4, #4]
 80075fa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80075fe:	9206      	str	r2, [sp, #24]
 8007600:	1c5a      	adds	r2, r3, #1
 8007602:	d13f      	bne.n	8007684 <_printf_float+0x178>
 8007604:	2306      	movs	r3, #6
 8007606:	6063      	str	r3, [r4, #4]
 8007608:	9b05      	ldr	r3, [sp, #20]
 800760a:	6861      	ldr	r1, [r4, #4]
 800760c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007610:	2300      	movs	r3, #0
 8007612:	9303      	str	r3, [sp, #12]
 8007614:	ab0a      	add	r3, sp, #40	; 0x28
 8007616:	e9cd b301 	strd	fp, r3, [sp, #4]
 800761a:	ab09      	add	r3, sp, #36	; 0x24
 800761c:	ec49 8b10 	vmov	d0, r8, r9
 8007620:	9300      	str	r3, [sp, #0]
 8007622:	6022      	str	r2, [r4, #0]
 8007624:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007628:	4628      	mov	r0, r5
 800762a:	f7ff fecf 	bl	80073cc <__cvt>
 800762e:	9b06      	ldr	r3, [sp, #24]
 8007630:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007632:	2b47      	cmp	r3, #71	; 0x47
 8007634:	4680      	mov	r8, r0
 8007636:	d108      	bne.n	800764a <_printf_float+0x13e>
 8007638:	1cc8      	adds	r0, r1, #3
 800763a:	db02      	blt.n	8007642 <_printf_float+0x136>
 800763c:	6863      	ldr	r3, [r4, #4]
 800763e:	4299      	cmp	r1, r3
 8007640:	dd41      	ble.n	80076c6 <_printf_float+0x1ba>
 8007642:	f1ab 0302 	sub.w	r3, fp, #2
 8007646:	fa5f fb83 	uxtb.w	fp, r3
 800764a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800764e:	d820      	bhi.n	8007692 <_printf_float+0x186>
 8007650:	3901      	subs	r1, #1
 8007652:	465a      	mov	r2, fp
 8007654:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007658:	9109      	str	r1, [sp, #36]	; 0x24
 800765a:	f7ff ff19 	bl	8007490 <__exponent>
 800765e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007660:	1813      	adds	r3, r2, r0
 8007662:	2a01      	cmp	r2, #1
 8007664:	4681      	mov	r9, r0
 8007666:	6123      	str	r3, [r4, #16]
 8007668:	dc02      	bgt.n	8007670 <_printf_float+0x164>
 800766a:	6822      	ldr	r2, [r4, #0]
 800766c:	07d2      	lsls	r2, r2, #31
 800766e:	d501      	bpl.n	8007674 <_printf_float+0x168>
 8007670:	3301      	adds	r3, #1
 8007672:	6123      	str	r3, [r4, #16]
 8007674:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007678:	2b00      	cmp	r3, #0
 800767a:	d09c      	beq.n	80075b6 <_printf_float+0xaa>
 800767c:	232d      	movs	r3, #45	; 0x2d
 800767e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007682:	e798      	b.n	80075b6 <_printf_float+0xaa>
 8007684:	9a06      	ldr	r2, [sp, #24]
 8007686:	2a47      	cmp	r2, #71	; 0x47
 8007688:	d1be      	bne.n	8007608 <_printf_float+0xfc>
 800768a:	2b00      	cmp	r3, #0
 800768c:	d1bc      	bne.n	8007608 <_printf_float+0xfc>
 800768e:	2301      	movs	r3, #1
 8007690:	e7b9      	b.n	8007606 <_printf_float+0xfa>
 8007692:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007696:	d118      	bne.n	80076ca <_printf_float+0x1be>
 8007698:	2900      	cmp	r1, #0
 800769a:	6863      	ldr	r3, [r4, #4]
 800769c:	dd0b      	ble.n	80076b6 <_printf_float+0x1aa>
 800769e:	6121      	str	r1, [r4, #16]
 80076a0:	b913      	cbnz	r3, 80076a8 <_printf_float+0x19c>
 80076a2:	6822      	ldr	r2, [r4, #0]
 80076a4:	07d0      	lsls	r0, r2, #31
 80076a6:	d502      	bpl.n	80076ae <_printf_float+0x1a2>
 80076a8:	3301      	adds	r3, #1
 80076aa:	440b      	add	r3, r1
 80076ac:	6123      	str	r3, [r4, #16]
 80076ae:	65a1      	str	r1, [r4, #88]	; 0x58
 80076b0:	f04f 0900 	mov.w	r9, #0
 80076b4:	e7de      	b.n	8007674 <_printf_float+0x168>
 80076b6:	b913      	cbnz	r3, 80076be <_printf_float+0x1b2>
 80076b8:	6822      	ldr	r2, [r4, #0]
 80076ba:	07d2      	lsls	r2, r2, #31
 80076bc:	d501      	bpl.n	80076c2 <_printf_float+0x1b6>
 80076be:	3302      	adds	r3, #2
 80076c0:	e7f4      	b.n	80076ac <_printf_float+0x1a0>
 80076c2:	2301      	movs	r3, #1
 80076c4:	e7f2      	b.n	80076ac <_printf_float+0x1a0>
 80076c6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80076ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076cc:	4299      	cmp	r1, r3
 80076ce:	db05      	blt.n	80076dc <_printf_float+0x1d0>
 80076d0:	6823      	ldr	r3, [r4, #0]
 80076d2:	6121      	str	r1, [r4, #16]
 80076d4:	07d8      	lsls	r0, r3, #31
 80076d6:	d5ea      	bpl.n	80076ae <_printf_float+0x1a2>
 80076d8:	1c4b      	adds	r3, r1, #1
 80076da:	e7e7      	b.n	80076ac <_printf_float+0x1a0>
 80076dc:	2900      	cmp	r1, #0
 80076de:	bfd4      	ite	le
 80076e0:	f1c1 0202 	rsble	r2, r1, #2
 80076e4:	2201      	movgt	r2, #1
 80076e6:	4413      	add	r3, r2
 80076e8:	e7e0      	b.n	80076ac <_printf_float+0x1a0>
 80076ea:	6823      	ldr	r3, [r4, #0]
 80076ec:	055a      	lsls	r2, r3, #21
 80076ee:	d407      	bmi.n	8007700 <_printf_float+0x1f4>
 80076f0:	6923      	ldr	r3, [r4, #16]
 80076f2:	4642      	mov	r2, r8
 80076f4:	4631      	mov	r1, r6
 80076f6:	4628      	mov	r0, r5
 80076f8:	47b8      	blx	r7
 80076fa:	3001      	adds	r0, #1
 80076fc:	d12c      	bne.n	8007758 <_printf_float+0x24c>
 80076fe:	e764      	b.n	80075ca <_printf_float+0xbe>
 8007700:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007704:	f240 80e0 	bls.w	80078c8 <_printf_float+0x3bc>
 8007708:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800770c:	2200      	movs	r2, #0
 800770e:	2300      	movs	r3, #0
 8007710:	f7f9 f9e2 	bl	8000ad8 <__aeabi_dcmpeq>
 8007714:	2800      	cmp	r0, #0
 8007716:	d034      	beq.n	8007782 <_printf_float+0x276>
 8007718:	4a37      	ldr	r2, [pc, #220]	; (80077f8 <_printf_float+0x2ec>)
 800771a:	2301      	movs	r3, #1
 800771c:	4631      	mov	r1, r6
 800771e:	4628      	mov	r0, r5
 8007720:	47b8      	blx	r7
 8007722:	3001      	adds	r0, #1
 8007724:	f43f af51 	beq.w	80075ca <_printf_float+0xbe>
 8007728:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800772c:	429a      	cmp	r2, r3
 800772e:	db02      	blt.n	8007736 <_printf_float+0x22a>
 8007730:	6823      	ldr	r3, [r4, #0]
 8007732:	07d8      	lsls	r0, r3, #31
 8007734:	d510      	bpl.n	8007758 <_printf_float+0x24c>
 8007736:	ee18 3a10 	vmov	r3, s16
 800773a:	4652      	mov	r2, sl
 800773c:	4631      	mov	r1, r6
 800773e:	4628      	mov	r0, r5
 8007740:	47b8      	blx	r7
 8007742:	3001      	adds	r0, #1
 8007744:	f43f af41 	beq.w	80075ca <_printf_float+0xbe>
 8007748:	f04f 0800 	mov.w	r8, #0
 800774c:	f104 091a 	add.w	r9, r4, #26
 8007750:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007752:	3b01      	subs	r3, #1
 8007754:	4543      	cmp	r3, r8
 8007756:	dc09      	bgt.n	800776c <_printf_float+0x260>
 8007758:	6823      	ldr	r3, [r4, #0]
 800775a:	079b      	lsls	r3, r3, #30
 800775c:	f100 8107 	bmi.w	800796e <_printf_float+0x462>
 8007760:	68e0      	ldr	r0, [r4, #12]
 8007762:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007764:	4298      	cmp	r0, r3
 8007766:	bfb8      	it	lt
 8007768:	4618      	movlt	r0, r3
 800776a:	e730      	b.n	80075ce <_printf_float+0xc2>
 800776c:	2301      	movs	r3, #1
 800776e:	464a      	mov	r2, r9
 8007770:	4631      	mov	r1, r6
 8007772:	4628      	mov	r0, r5
 8007774:	47b8      	blx	r7
 8007776:	3001      	adds	r0, #1
 8007778:	f43f af27 	beq.w	80075ca <_printf_float+0xbe>
 800777c:	f108 0801 	add.w	r8, r8, #1
 8007780:	e7e6      	b.n	8007750 <_printf_float+0x244>
 8007782:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007784:	2b00      	cmp	r3, #0
 8007786:	dc39      	bgt.n	80077fc <_printf_float+0x2f0>
 8007788:	4a1b      	ldr	r2, [pc, #108]	; (80077f8 <_printf_float+0x2ec>)
 800778a:	2301      	movs	r3, #1
 800778c:	4631      	mov	r1, r6
 800778e:	4628      	mov	r0, r5
 8007790:	47b8      	blx	r7
 8007792:	3001      	adds	r0, #1
 8007794:	f43f af19 	beq.w	80075ca <_printf_float+0xbe>
 8007798:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800779c:	4313      	orrs	r3, r2
 800779e:	d102      	bne.n	80077a6 <_printf_float+0x29a>
 80077a0:	6823      	ldr	r3, [r4, #0]
 80077a2:	07d9      	lsls	r1, r3, #31
 80077a4:	d5d8      	bpl.n	8007758 <_printf_float+0x24c>
 80077a6:	ee18 3a10 	vmov	r3, s16
 80077aa:	4652      	mov	r2, sl
 80077ac:	4631      	mov	r1, r6
 80077ae:	4628      	mov	r0, r5
 80077b0:	47b8      	blx	r7
 80077b2:	3001      	adds	r0, #1
 80077b4:	f43f af09 	beq.w	80075ca <_printf_float+0xbe>
 80077b8:	f04f 0900 	mov.w	r9, #0
 80077bc:	f104 0a1a 	add.w	sl, r4, #26
 80077c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077c2:	425b      	negs	r3, r3
 80077c4:	454b      	cmp	r3, r9
 80077c6:	dc01      	bgt.n	80077cc <_printf_float+0x2c0>
 80077c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077ca:	e792      	b.n	80076f2 <_printf_float+0x1e6>
 80077cc:	2301      	movs	r3, #1
 80077ce:	4652      	mov	r2, sl
 80077d0:	4631      	mov	r1, r6
 80077d2:	4628      	mov	r0, r5
 80077d4:	47b8      	blx	r7
 80077d6:	3001      	adds	r0, #1
 80077d8:	f43f aef7 	beq.w	80075ca <_printf_float+0xbe>
 80077dc:	f109 0901 	add.w	r9, r9, #1
 80077e0:	e7ee      	b.n	80077c0 <_printf_float+0x2b4>
 80077e2:	bf00      	nop
 80077e4:	7fefffff 	.word	0x7fefffff
 80077e8:	0800a154 	.word	0x0800a154
 80077ec:	0800a158 	.word	0x0800a158
 80077f0:	0800a15c 	.word	0x0800a15c
 80077f4:	0800a160 	.word	0x0800a160
 80077f8:	0800a164 	.word	0x0800a164
 80077fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007800:	429a      	cmp	r2, r3
 8007802:	bfa8      	it	ge
 8007804:	461a      	movge	r2, r3
 8007806:	2a00      	cmp	r2, #0
 8007808:	4691      	mov	r9, r2
 800780a:	dc37      	bgt.n	800787c <_printf_float+0x370>
 800780c:	f04f 0b00 	mov.w	fp, #0
 8007810:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007814:	f104 021a 	add.w	r2, r4, #26
 8007818:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800781a:	9305      	str	r3, [sp, #20]
 800781c:	eba3 0309 	sub.w	r3, r3, r9
 8007820:	455b      	cmp	r3, fp
 8007822:	dc33      	bgt.n	800788c <_printf_float+0x380>
 8007824:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007828:	429a      	cmp	r2, r3
 800782a:	db3b      	blt.n	80078a4 <_printf_float+0x398>
 800782c:	6823      	ldr	r3, [r4, #0]
 800782e:	07da      	lsls	r2, r3, #31
 8007830:	d438      	bmi.n	80078a4 <_printf_float+0x398>
 8007832:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007836:	eba2 0903 	sub.w	r9, r2, r3
 800783a:	9b05      	ldr	r3, [sp, #20]
 800783c:	1ad2      	subs	r2, r2, r3
 800783e:	4591      	cmp	r9, r2
 8007840:	bfa8      	it	ge
 8007842:	4691      	movge	r9, r2
 8007844:	f1b9 0f00 	cmp.w	r9, #0
 8007848:	dc35      	bgt.n	80078b6 <_printf_float+0x3aa>
 800784a:	f04f 0800 	mov.w	r8, #0
 800784e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007852:	f104 0a1a 	add.w	sl, r4, #26
 8007856:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800785a:	1a9b      	subs	r3, r3, r2
 800785c:	eba3 0309 	sub.w	r3, r3, r9
 8007860:	4543      	cmp	r3, r8
 8007862:	f77f af79 	ble.w	8007758 <_printf_float+0x24c>
 8007866:	2301      	movs	r3, #1
 8007868:	4652      	mov	r2, sl
 800786a:	4631      	mov	r1, r6
 800786c:	4628      	mov	r0, r5
 800786e:	47b8      	blx	r7
 8007870:	3001      	adds	r0, #1
 8007872:	f43f aeaa 	beq.w	80075ca <_printf_float+0xbe>
 8007876:	f108 0801 	add.w	r8, r8, #1
 800787a:	e7ec      	b.n	8007856 <_printf_float+0x34a>
 800787c:	4613      	mov	r3, r2
 800787e:	4631      	mov	r1, r6
 8007880:	4642      	mov	r2, r8
 8007882:	4628      	mov	r0, r5
 8007884:	47b8      	blx	r7
 8007886:	3001      	adds	r0, #1
 8007888:	d1c0      	bne.n	800780c <_printf_float+0x300>
 800788a:	e69e      	b.n	80075ca <_printf_float+0xbe>
 800788c:	2301      	movs	r3, #1
 800788e:	4631      	mov	r1, r6
 8007890:	4628      	mov	r0, r5
 8007892:	9205      	str	r2, [sp, #20]
 8007894:	47b8      	blx	r7
 8007896:	3001      	adds	r0, #1
 8007898:	f43f ae97 	beq.w	80075ca <_printf_float+0xbe>
 800789c:	9a05      	ldr	r2, [sp, #20]
 800789e:	f10b 0b01 	add.w	fp, fp, #1
 80078a2:	e7b9      	b.n	8007818 <_printf_float+0x30c>
 80078a4:	ee18 3a10 	vmov	r3, s16
 80078a8:	4652      	mov	r2, sl
 80078aa:	4631      	mov	r1, r6
 80078ac:	4628      	mov	r0, r5
 80078ae:	47b8      	blx	r7
 80078b0:	3001      	adds	r0, #1
 80078b2:	d1be      	bne.n	8007832 <_printf_float+0x326>
 80078b4:	e689      	b.n	80075ca <_printf_float+0xbe>
 80078b6:	9a05      	ldr	r2, [sp, #20]
 80078b8:	464b      	mov	r3, r9
 80078ba:	4442      	add	r2, r8
 80078bc:	4631      	mov	r1, r6
 80078be:	4628      	mov	r0, r5
 80078c0:	47b8      	blx	r7
 80078c2:	3001      	adds	r0, #1
 80078c4:	d1c1      	bne.n	800784a <_printf_float+0x33e>
 80078c6:	e680      	b.n	80075ca <_printf_float+0xbe>
 80078c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078ca:	2a01      	cmp	r2, #1
 80078cc:	dc01      	bgt.n	80078d2 <_printf_float+0x3c6>
 80078ce:	07db      	lsls	r3, r3, #31
 80078d0:	d53a      	bpl.n	8007948 <_printf_float+0x43c>
 80078d2:	2301      	movs	r3, #1
 80078d4:	4642      	mov	r2, r8
 80078d6:	4631      	mov	r1, r6
 80078d8:	4628      	mov	r0, r5
 80078da:	47b8      	blx	r7
 80078dc:	3001      	adds	r0, #1
 80078de:	f43f ae74 	beq.w	80075ca <_printf_float+0xbe>
 80078e2:	ee18 3a10 	vmov	r3, s16
 80078e6:	4652      	mov	r2, sl
 80078e8:	4631      	mov	r1, r6
 80078ea:	4628      	mov	r0, r5
 80078ec:	47b8      	blx	r7
 80078ee:	3001      	adds	r0, #1
 80078f0:	f43f ae6b 	beq.w	80075ca <_printf_float+0xbe>
 80078f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80078f8:	2200      	movs	r2, #0
 80078fa:	2300      	movs	r3, #0
 80078fc:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007900:	f7f9 f8ea 	bl	8000ad8 <__aeabi_dcmpeq>
 8007904:	b9d8      	cbnz	r0, 800793e <_printf_float+0x432>
 8007906:	f10a 33ff 	add.w	r3, sl, #4294967295
 800790a:	f108 0201 	add.w	r2, r8, #1
 800790e:	4631      	mov	r1, r6
 8007910:	4628      	mov	r0, r5
 8007912:	47b8      	blx	r7
 8007914:	3001      	adds	r0, #1
 8007916:	d10e      	bne.n	8007936 <_printf_float+0x42a>
 8007918:	e657      	b.n	80075ca <_printf_float+0xbe>
 800791a:	2301      	movs	r3, #1
 800791c:	4652      	mov	r2, sl
 800791e:	4631      	mov	r1, r6
 8007920:	4628      	mov	r0, r5
 8007922:	47b8      	blx	r7
 8007924:	3001      	adds	r0, #1
 8007926:	f43f ae50 	beq.w	80075ca <_printf_float+0xbe>
 800792a:	f108 0801 	add.w	r8, r8, #1
 800792e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007930:	3b01      	subs	r3, #1
 8007932:	4543      	cmp	r3, r8
 8007934:	dcf1      	bgt.n	800791a <_printf_float+0x40e>
 8007936:	464b      	mov	r3, r9
 8007938:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800793c:	e6da      	b.n	80076f4 <_printf_float+0x1e8>
 800793e:	f04f 0800 	mov.w	r8, #0
 8007942:	f104 0a1a 	add.w	sl, r4, #26
 8007946:	e7f2      	b.n	800792e <_printf_float+0x422>
 8007948:	2301      	movs	r3, #1
 800794a:	4642      	mov	r2, r8
 800794c:	e7df      	b.n	800790e <_printf_float+0x402>
 800794e:	2301      	movs	r3, #1
 8007950:	464a      	mov	r2, r9
 8007952:	4631      	mov	r1, r6
 8007954:	4628      	mov	r0, r5
 8007956:	47b8      	blx	r7
 8007958:	3001      	adds	r0, #1
 800795a:	f43f ae36 	beq.w	80075ca <_printf_float+0xbe>
 800795e:	f108 0801 	add.w	r8, r8, #1
 8007962:	68e3      	ldr	r3, [r4, #12]
 8007964:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007966:	1a5b      	subs	r3, r3, r1
 8007968:	4543      	cmp	r3, r8
 800796a:	dcf0      	bgt.n	800794e <_printf_float+0x442>
 800796c:	e6f8      	b.n	8007760 <_printf_float+0x254>
 800796e:	f04f 0800 	mov.w	r8, #0
 8007972:	f104 0919 	add.w	r9, r4, #25
 8007976:	e7f4      	b.n	8007962 <_printf_float+0x456>

08007978 <_printf_common>:
 8007978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800797c:	4616      	mov	r6, r2
 800797e:	4699      	mov	r9, r3
 8007980:	688a      	ldr	r2, [r1, #8]
 8007982:	690b      	ldr	r3, [r1, #16]
 8007984:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007988:	4293      	cmp	r3, r2
 800798a:	bfb8      	it	lt
 800798c:	4613      	movlt	r3, r2
 800798e:	6033      	str	r3, [r6, #0]
 8007990:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007994:	4607      	mov	r7, r0
 8007996:	460c      	mov	r4, r1
 8007998:	b10a      	cbz	r2, 800799e <_printf_common+0x26>
 800799a:	3301      	adds	r3, #1
 800799c:	6033      	str	r3, [r6, #0]
 800799e:	6823      	ldr	r3, [r4, #0]
 80079a0:	0699      	lsls	r1, r3, #26
 80079a2:	bf42      	ittt	mi
 80079a4:	6833      	ldrmi	r3, [r6, #0]
 80079a6:	3302      	addmi	r3, #2
 80079a8:	6033      	strmi	r3, [r6, #0]
 80079aa:	6825      	ldr	r5, [r4, #0]
 80079ac:	f015 0506 	ands.w	r5, r5, #6
 80079b0:	d106      	bne.n	80079c0 <_printf_common+0x48>
 80079b2:	f104 0a19 	add.w	sl, r4, #25
 80079b6:	68e3      	ldr	r3, [r4, #12]
 80079b8:	6832      	ldr	r2, [r6, #0]
 80079ba:	1a9b      	subs	r3, r3, r2
 80079bc:	42ab      	cmp	r3, r5
 80079be:	dc26      	bgt.n	8007a0e <_printf_common+0x96>
 80079c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80079c4:	1e13      	subs	r3, r2, #0
 80079c6:	6822      	ldr	r2, [r4, #0]
 80079c8:	bf18      	it	ne
 80079ca:	2301      	movne	r3, #1
 80079cc:	0692      	lsls	r2, r2, #26
 80079ce:	d42b      	bmi.n	8007a28 <_printf_common+0xb0>
 80079d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80079d4:	4649      	mov	r1, r9
 80079d6:	4638      	mov	r0, r7
 80079d8:	47c0      	blx	r8
 80079da:	3001      	adds	r0, #1
 80079dc:	d01e      	beq.n	8007a1c <_printf_common+0xa4>
 80079de:	6823      	ldr	r3, [r4, #0]
 80079e0:	6922      	ldr	r2, [r4, #16]
 80079e2:	f003 0306 	and.w	r3, r3, #6
 80079e6:	2b04      	cmp	r3, #4
 80079e8:	bf02      	ittt	eq
 80079ea:	68e5      	ldreq	r5, [r4, #12]
 80079ec:	6833      	ldreq	r3, [r6, #0]
 80079ee:	1aed      	subeq	r5, r5, r3
 80079f0:	68a3      	ldr	r3, [r4, #8]
 80079f2:	bf0c      	ite	eq
 80079f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079f8:	2500      	movne	r5, #0
 80079fa:	4293      	cmp	r3, r2
 80079fc:	bfc4      	itt	gt
 80079fe:	1a9b      	subgt	r3, r3, r2
 8007a00:	18ed      	addgt	r5, r5, r3
 8007a02:	2600      	movs	r6, #0
 8007a04:	341a      	adds	r4, #26
 8007a06:	42b5      	cmp	r5, r6
 8007a08:	d11a      	bne.n	8007a40 <_printf_common+0xc8>
 8007a0a:	2000      	movs	r0, #0
 8007a0c:	e008      	b.n	8007a20 <_printf_common+0xa8>
 8007a0e:	2301      	movs	r3, #1
 8007a10:	4652      	mov	r2, sl
 8007a12:	4649      	mov	r1, r9
 8007a14:	4638      	mov	r0, r7
 8007a16:	47c0      	blx	r8
 8007a18:	3001      	adds	r0, #1
 8007a1a:	d103      	bne.n	8007a24 <_printf_common+0xac>
 8007a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a24:	3501      	adds	r5, #1
 8007a26:	e7c6      	b.n	80079b6 <_printf_common+0x3e>
 8007a28:	18e1      	adds	r1, r4, r3
 8007a2a:	1c5a      	adds	r2, r3, #1
 8007a2c:	2030      	movs	r0, #48	; 0x30
 8007a2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a32:	4422      	add	r2, r4
 8007a34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a3c:	3302      	adds	r3, #2
 8007a3e:	e7c7      	b.n	80079d0 <_printf_common+0x58>
 8007a40:	2301      	movs	r3, #1
 8007a42:	4622      	mov	r2, r4
 8007a44:	4649      	mov	r1, r9
 8007a46:	4638      	mov	r0, r7
 8007a48:	47c0      	blx	r8
 8007a4a:	3001      	adds	r0, #1
 8007a4c:	d0e6      	beq.n	8007a1c <_printf_common+0xa4>
 8007a4e:	3601      	adds	r6, #1
 8007a50:	e7d9      	b.n	8007a06 <_printf_common+0x8e>
	...

08007a54 <_printf_i>:
 8007a54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a58:	7e0f      	ldrb	r7, [r1, #24]
 8007a5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007a5c:	2f78      	cmp	r7, #120	; 0x78
 8007a5e:	4691      	mov	r9, r2
 8007a60:	4680      	mov	r8, r0
 8007a62:	460c      	mov	r4, r1
 8007a64:	469a      	mov	sl, r3
 8007a66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007a6a:	d807      	bhi.n	8007a7c <_printf_i+0x28>
 8007a6c:	2f62      	cmp	r7, #98	; 0x62
 8007a6e:	d80a      	bhi.n	8007a86 <_printf_i+0x32>
 8007a70:	2f00      	cmp	r7, #0
 8007a72:	f000 80d4 	beq.w	8007c1e <_printf_i+0x1ca>
 8007a76:	2f58      	cmp	r7, #88	; 0x58
 8007a78:	f000 80c0 	beq.w	8007bfc <_printf_i+0x1a8>
 8007a7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a84:	e03a      	b.n	8007afc <_printf_i+0xa8>
 8007a86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a8a:	2b15      	cmp	r3, #21
 8007a8c:	d8f6      	bhi.n	8007a7c <_printf_i+0x28>
 8007a8e:	a101      	add	r1, pc, #4	; (adr r1, 8007a94 <_printf_i+0x40>)
 8007a90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a94:	08007aed 	.word	0x08007aed
 8007a98:	08007b01 	.word	0x08007b01
 8007a9c:	08007a7d 	.word	0x08007a7d
 8007aa0:	08007a7d 	.word	0x08007a7d
 8007aa4:	08007a7d 	.word	0x08007a7d
 8007aa8:	08007a7d 	.word	0x08007a7d
 8007aac:	08007b01 	.word	0x08007b01
 8007ab0:	08007a7d 	.word	0x08007a7d
 8007ab4:	08007a7d 	.word	0x08007a7d
 8007ab8:	08007a7d 	.word	0x08007a7d
 8007abc:	08007a7d 	.word	0x08007a7d
 8007ac0:	08007c05 	.word	0x08007c05
 8007ac4:	08007b2d 	.word	0x08007b2d
 8007ac8:	08007bbf 	.word	0x08007bbf
 8007acc:	08007a7d 	.word	0x08007a7d
 8007ad0:	08007a7d 	.word	0x08007a7d
 8007ad4:	08007c27 	.word	0x08007c27
 8007ad8:	08007a7d 	.word	0x08007a7d
 8007adc:	08007b2d 	.word	0x08007b2d
 8007ae0:	08007a7d 	.word	0x08007a7d
 8007ae4:	08007a7d 	.word	0x08007a7d
 8007ae8:	08007bc7 	.word	0x08007bc7
 8007aec:	682b      	ldr	r3, [r5, #0]
 8007aee:	1d1a      	adds	r2, r3, #4
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	602a      	str	r2, [r5, #0]
 8007af4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007af8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007afc:	2301      	movs	r3, #1
 8007afe:	e09f      	b.n	8007c40 <_printf_i+0x1ec>
 8007b00:	6820      	ldr	r0, [r4, #0]
 8007b02:	682b      	ldr	r3, [r5, #0]
 8007b04:	0607      	lsls	r7, r0, #24
 8007b06:	f103 0104 	add.w	r1, r3, #4
 8007b0a:	6029      	str	r1, [r5, #0]
 8007b0c:	d501      	bpl.n	8007b12 <_printf_i+0xbe>
 8007b0e:	681e      	ldr	r6, [r3, #0]
 8007b10:	e003      	b.n	8007b1a <_printf_i+0xc6>
 8007b12:	0646      	lsls	r6, r0, #25
 8007b14:	d5fb      	bpl.n	8007b0e <_printf_i+0xba>
 8007b16:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007b1a:	2e00      	cmp	r6, #0
 8007b1c:	da03      	bge.n	8007b26 <_printf_i+0xd2>
 8007b1e:	232d      	movs	r3, #45	; 0x2d
 8007b20:	4276      	negs	r6, r6
 8007b22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b26:	485a      	ldr	r0, [pc, #360]	; (8007c90 <_printf_i+0x23c>)
 8007b28:	230a      	movs	r3, #10
 8007b2a:	e012      	b.n	8007b52 <_printf_i+0xfe>
 8007b2c:	682b      	ldr	r3, [r5, #0]
 8007b2e:	6820      	ldr	r0, [r4, #0]
 8007b30:	1d19      	adds	r1, r3, #4
 8007b32:	6029      	str	r1, [r5, #0]
 8007b34:	0605      	lsls	r5, r0, #24
 8007b36:	d501      	bpl.n	8007b3c <_printf_i+0xe8>
 8007b38:	681e      	ldr	r6, [r3, #0]
 8007b3a:	e002      	b.n	8007b42 <_printf_i+0xee>
 8007b3c:	0641      	lsls	r1, r0, #25
 8007b3e:	d5fb      	bpl.n	8007b38 <_printf_i+0xe4>
 8007b40:	881e      	ldrh	r6, [r3, #0]
 8007b42:	4853      	ldr	r0, [pc, #332]	; (8007c90 <_printf_i+0x23c>)
 8007b44:	2f6f      	cmp	r7, #111	; 0x6f
 8007b46:	bf0c      	ite	eq
 8007b48:	2308      	moveq	r3, #8
 8007b4a:	230a      	movne	r3, #10
 8007b4c:	2100      	movs	r1, #0
 8007b4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b52:	6865      	ldr	r5, [r4, #4]
 8007b54:	60a5      	str	r5, [r4, #8]
 8007b56:	2d00      	cmp	r5, #0
 8007b58:	bfa2      	ittt	ge
 8007b5a:	6821      	ldrge	r1, [r4, #0]
 8007b5c:	f021 0104 	bicge.w	r1, r1, #4
 8007b60:	6021      	strge	r1, [r4, #0]
 8007b62:	b90e      	cbnz	r6, 8007b68 <_printf_i+0x114>
 8007b64:	2d00      	cmp	r5, #0
 8007b66:	d04b      	beq.n	8007c00 <_printf_i+0x1ac>
 8007b68:	4615      	mov	r5, r2
 8007b6a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007b6e:	fb03 6711 	mls	r7, r3, r1, r6
 8007b72:	5dc7      	ldrb	r7, [r0, r7]
 8007b74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007b78:	4637      	mov	r7, r6
 8007b7a:	42bb      	cmp	r3, r7
 8007b7c:	460e      	mov	r6, r1
 8007b7e:	d9f4      	bls.n	8007b6a <_printf_i+0x116>
 8007b80:	2b08      	cmp	r3, #8
 8007b82:	d10b      	bne.n	8007b9c <_printf_i+0x148>
 8007b84:	6823      	ldr	r3, [r4, #0]
 8007b86:	07de      	lsls	r6, r3, #31
 8007b88:	d508      	bpl.n	8007b9c <_printf_i+0x148>
 8007b8a:	6923      	ldr	r3, [r4, #16]
 8007b8c:	6861      	ldr	r1, [r4, #4]
 8007b8e:	4299      	cmp	r1, r3
 8007b90:	bfde      	ittt	le
 8007b92:	2330      	movle	r3, #48	; 0x30
 8007b94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b98:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007b9c:	1b52      	subs	r2, r2, r5
 8007b9e:	6122      	str	r2, [r4, #16]
 8007ba0:	f8cd a000 	str.w	sl, [sp]
 8007ba4:	464b      	mov	r3, r9
 8007ba6:	aa03      	add	r2, sp, #12
 8007ba8:	4621      	mov	r1, r4
 8007baa:	4640      	mov	r0, r8
 8007bac:	f7ff fee4 	bl	8007978 <_printf_common>
 8007bb0:	3001      	adds	r0, #1
 8007bb2:	d14a      	bne.n	8007c4a <_printf_i+0x1f6>
 8007bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bb8:	b004      	add	sp, #16
 8007bba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bbe:	6823      	ldr	r3, [r4, #0]
 8007bc0:	f043 0320 	orr.w	r3, r3, #32
 8007bc4:	6023      	str	r3, [r4, #0]
 8007bc6:	4833      	ldr	r0, [pc, #204]	; (8007c94 <_printf_i+0x240>)
 8007bc8:	2778      	movs	r7, #120	; 0x78
 8007bca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007bce:	6823      	ldr	r3, [r4, #0]
 8007bd0:	6829      	ldr	r1, [r5, #0]
 8007bd2:	061f      	lsls	r7, r3, #24
 8007bd4:	f851 6b04 	ldr.w	r6, [r1], #4
 8007bd8:	d402      	bmi.n	8007be0 <_printf_i+0x18c>
 8007bda:	065f      	lsls	r7, r3, #25
 8007bdc:	bf48      	it	mi
 8007bde:	b2b6      	uxthmi	r6, r6
 8007be0:	07df      	lsls	r7, r3, #31
 8007be2:	bf48      	it	mi
 8007be4:	f043 0320 	orrmi.w	r3, r3, #32
 8007be8:	6029      	str	r1, [r5, #0]
 8007bea:	bf48      	it	mi
 8007bec:	6023      	strmi	r3, [r4, #0]
 8007bee:	b91e      	cbnz	r6, 8007bf8 <_printf_i+0x1a4>
 8007bf0:	6823      	ldr	r3, [r4, #0]
 8007bf2:	f023 0320 	bic.w	r3, r3, #32
 8007bf6:	6023      	str	r3, [r4, #0]
 8007bf8:	2310      	movs	r3, #16
 8007bfa:	e7a7      	b.n	8007b4c <_printf_i+0xf8>
 8007bfc:	4824      	ldr	r0, [pc, #144]	; (8007c90 <_printf_i+0x23c>)
 8007bfe:	e7e4      	b.n	8007bca <_printf_i+0x176>
 8007c00:	4615      	mov	r5, r2
 8007c02:	e7bd      	b.n	8007b80 <_printf_i+0x12c>
 8007c04:	682b      	ldr	r3, [r5, #0]
 8007c06:	6826      	ldr	r6, [r4, #0]
 8007c08:	6961      	ldr	r1, [r4, #20]
 8007c0a:	1d18      	adds	r0, r3, #4
 8007c0c:	6028      	str	r0, [r5, #0]
 8007c0e:	0635      	lsls	r5, r6, #24
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	d501      	bpl.n	8007c18 <_printf_i+0x1c4>
 8007c14:	6019      	str	r1, [r3, #0]
 8007c16:	e002      	b.n	8007c1e <_printf_i+0x1ca>
 8007c18:	0670      	lsls	r0, r6, #25
 8007c1a:	d5fb      	bpl.n	8007c14 <_printf_i+0x1c0>
 8007c1c:	8019      	strh	r1, [r3, #0]
 8007c1e:	2300      	movs	r3, #0
 8007c20:	6123      	str	r3, [r4, #16]
 8007c22:	4615      	mov	r5, r2
 8007c24:	e7bc      	b.n	8007ba0 <_printf_i+0x14c>
 8007c26:	682b      	ldr	r3, [r5, #0]
 8007c28:	1d1a      	adds	r2, r3, #4
 8007c2a:	602a      	str	r2, [r5, #0]
 8007c2c:	681d      	ldr	r5, [r3, #0]
 8007c2e:	6862      	ldr	r2, [r4, #4]
 8007c30:	2100      	movs	r1, #0
 8007c32:	4628      	mov	r0, r5
 8007c34:	f7f8 fad4 	bl	80001e0 <memchr>
 8007c38:	b108      	cbz	r0, 8007c3e <_printf_i+0x1ea>
 8007c3a:	1b40      	subs	r0, r0, r5
 8007c3c:	6060      	str	r0, [r4, #4]
 8007c3e:	6863      	ldr	r3, [r4, #4]
 8007c40:	6123      	str	r3, [r4, #16]
 8007c42:	2300      	movs	r3, #0
 8007c44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c48:	e7aa      	b.n	8007ba0 <_printf_i+0x14c>
 8007c4a:	6923      	ldr	r3, [r4, #16]
 8007c4c:	462a      	mov	r2, r5
 8007c4e:	4649      	mov	r1, r9
 8007c50:	4640      	mov	r0, r8
 8007c52:	47d0      	blx	sl
 8007c54:	3001      	adds	r0, #1
 8007c56:	d0ad      	beq.n	8007bb4 <_printf_i+0x160>
 8007c58:	6823      	ldr	r3, [r4, #0]
 8007c5a:	079b      	lsls	r3, r3, #30
 8007c5c:	d413      	bmi.n	8007c86 <_printf_i+0x232>
 8007c5e:	68e0      	ldr	r0, [r4, #12]
 8007c60:	9b03      	ldr	r3, [sp, #12]
 8007c62:	4298      	cmp	r0, r3
 8007c64:	bfb8      	it	lt
 8007c66:	4618      	movlt	r0, r3
 8007c68:	e7a6      	b.n	8007bb8 <_printf_i+0x164>
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	4632      	mov	r2, r6
 8007c6e:	4649      	mov	r1, r9
 8007c70:	4640      	mov	r0, r8
 8007c72:	47d0      	blx	sl
 8007c74:	3001      	adds	r0, #1
 8007c76:	d09d      	beq.n	8007bb4 <_printf_i+0x160>
 8007c78:	3501      	adds	r5, #1
 8007c7a:	68e3      	ldr	r3, [r4, #12]
 8007c7c:	9903      	ldr	r1, [sp, #12]
 8007c7e:	1a5b      	subs	r3, r3, r1
 8007c80:	42ab      	cmp	r3, r5
 8007c82:	dcf2      	bgt.n	8007c6a <_printf_i+0x216>
 8007c84:	e7eb      	b.n	8007c5e <_printf_i+0x20a>
 8007c86:	2500      	movs	r5, #0
 8007c88:	f104 0619 	add.w	r6, r4, #25
 8007c8c:	e7f5      	b.n	8007c7a <_printf_i+0x226>
 8007c8e:	bf00      	nop
 8007c90:	0800a166 	.word	0x0800a166
 8007c94:	0800a177 	.word	0x0800a177

08007c98 <std>:
 8007c98:	2300      	movs	r3, #0
 8007c9a:	b510      	push	{r4, lr}
 8007c9c:	4604      	mov	r4, r0
 8007c9e:	e9c0 3300 	strd	r3, r3, [r0]
 8007ca2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007ca6:	6083      	str	r3, [r0, #8]
 8007ca8:	8181      	strh	r1, [r0, #12]
 8007caa:	6643      	str	r3, [r0, #100]	; 0x64
 8007cac:	81c2      	strh	r2, [r0, #14]
 8007cae:	6183      	str	r3, [r0, #24]
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	2208      	movs	r2, #8
 8007cb4:	305c      	adds	r0, #92	; 0x5c
 8007cb6:	f000 f9f7 	bl	80080a8 <memset>
 8007cba:	4b0d      	ldr	r3, [pc, #52]	; (8007cf0 <std+0x58>)
 8007cbc:	6263      	str	r3, [r4, #36]	; 0x24
 8007cbe:	4b0d      	ldr	r3, [pc, #52]	; (8007cf4 <std+0x5c>)
 8007cc0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007cc2:	4b0d      	ldr	r3, [pc, #52]	; (8007cf8 <std+0x60>)
 8007cc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007cc6:	4b0d      	ldr	r3, [pc, #52]	; (8007cfc <std+0x64>)
 8007cc8:	6323      	str	r3, [r4, #48]	; 0x30
 8007cca:	4b0d      	ldr	r3, [pc, #52]	; (8007d00 <std+0x68>)
 8007ccc:	6224      	str	r4, [r4, #32]
 8007cce:	429c      	cmp	r4, r3
 8007cd0:	d006      	beq.n	8007ce0 <std+0x48>
 8007cd2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007cd6:	4294      	cmp	r4, r2
 8007cd8:	d002      	beq.n	8007ce0 <std+0x48>
 8007cda:	33d0      	adds	r3, #208	; 0xd0
 8007cdc:	429c      	cmp	r4, r3
 8007cde:	d105      	bne.n	8007cec <std+0x54>
 8007ce0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007ce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ce8:	f000 bab0 	b.w	800824c <__retarget_lock_init_recursive>
 8007cec:	bd10      	pop	{r4, pc}
 8007cee:	bf00      	nop
 8007cf0:	08007ef9 	.word	0x08007ef9
 8007cf4:	08007f1b 	.word	0x08007f1b
 8007cf8:	08007f53 	.word	0x08007f53
 8007cfc:	08007f77 	.word	0x08007f77
 8007d00:	20004e68 	.word	0x20004e68

08007d04 <stdio_exit_handler>:
 8007d04:	4a02      	ldr	r2, [pc, #8]	; (8007d10 <stdio_exit_handler+0xc>)
 8007d06:	4903      	ldr	r1, [pc, #12]	; (8007d14 <stdio_exit_handler+0x10>)
 8007d08:	4803      	ldr	r0, [pc, #12]	; (8007d18 <stdio_exit_handler+0x14>)
 8007d0a:	f000 b869 	b.w	8007de0 <_fwalk_sglue>
 8007d0e:	bf00      	nop
 8007d10:	20000010 	.word	0x20000010
 8007d14:	08009bf1 	.word	0x08009bf1
 8007d18:	2000001c 	.word	0x2000001c

08007d1c <cleanup_stdio>:
 8007d1c:	6841      	ldr	r1, [r0, #4]
 8007d1e:	4b0c      	ldr	r3, [pc, #48]	; (8007d50 <cleanup_stdio+0x34>)
 8007d20:	4299      	cmp	r1, r3
 8007d22:	b510      	push	{r4, lr}
 8007d24:	4604      	mov	r4, r0
 8007d26:	d001      	beq.n	8007d2c <cleanup_stdio+0x10>
 8007d28:	f001 ff62 	bl	8009bf0 <_fflush_r>
 8007d2c:	68a1      	ldr	r1, [r4, #8]
 8007d2e:	4b09      	ldr	r3, [pc, #36]	; (8007d54 <cleanup_stdio+0x38>)
 8007d30:	4299      	cmp	r1, r3
 8007d32:	d002      	beq.n	8007d3a <cleanup_stdio+0x1e>
 8007d34:	4620      	mov	r0, r4
 8007d36:	f001 ff5b 	bl	8009bf0 <_fflush_r>
 8007d3a:	68e1      	ldr	r1, [r4, #12]
 8007d3c:	4b06      	ldr	r3, [pc, #24]	; (8007d58 <cleanup_stdio+0x3c>)
 8007d3e:	4299      	cmp	r1, r3
 8007d40:	d004      	beq.n	8007d4c <cleanup_stdio+0x30>
 8007d42:	4620      	mov	r0, r4
 8007d44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d48:	f001 bf52 	b.w	8009bf0 <_fflush_r>
 8007d4c:	bd10      	pop	{r4, pc}
 8007d4e:	bf00      	nop
 8007d50:	20004e68 	.word	0x20004e68
 8007d54:	20004ed0 	.word	0x20004ed0
 8007d58:	20004f38 	.word	0x20004f38

08007d5c <global_stdio_init.part.0>:
 8007d5c:	b510      	push	{r4, lr}
 8007d5e:	4b0b      	ldr	r3, [pc, #44]	; (8007d8c <global_stdio_init.part.0+0x30>)
 8007d60:	4c0b      	ldr	r4, [pc, #44]	; (8007d90 <global_stdio_init.part.0+0x34>)
 8007d62:	4a0c      	ldr	r2, [pc, #48]	; (8007d94 <global_stdio_init.part.0+0x38>)
 8007d64:	601a      	str	r2, [r3, #0]
 8007d66:	4620      	mov	r0, r4
 8007d68:	2200      	movs	r2, #0
 8007d6a:	2104      	movs	r1, #4
 8007d6c:	f7ff ff94 	bl	8007c98 <std>
 8007d70:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007d74:	2201      	movs	r2, #1
 8007d76:	2109      	movs	r1, #9
 8007d78:	f7ff ff8e 	bl	8007c98 <std>
 8007d7c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007d80:	2202      	movs	r2, #2
 8007d82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d86:	2112      	movs	r1, #18
 8007d88:	f7ff bf86 	b.w	8007c98 <std>
 8007d8c:	20004fa0 	.word	0x20004fa0
 8007d90:	20004e68 	.word	0x20004e68
 8007d94:	08007d05 	.word	0x08007d05

08007d98 <__sfp_lock_acquire>:
 8007d98:	4801      	ldr	r0, [pc, #4]	; (8007da0 <__sfp_lock_acquire+0x8>)
 8007d9a:	f000 ba58 	b.w	800824e <__retarget_lock_acquire_recursive>
 8007d9e:	bf00      	nop
 8007da0:	20004fa9 	.word	0x20004fa9

08007da4 <__sfp_lock_release>:
 8007da4:	4801      	ldr	r0, [pc, #4]	; (8007dac <__sfp_lock_release+0x8>)
 8007da6:	f000 ba53 	b.w	8008250 <__retarget_lock_release_recursive>
 8007daa:	bf00      	nop
 8007dac:	20004fa9 	.word	0x20004fa9

08007db0 <__sinit>:
 8007db0:	b510      	push	{r4, lr}
 8007db2:	4604      	mov	r4, r0
 8007db4:	f7ff fff0 	bl	8007d98 <__sfp_lock_acquire>
 8007db8:	6a23      	ldr	r3, [r4, #32]
 8007dba:	b11b      	cbz	r3, 8007dc4 <__sinit+0x14>
 8007dbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007dc0:	f7ff bff0 	b.w	8007da4 <__sfp_lock_release>
 8007dc4:	4b04      	ldr	r3, [pc, #16]	; (8007dd8 <__sinit+0x28>)
 8007dc6:	6223      	str	r3, [r4, #32]
 8007dc8:	4b04      	ldr	r3, [pc, #16]	; (8007ddc <__sinit+0x2c>)
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d1f5      	bne.n	8007dbc <__sinit+0xc>
 8007dd0:	f7ff ffc4 	bl	8007d5c <global_stdio_init.part.0>
 8007dd4:	e7f2      	b.n	8007dbc <__sinit+0xc>
 8007dd6:	bf00      	nop
 8007dd8:	08007d1d 	.word	0x08007d1d
 8007ddc:	20004fa0 	.word	0x20004fa0

08007de0 <_fwalk_sglue>:
 8007de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007de4:	4607      	mov	r7, r0
 8007de6:	4688      	mov	r8, r1
 8007de8:	4614      	mov	r4, r2
 8007dea:	2600      	movs	r6, #0
 8007dec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007df0:	f1b9 0901 	subs.w	r9, r9, #1
 8007df4:	d505      	bpl.n	8007e02 <_fwalk_sglue+0x22>
 8007df6:	6824      	ldr	r4, [r4, #0]
 8007df8:	2c00      	cmp	r4, #0
 8007dfa:	d1f7      	bne.n	8007dec <_fwalk_sglue+0xc>
 8007dfc:	4630      	mov	r0, r6
 8007dfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e02:	89ab      	ldrh	r3, [r5, #12]
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d907      	bls.n	8007e18 <_fwalk_sglue+0x38>
 8007e08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	d003      	beq.n	8007e18 <_fwalk_sglue+0x38>
 8007e10:	4629      	mov	r1, r5
 8007e12:	4638      	mov	r0, r7
 8007e14:	47c0      	blx	r8
 8007e16:	4306      	orrs	r6, r0
 8007e18:	3568      	adds	r5, #104	; 0x68
 8007e1a:	e7e9      	b.n	8007df0 <_fwalk_sglue+0x10>

08007e1c <iprintf>:
 8007e1c:	b40f      	push	{r0, r1, r2, r3}
 8007e1e:	b507      	push	{r0, r1, r2, lr}
 8007e20:	4906      	ldr	r1, [pc, #24]	; (8007e3c <iprintf+0x20>)
 8007e22:	ab04      	add	r3, sp, #16
 8007e24:	6808      	ldr	r0, [r1, #0]
 8007e26:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e2a:	6881      	ldr	r1, [r0, #8]
 8007e2c:	9301      	str	r3, [sp, #4]
 8007e2e:	f001 fd3f 	bl	80098b0 <_vfiprintf_r>
 8007e32:	b003      	add	sp, #12
 8007e34:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e38:	b004      	add	sp, #16
 8007e3a:	4770      	bx	lr
 8007e3c:	20000068 	.word	0x20000068

08007e40 <_puts_r>:
 8007e40:	6a03      	ldr	r3, [r0, #32]
 8007e42:	b570      	push	{r4, r5, r6, lr}
 8007e44:	6884      	ldr	r4, [r0, #8]
 8007e46:	4605      	mov	r5, r0
 8007e48:	460e      	mov	r6, r1
 8007e4a:	b90b      	cbnz	r3, 8007e50 <_puts_r+0x10>
 8007e4c:	f7ff ffb0 	bl	8007db0 <__sinit>
 8007e50:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e52:	07db      	lsls	r3, r3, #31
 8007e54:	d405      	bmi.n	8007e62 <_puts_r+0x22>
 8007e56:	89a3      	ldrh	r3, [r4, #12]
 8007e58:	0598      	lsls	r0, r3, #22
 8007e5a:	d402      	bmi.n	8007e62 <_puts_r+0x22>
 8007e5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e5e:	f000 f9f6 	bl	800824e <__retarget_lock_acquire_recursive>
 8007e62:	89a3      	ldrh	r3, [r4, #12]
 8007e64:	0719      	lsls	r1, r3, #28
 8007e66:	d513      	bpl.n	8007e90 <_puts_r+0x50>
 8007e68:	6923      	ldr	r3, [r4, #16]
 8007e6a:	b18b      	cbz	r3, 8007e90 <_puts_r+0x50>
 8007e6c:	3e01      	subs	r6, #1
 8007e6e:	68a3      	ldr	r3, [r4, #8]
 8007e70:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007e74:	3b01      	subs	r3, #1
 8007e76:	60a3      	str	r3, [r4, #8]
 8007e78:	b9e9      	cbnz	r1, 8007eb6 <_puts_r+0x76>
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	da2e      	bge.n	8007edc <_puts_r+0x9c>
 8007e7e:	4622      	mov	r2, r4
 8007e80:	210a      	movs	r1, #10
 8007e82:	4628      	mov	r0, r5
 8007e84:	f000 f87b 	bl	8007f7e <__swbuf_r>
 8007e88:	3001      	adds	r0, #1
 8007e8a:	d007      	beq.n	8007e9c <_puts_r+0x5c>
 8007e8c:	250a      	movs	r5, #10
 8007e8e:	e007      	b.n	8007ea0 <_puts_r+0x60>
 8007e90:	4621      	mov	r1, r4
 8007e92:	4628      	mov	r0, r5
 8007e94:	f000 f8b0 	bl	8007ff8 <__swsetup_r>
 8007e98:	2800      	cmp	r0, #0
 8007e9a:	d0e7      	beq.n	8007e6c <_puts_r+0x2c>
 8007e9c:	f04f 35ff 	mov.w	r5, #4294967295
 8007ea0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007ea2:	07da      	lsls	r2, r3, #31
 8007ea4:	d405      	bmi.n	8007eb2 <_puts_r+0x72>
 8007ea6:	89a3      	ldrh	r3, [r4, #12]
 8007ea8:	059b      	lsls	r3, r3, #22
 8007eaa:	d402      	bmi.n	8007eb2 <_puts_r+0x72>
 8007eac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007eae:	f000 f9cf 	bl	8008250 <__retarget_lock_release_recursive>
 8007eb2:	4628      	mov	r0, r5
 8007eb4:	bd70      	pop	{r4, r5, r6, pc}
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	da04      	bge.n	8007ec4 <_puts_r+0x84>
 8007eba:	69a2      	ldr	r2, [r4, #24]
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	dc06      	bgt.n	8007ece <_puts_r+0x8e>
 8007ec0:	290a      	cmp	r1, #10
 8007ec2:	d004      	beq.n	8007ece <_puts_r+0x8e>
 8007ec4:	6823      	ldr	r3, [r4, #0]
 8007ec6:	1c5a      	adds	r2, r3, #1
 8007ec8:	6022      	str	r2, [r4, #0]
 8007eca:	7019      	strb	r1, [r3, #0]
 8007ecc:	e7cf      	b.n	8007e6e <_puts_r+0x2e>
 8007ece:	4622      	mov	r2, r4
 8007ed0:	4628      	mov	r0, r5
 8007ed2:	f000 f854 	bl	8007f7e <__swbuf_r>
 8007ed6:	3001      	adds	r0, #1
 8007ed8:	d1c9      	bne.n	8007e6e <_puts_r+0x2e>
 8007eda:	e7df      	b.n	8007e9c <_puts_r+0x5c>
 8007edc:	6823      	ldr	r3, [r4, #0]
 8007ede:	250a      	movs	r5, #10
 8007ee0:	1c5a      	adds	r2, r3, #1
 8007ee2:	6022      	str	r2, [r4, #0]
 8007ee4:	701d      	strb	r5, [r3, #0]
 8007ee6:	e7db      	b.n	8007ea0 <_puts_r+0x60>

08007ee8 <puts>:
 8007ee8:	4b02      	ldr	r3, [pc, #8]	; (8007ef4 <puts+0xc>)
 8007eea:	4601      	mov	r1, r0
 8007eec:	6818      	ldr	r0, [r3, #0]
 8007eee:	f7ff bfa7 	b.w	8007e40 <_puts_r>
 8007ef2:	bf00      	nop
 8007ef4:	20000068 	.word	0x20000068

08007ef8 <__sread>:
 8007ef8:	b510      	push	{r4, lr}
 8007efa:	460c      	mov	r4, r1
 8007efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f00:	f000 f956 	bl	80081b0 <_read_r>
 8007f04:	2800      	cmp	r0, #0
 8007f06:	bfab      	itete	ge
 8007f08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007f0a:	89a3      	ldrhlt	r3, [r4, #12]
 8007f0c:	181b      	addge	r3, r3, r0
 8007f0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007f12:	bfac      	ite	ge
 8007f14:	6563      	strge	r3, [r4, #84]	; 0x54
 8007f16:	81a3      	strhlt	r3, [r4, #12]
 8007f18:	bd10      	pop	{r4, pc}

08007f1a <__swrite>:
 8007f1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f1e:	461f      	mov	r7, r3
 8007f20:	898b      	ldrh	r3, [r1, #12]
 8007f22:	05db      	lsls	r3, r3, #23
 8007f24:	4605      	mov	r5, r0
 8007f26:	460c      	mov	r4, r1
 8007f28:	4616      	mov	r6, r2
 8007f2a:	d505      	bpl.n	8007f38 <__swrite+0x1e>
 8007f2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f30:	2302      	movs	r3, #2
 8007f32:	2200      	movs	r2, #0
 8007f34:	f000 f92a 	bl	800818c <_lseek_r>
 8007f38:	89a3      	ldrh	r3, [r4, #12]
 8007f3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f42:	81a3      	strh	r3, [r4, #12]
 8007f44:	4632      	mov	r2, r6
 8007f46:	463b      	mov	r3, r7
 8007f48:	4628      	mov	r0, r5
 8007f4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f4e:	f000 b941 	b.w	80081d4 <_write_r>

08007f52 <__sseek>:
 8007f52:	b510      	push	{r4, lr}
 8007f54:	460c      	mov	r4, r1
 8007f56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f5a:	f000 f917 	bl	800818c <_lseek_r>
 8007f5e:	1c43      	adds	r3, r0, #1
 8007f60:	89a3      	ldrh	r3, [r4, #12]
 8007f62:	bf15      	itete	ne
 8007f64:	6560      	strne	r0, [r4, #84]	; 0x54
 8007f66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007f6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f6e:	81a3      	strheq	r3, [r4, #12]
 8007f70:	bf18      	it	ne
 8007f72:	81a3      	strhne	r3, [r4, #12]
 8007f74:	bd10      	pop	{r4, pc}

08007f76 <__sclose>:
 8007f76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f7a:	f000 b8a1 	b.w	80080c0 <_close_r>

08007f7e <__swbuf_r>:
 8007f7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f80:	460e      	mov	r6, r1
 8007f82:	4614      	mov	r4, r2
 8007f84:	4605      	mov	r5, r0
 8007f86:	b118      	cbz	r0, 8007f90 <__swbuf_r+0x12>
 8007f88:	6a03      	ldr	r3, [r0, #32]
 8007f8a:	b90b      	cbnz	r3, 8007f90 <__swbuf_r+0x12>
 8007f8c:	f7ff ff10 	bl	8007db0 <__sinit>
 8007f90:	69a3      	ldr	r3, [r4, #24]
 8007f92:	60a3      	str	r3, [r4, #8]
 8007f94:	89a3      	ldrh	r3, [r4, #12]
 8007f96:	071a      	lsls	r2, r3, #28
 8007f98:	d525      	bpl.n	8007fe6 <__swbuf_r+0x68>
 8007f9a:	6923      	ldr	r3, [r4, #16]
 8007f9c:	b31b      	cbz	r3, 8007fe6 <__swbuf_r+0x68>
 8007f9e:	6823      	ldr	r3, [r4, #0]
 8007fa0:	6922      	ldr	r2, [r4, #16]
 8007fa2:	1a98      	subs	r0, r3, r2
 8007fa4:	6963      	ldr	r3, [r4, #20]
 8007fa6:	b2f6      	uxtb	r6, r6
 8007fa8:	4283      	cmp	r3, r0
 8007faa:	4637      	mov	r7, r6
 8007fac:	dc04      	bgt.n	8007fb8 <__swbuf_r+0x3a>
 8007fae:	4621      	mov	r1, r4
 8007fb0:	4628      	mov	r0, r5
 8007fb2:	f001 fe1d 	bl	8009bf0 <_fflush_r>
 8007fb6:	b9e0      	cbnz	r0, 8007ff2 <__swbuf_r+0x74>
 8007fb8:	68a3      	ldr	r3, [r4, #8]
 8007fba:	3b01      	subs	r3, #1
 8007fbc:	60a3      	str	r3, [r4, #8]
 8007fbe:	6823      	ldr	r3, [r4, #0]
 8007fc0:	1c5a      	adds	r2, r3, #1
 8007fc2:	6022      	str	r2, [r4, #0]
 8007fc4:	701e      	strb	r6, [r3, #0]
 8007fc6:	6962      	ldr	r2, [r4, #20]
 8007fc8:	1c43      	adds	r3, r0, #1
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d004      	beq.n	8007fd8 <__swbuf_r+0x5a>
 8007fce:	89a3      	ldrh	r3, [r4, #12]
 8007fd0:	07db      	lsls	r3, r3, #31
 8007fd2:	d506      	bpl.n	8007fe2 <__swbuf_r+0x64>
 8007fd4:	2e0a      	cmp	r6, #10
 8007fd6:	d104      	bne.n	8007fe2 <__swbuf_r+0x64>
 8007fd8:	4621      	mov	r1, r4
 8007fda:	4628      	mov	r0, r5
 8007fdc:	f001 fe08 	bl	8009bf0 <_fflush_r>
 8007fe0:	b938      	cbnz	r0, 8007ff2 <__swbuf_r+0x74>
 8007fe2:	4638      	mov	r0, r7
 8007fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fe6:	4621      	mov	r1, r4
 8007fe8:	4628      	mov	r0, r5
 8007fea:	f000 f805 	bl	8007ff8 <__swsetup_r>
 8007fee:	2800      	cmp	r0, #0
 8007ff0:	d0d5      	beq.n	8007f9e <__swbuf_r+0x20>
 8007ff2:	f04f 37ff 	mov.w	r7, #4294967295
 8007ff6:	e7f4      	b.n	8007fe2 <__swbuf_r+0x64>

08007ff8 <__swsetup_r>:
 8007ff8:	b538      	push	{r3, r4, r5, lr}
 8007ffa:	4b2a      	ldr	r3, [pc, #168]	; (80080a4 <__swsetup_r+0xac>)
 8007ffc:	4605      	mov	r5, r0
 8007ffe:	6818      	ldr	r0, [r3, #0]
 8008000:	460c      	mov	r4, r1
 8008002:	b118      	cbz	r0, 800800c <__swsetup_r+0x14>
 8008004:	6a03      	ldr	r3, [r0, #32]
 8008006:	b90b      	cbnz	r3, 800800c <__swsetup_r+0x14>
 8008008:	f7ff fed2 	bl	8007db0 <__sinit>
 800800c:	89a3      	ldrh	r3, [r4, #12]
 800800e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008012:	0718      	lsls	r0, r3, #28
 8008014:	d422      	bmi.n	800805c <__swsetup_r+0x64>
 8008016:	06d9      	lsls	r1, r3, #27
 8008018:	d407      	bmi.n	800802a <__swsetup_r+0x32>
 800801a:	2309      	movs	r3, #9
 800801c:	602b      	str	r3, [r5, #0]
 800801e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008022:	81a3      	strh	r3, [r4, #12]
 8008024:	f04f 30ff 	mov.w	r0, #4294967295
 8008028:	e034      	b.n	8008094 <__swsetup_r+0x9c>
 800802a:	0758      	lsls	r0, r3, #29
 800802c:	d512      	bpl.n	8008054 <__swsetup_r+0x5c>
 800802e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008030:	b141      	cbz	r1, 8008044 <__swsetup_r+0x4c>
 8008032:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008036:	4299      	cmp	r1, r3
 8008038:	d002      	beq.n	8008040 <__swsetup_r+0x48>
 800803a:	4628      	mov	r0, r5
 800803c:	f000 ff92 	bl	8008f64 <_free_r>
 8008040:	2300      	movs	r3, #0
 8008042:	6363      	str	r3, [r4, #52]	; 0x34
 8008044:	89a3      	ldrh	r3, [r4, #12]
 8008046:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800804a:	81a3      	strh	r3, [r4, #12]
 800804c:	2300      	movs	r3, #0
 800804e:	6063      	str	r3, [r4, #4]
 8008050:	6923      	ldr	r3, [r4, #16]
 8008052:	6023      	str	r3, [r4, #0]
 8008054:	89a3      	ldrh	r3, [r4, #12]
 8008056:	f043 0308 	orr.w	r3, r3, #8
 800805a:	81a3      	strh	r3, [r4, #12]
 800805c:	6923      	ldr	r3, [r4, #16]
 800805e:	b94b      	cbnz	r3, 8008074 <__swsetup_r+0x7c>
 8008060:	89a3      	ldrh	r3, [r4, #12]
 8008062:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008066:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800806a:	d003      	beq.n	8008074 <__swsetup_r+0x7c>
 800806c:	4621      	mov	r1, r4
 800806e:	4628      	mov	r0, r5
 8008070:	f001 fe0c 	bl	8009c8c <__smakebuf_r>
 8008074:	89a0      	ldrh	r0, [r4, #12]
 8008076:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800807a:	f010 0301 	ands.w	r3, r0, #1
 800807e:	d00a      	beq.n	8008096 <__swsetup_r+0x9e>
 8008080:	2300      	movs	r3, #0
 8008082:	60a3      	str	r3, [r4, #8]
 8008084:	6963      	ldr	r3, [r4, #20]
 8008086:	425b      	negs	r3, r3
 8008088:	61a3      	str	r3, [r4, #24]
 800808a:	6923      	ldr	r3, [r4, #16]
 800808c:	b943      	cbnz	r3, 80080a0 <__swsetup_r+0xa8>
 800808e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008092:	d1c4      	bne.n	800801e <__swsetup_r+0x26>
 8008094:	bd38      	pop	{r3, r4, r5, pc}
 8008096:	0781      	lsls	r1, r0, #30
 8008098:	bf58      	it	pl
 800809a:	6963      	ldrpl	r3, [r4, #20]
 800809c:	60a3      	str	r3, [r4, #8]
 800809e:	e7f4      	b.n	800808a <__swsetup_r+0x92>
 80080a0:	2000      	movs	r0, #0
 80080a2:	e7f7      	b.n	8008094 <__swsetup_r+0x9c>
 80080a4:	20000068 	.word	0x20000068

080080a8 <memset>:
 80080a8:	4402      	add	r2, r0
 80080aa:	4603      	mov	r3, r0
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d100      	bne.n	80080b2 <memset+0xa>
 80080b0:	4770      	bx	lr
 80080b2:	f803 1b01 	strb.w	r1, [r3], #1
 80080b6:	e7f9      	b.n	80080ac <memset+0x4>

080080b8 <_localeconv_r>:
 80080b8:	4800      	ldr	r0, [pc, #0]	; (80080bc <_localeconv_r+0x4>)
 80080ba:	4770      	bx	lr
 80080bc:	2000015c 	.word	0x2000015c

080080c0 <_close_r>:
 80080c0:	b538      	push	{r3, r4, r5, lr}
 80080c2:	4d06      	ldr	r5, [pc, #24]	; (80080dc <_close_r+0x1c>)
 80080c4:	2300      	movs	r3, #0
 80080c6:	4604      	mov	r4, r0
 80080c8:	4608      	mov	r0, r1
 80080ca:	602b      	str	r3, [r5, #0]
 80080cc:	f7f9 fe5d 	bl	8001d8a <_close>
 80080d0:	1c43      	adds	r3, r0, #1
 80080d2:	d102      	bne.n	80080da <_close_r+0x1a>
 80080d4:	682b      	ldr	r3, [r5, #0]
 80080d6:	b103      	cbz	r3, 80080da <_close_r+0x1a>
 80080d8:	6023      	str	r3, [r4, #0]
 80080da:	bd38      	pop	{r3, r4, r5, pc}
 80080dc:	20004fa4 	.word	0x20004fa4

080080e0 <_reclaim_reent>:
 80080e0:	4b29      	ldr	r3, [pc, #164]	; (8008188 <_reclaim_reent+0xa8>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4283      	cmp	r3, r0
 80080e6:	b570      	push	{r4, r5, r6, lr}
 80080e8:	4604      	mov	r4, r0
 80080ea:	d04b      	beq.n	8008184 <_reclaim_reent+0xa4>
 80080ec:	69c3      	ldr	r3, [r0, #28]
 80080ee:	b143      	cbz	r3, 8008102 <_reclaim_reent+0x22>
 80080f0:	68db      	ldr	r3, [r3, #12]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d144      	bne.n	8008180 <_reclaim_reent+0xa0>
 80080f6:	69e3      	ldr	r3, [r4, #28]
 80080f8:	6819      	ldr	r1, [r3, #0]
 80080fa:	b111      	cbz	r1, 8008102 <_reclaim_reent+0x22>
 80080fc:	4620      	mov	r0, r4
 80080fe:	f000 ff31 	bl	8008f64 <_free_r>
 8008102:	6961      	ldr	r1, [r4, #20]
 8008104:	b111      	cbz	r1, 800810c <_reclaim_reent+0x2c>
 8008106:	4620      	mov	r0, r4
 8008108:	f000 ff2c 	bl	8008f64 <_free_r>
 800810c:	69e1      	ldr	r1, [r4, #28]
 800810e:	b111      	cbz	r1, 8008116 <_reclaim_reent+0x36>
 8008110:	4620      	mov	r0, r4
 8008112:	f000 ff27 	bl	8008f64 <_free_r>
 8008116:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008118:	b111      	cbz	r1, 8008120 <_reclaim_reent+0x40>
 800811a:	4620      	mov	r0, r4
 800811c:	f000 ff22 	bl	8008f64 <_free_r>
 8008120:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008122:	b111      	cbz	r1, 800812a <_reclaim_reent+0x4a>
 8008124:	4620      	mov	r0, r4
 8008126:	f000 ff1d 	bl	8008f64 <_free_r>
 800812a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800812c:	b111      	cbz	r1, 8008134 <_reclaim_reent+0x54>
 800812e:	4620      	mov	r0, r4
 8008130:	f000 ff18 	bl	8008f64 <_free_r>
 8008134:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008136:	b111      	cbz	r1, 800813e <_reclaim_reent+0x5e>
 8008138:	4620      	mov	r0, r4
 800813a:	f000 ff13 	bl	8008f64 <_free_r>
 800813e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008140:	b111      	cbz	r1, 8008148 <_reclaim_reent+0x68>
 8008142:	4620      	mov	r0, r4
 8008144:	f000 ff0e 	bl	8008f64 <_free_r>
 8008148:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800814a:	b111      	cbz	r1, 8008152 <_reclaim_reent+0x72>
 800814c:	4620      	mov	r0, r4
 800814e:	f000 ff09 	bl	8008f64 <_free_r>
 8008152:	6a23      	ldr	r3, [r4, #32]
 8008154:	b1b3      	cbz	r3, 8008184 <_reclaim_reent+0xa4>
 8008156:	4620      	mov	r0, r4
 8008158:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800815c:	4718      	bx	r3
 800815e:	5949      	ldr	r1, [r1, r5]
 8008160:	b941      	cbnz	r1, 8008174 <_reclaim_reent+0x94>
 8008162:	3504      	adds	r5, #4
 8008164:	69e3      	ldr	r3, [r4, #28]
 8008166:	2d80      	cmp	r5, #128	; 0x80
 8008168:	68d9      	ldr	r1, [r3, #12]
 800816a:	d1f8      	bne.n	800815e <_reclaim_reent+0x7e>
 800816c:	4620      	mov	r0, r4
 800816e:	f000 fef9 	bl	8008f64 <_free_r>
 8008172:	e7c0      	b.n	80080f6 <_reclaim_reent+0x16>
 8008174:	680e      	ldr	r6, [r1, #0]
 8008176:	4620      	mov	r0, r4
 8008178:	f000 fef4 	bl	8008f64 <_free_r>
 800817c:	4631      	mov	r1, r6
 800817e:	e7ef      	b.n	8008160 <_reclaim_reent+0x80>
 8008180:	2500      	movs	r5, #0
 8008182:	e7ef      	b.n	8008164 <_reclaim_reent+0x84>
 8008184:	bd70      	pop	{r4, r5, r6, pc}
 8008186:	bf00      	nop
 8008188:	20000068 	.word	0x20000068

0800818c <_lseek_r>:
 800818c:	b538      	push	{r3, r4, r5, lr}
 800818e:	4d07      	ldr	r5, [pc, #28]	; (80081ac <_lseek_r+0x20>)
 8008190:	4604      	mov	r4, r0
 8008192:	4608      	mov	r0, r1
 8008194:	4611      	mov	r1, r2
 8008196:	2200      	movs	r2, #0
 8008198:	602a      	str	r2, [r5, #0]
 800819a:	461a      	mov	r2, r3
 800819c:	f7f9 fe1c 	bl	8001dd8 <_lseek>
 80081a0:	1c43      	adds	r3, r0, #1
 80081a2:	d102      	bne.n	80081aa <_lseek_r+0x1e>
 80081a4:	682b      	ldr	r3, [r5, #0]
 80081a6:	b103      	cbz	r3, 80081aa <_lseek_r+0x1e>
 80081a8:	6023      	str	r3, [r4, #0]
 80081aa:	bd38      	pop	{r3, r4, r5, pc}
 80081ac:	20004fa4 	.word	0x20004fa4

080081b0 <_read_r>:
 80081b0:	b538      	push	{r3, r4, r5, lr}
 80081b2:	4d07      	ldr	r5, [pc, #28]	; (80081d0 <_read_r+0x20>)
 80081b4:	4604      	mov	r4, r0
 80081b6:	4608      	mov	r0, r1
 80081b8:	4611      	mov	r1, r2
 80081ba:	2200      	movs	r2, #0
 80081bc:	602a      	str	r2, [r5, #0]
 80081be:	461a      	mov	r2, r3
 80081c0:	f7f9 fdaa 	bl	8001d18 <_read>
 80081c4:	1c43      	adds	r3, r0, #1
 80081c6:	d102      	bne.n	80081ce <_read_r+0x1e>
 80081c8:	682b      	ldr	r3, [r5, #0]
 80081ca:	b103      	cbz	r3, 80081ce <_read_r+0x1e>
 80081cc:	6023      	str	r3, [r4, #0]
 80081ce:	bd38      	pop	{r3, r4, r5, pc}
 80081d0:	20004fa4 	.word	0x20004fa4

080081d4 <_write_r>:
 80081d4:	b538      	push	{r3, r4, r5, lr}
 80081d6:	4d07      	ldr	r5, [pc, #28]	; (80081f4 <_write_r+0x20>)
 80081d8:	4604      	mov	r4, r0
 80081da:	4608      	mov	r0, r1
 80081dc:	4611      	mov	r1, r2
 80081de:	2200      	movs	r2, #0
 80081e0:	602a      	str	r2, [r5, #0]
 80081e2:	461a      	mov	r2, r3
 80081e4:	f7f9 fdb5 	bl	8001d52 <_write>
 80081e8:	1c43      	adds	r3, r0, #1
 80081ea:	d102      	bne.n	80081f2 <_write_r+0x1e>
 80081ec:	682b      	ldr	r3, [r5, #0]
 80081ee:	b103      	cbz	r3, 80081f2 <_write_r+0x1e>
 80081f0:	6023      	str	r3, [r4, #0]
 80081f2:	bd38      	pop	{r3, r4, r5, pc}
 80081f4:	20004fa4 	.word	0x20004fa4

080081f8 <__errno>:
 80081f8:	4b01      	ldr	r3, [pc, #4]	; (8008200 <__errno+0x8>)
 80081fa:	6818      	ldr	r0, [r3, #0]
 80081fc:	4770      	bx	lr
 80081fe:	bf00      	nop
 8008200:	20000068 	.word	0x20000068

08008204 <__libc_init_array>:
 8008204:	b570      	push	{r4, r5, r6, lr}
 8008206:	4d0d      	ldr	r5, [pc, #52]	; (800823c <__libc_init_array+0x38>)
 8008208:	4c0d      	ldr	r4, [pc, #52]	; (8008240 <__libc_init_array+0x3c>)
 800820a:	1b64      	subs	r4, r4, r5
 800820c:	10a4      	asrs	r4, r4, #2
 800820e:	2600      	movs	r6, #0
 8008210:	42a6      	cmp	r6, r4
 8008212:	d109      	bne.n	8008228 <__libc_init_array+0x24>
 8008214:	4d0b      	ldr	r5, [pc, #44]	; (8008244 <__libc_init_array+0x40>)
 8008216:	4c0c      	ldr	r4, [pc, #48]	; (8008248 <__libc_init_array+0x44>)
 8008218:	f001 fe58 	bl	8009ecc <_init>
 800821c:	1b64      	subs	r4, r4, r5
 800821e:	10a4      	asrs	r4, r4, #2
 8008220:	2600      	movs	r6, #0
 8008222:	42a6      	cmp	r6, r4
 8008224:	d105      	bne.n	8008232 <__libc_init_array+0x2e>
 8008226:	bd70      	pop	{r4, r5, r6, pc}
 8008228:	f855 3b04 	ldr.w	r3, [r5], #4
 800822c:	4798      	blx	r3
 800822e:	3601      	adds	r6, #1
 8008230:	e7ee      	b.n	8008210 <__libc_init_array+0xc>
 8008232:	f855 3b04 	ldr.w	r3, [r5], #4
 8008236:	4798      	blx	r3
 8008238:	3601      	adds	r6, #1
 800823a:	e7f2      	b.n	8008222 <__libc_init_array+0x1e>
 800823c:	0800a4cc 	.word	0x0800a4cc
 8008240:	0800a4cc 	.word	0x0800a4cc
 8008244:	0800a4cc 	.word	0x0800a4cc
 8008248:	0800a4d0 	.word	0x0800a4d0

0800824c <__retarget_lock_init_recursive>:
 800824c:	4770      	bx	lr

0800824e <__retarget_lock_acquire_recursive>:
 800824e:	4770      	bx	lr

08008250 <__retarget_lock_release_recursive>:
 8008250:	4770      	bx	lr

08008252 <memcpy>:
 8008252:	440a      	add	r2, r1
 8008254:	4291      	cmp	r1, r2
 8008256:	f100 33ff 	add.w	r3, r0, #4294967295
 800825a:	d100      	bne.n	800825e <memcpy+0xc>
 800825c:	4770      	bx	lr
 800825e:	b510      	push	{r4, lr}
 8008260:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008264:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008268:	4291      	cmp	r1, r2
 800826a:	d1f9      	bne.n	8008260 <memcpy+0xe>
 800826c:	bd10      	pop	{r4, pc}

0800826e <quorem>:
 800826e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008272:	6903      	ldr	r3, [r0, #16]
 8008274:	690c      	ldr	r4, [r1, #16]
 8008276:	42a3      	cmp	r3, r4
 8008278:	4607      	mov	r7, r0
 800827a:	db7e      	blt.n	800837a <quorem+0x10c>
 800827c:	3c01      	subs	r4, #1
 800827e:	f101 0814 	add.w	r8, r1, #20
 8008282:	f100 0514 	add.w	r5, r0, #20
 8008286:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800828a:	9301      	str	r3, [sp, #4]
 800828c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008290:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008294:	3301      	adds	r3, #1
 8008296:	429a      	cmp	r2, r3
 8008298:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800829c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80082a0:	fbb2 f6f3 	udiv	r6, r2, r3
 80082a4:	d331      	bcc.n	800830a <quorem+0x9c>
 80082a6:	f04f 0e00 	mov.w	lr, #0
 80082aa:	4640      	mov	r0, r8
 80082ac:	46ac      	mov	ip, r5
 80082ae:	46f2      	mov	sl, lr
 80082b0:	f850 2b04 	ldr.w	r2, [r0], #4
 80082b4:	b293      	uxth	r3, r2
 80082b6:	fb06 e303 	mla	r3, r6, r3, lr
 80082ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80082be:	0c1a      	lsrs	r2, r3, #16
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	ebaa 0303 	sub.w	r3, sl, r3
 80082c6:	f8dc a000 	ldr.w	sl, [ip]
 80082ca:	fa13 f38a 	uxtah	r3, r3, sl
 80082ce:	fb06 220e 	mla	r2, r6, lr, r2
 80082d2:	9300      	str	r3, [sp, #0]
 80082d4:	9b00      	ldr	r3, [sp, #0]
 80082d6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80082da:	b292      	uxth	r2, r2
 80082dc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80082e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80082e4:	f8bd 3000 	ldrh.w	r3, [sp]
 80082e8:	4581      	cmp	r9, r0
 80082ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082ee:	f84c 3b04 	str.w	r3, [ip], #4
 80082f2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80082f6:	d2db      	bcs.n	80082b0 <quorem+0x42>
 80082f8:	f855 300b 	ldr.w	r3, [r5, fp]
 80082fc:	b92b      	cbnz	r3, 800830a <quorem+0x9c>
 80082fe:	9b01      	ldr	r3, [sp, #4]
 8008300:	3b04      	subs	r3, #4
 8008302:	429d      	cmp	r5, r3
 8008304:	461a      	mov	r2, r3
 8008306:	d32c      	bcc.n	8008362 <quorem+0xf4>
 8008308:	613c      	str	r4, [r7, #16]
 800830a:	4638      	mov	r0, r7
 800830c:	f001 f9a6 	bl	800965c <__mcmp>
 8008310:	2800      	cmp	r0, #0
 8008312:	db22      	blt.n	800835a <quorem+0xec>
 8008314:	3601      	adds	r6, #1
 8008316:	4629      	mov	r1, r5
 8008318:	2000      	movs	r0, #0
 800831a:	f858 2b04 	ldr.w	r2, [r8], #4
 800831e:	f8d1 c000 	ldr.w	ip, [r1]
 8008322:	b293      	uxth	r3, r2
 8008324:	1ac3      	subs	r3, r0, r3
 8008326:	0c12      	lsrs	r2, r2, #16
 8008328:	fa13 f38c 	uxtah	r3, r3, ip
 800832c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008330:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008334:	b29b      	uxth	r3, r3
 8008336:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800833a:	45c1      	cmp	r9, r8
 800833c:	f841 3b04 	str.w	r3, [r1], #4
 8008340:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008344:	d2e9      	bcs.n	800831a <quorem+0xac>
 8008346:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800834a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800834e:	b922      	cbnz	r2, 800835a <quorem+0xec>
 8008350:	3b04      	subs	r3, #4
 8008352:	429d      	cmp	r5, r3
 8008354:	461a      	mov	r2, r3
 8008356:	d30a      	bcc.n	800836e <quorem+0x100>
 8008358:	613c      	str	r4, [r7, #16]
 800835a:	4630      	mov	r0, r6
 800835c:	b003      	add	sp, #12
 800835e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008362:	6812      	ldr	r2, [r2, #0]
 8008364:	3b04      	subs	r3, #4
 8008366:	2a00      	cmp	r2, #0
 8008368:	d1ce      	bne.n	8008308 <quorem+0x9a>
 800836a:	3c01      	subs	r4, #1
 800836c:	e7c9      	b.n	8008302 <quorem+0x94>
 800836e:	6812      	ldr	r2, [r2, #0]
 8008370:	3b04      	subs	r3, #4
 8008372:	2a00      	cmp	r2, #0
 8008374:	d1f0      	bne.n	8008358 <quorem+0xea>
 8008376:	3c01      	subs	r4, #1
 8008378:	e7eb      	b.n	8008352 <quorem+0xe4>
 800837a:	2000      	movs	r0, #0
 800837c:	e7ee      	b.n	800835c <quorem+0xee>
	...

08008380 <_dtoa_r>:
 8008380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008384:	ed2d 8b04 	vpush	{d8-d9}
 8008388:	69c5      	ldr	r5, [r0, #28]
 800838a:	b093      	sub	sp, #76	; 0x4c
 800838c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008390:	ec57 6b10 	vmov	r6, r7, d0
 8008394:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008398:	9107      	str	r1, [sp, #28]
 800839a:	4604      	mov	r4, r0
 800839c:	920a      	str	r2, [sp, #40]	; 0x28
 800839e:	930d      	str	r3, [sp, #52]	; 0x34
 80083a0:	b975      	cbnz	r5, 80083c0 <_dtoa_r+0x40>
 80083a2:	2010      	movs	r0, #16
 80083a4:	f000 fe2a 	bl	8008ffc <malloc>
 80083a8:	4602      	mov	r2, r0
 80083aa:	61e0      	str	r0, [r4, #28]
 80083ac:	b920      	cbnz	r0, 80083b8 <_dtoa_r+0x38>
 80083ae:	4bae      	ldr	r3, [pc, #696]	; (8008668 <_dtoa_r+0x2e8>)
 80083b0:	21ef      	movs	r1, #239	; 0xef
 80083b2:	48ae      	ldr	r0, [pc, #696]	; (800866c <_dtoa_r+0x2ec>)
 80083b4:	f001 fcd8 	bl	8009d68 <__assert_func>
 80083b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80083bc:	6005      	str	r5, [r0, #0]
 80083be:	60c5      	str	r5, [r0, #12]
 80083c0:	69e3      	ldr	r3, [r4, #28]
 80083c2:	6819      	ldr	r1, [r3, #0]
 80083c4:	b151      	cbz	r1, 80083dc <_dtoa_r+0x5c>
 80083c6:	685a      	ldr	r2, [r3, #4]
 80083c8:	604a      	str	r2, [r1, #4]
 80083ca:	2301      	movs	r3, #1
 80083cc:	4093      	lsls	r3, r2
 80083ce:	608b      	str	r3, [r1, #8]
 80083d0:	4620      	mov	r0, r4
 80083d2:	f000 ff07 	bl	80091e4 <_Bfree>
 80083d6:	69e3      	ldr	r3, [r4, #28]
 80083d8:	2200      	movs	r2, #0
 80083da:	601a      	str	r2, [r3, #0]
 80083dc:	1e3b      	subs	r3, r7, #0
 80083de:	bfbb      	ittet	lt
 80083e0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80083e4:	9303      	strlt	r3, [sp, #12]
 80083e6:	2300      	movge	r3, #0
 80083e8:	2201      	movlt	r2, #1
 80083ea:	bfac      	ite	ge
 80083ec:	f8c8 3000 	strge.w	r3, [r8]
 80083f0:	f8c8 2000 	strlt.w	r2, [r8]
 80083f4:	4b9e      	ldr	r3, [pc, #632]	; (8008670 <_dtoa_r+0x2f0>)
 80083f6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80083fa:	ea33 0308 	bics.w	r3, r3, r8
 80083fe:	d11b      	bne.n	8008438 <_dtoa_r+0xb8>
 8008400:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008402:	f242 730f 	movw	r3, #9999	; 0x270f
 8008406:	6013      	str	r3, [r2, #0]
 8008408:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800840c:	4333      	orrs	r3, r6
 800840e:	f000 8593 	beq.w	8008f38 <_dtoa_r+0xbb8>
 8008412:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008414:	b963      	cbnz	r3, 8008430 <_dtoa_r+0xb0>
 8008416:	4b97      	ldr	r3, [pc, #604]	; (8008674 <_dtoa_r+0x2f4>)
 8008418:	e027      	b.n	800846a <_dtoa_r+0xea>
 800841a:	4b97      	ldr	r3, [pc, #604]	; (8008678 <_dtoa_r+0x2f8>)
 800841c:	9300      	str	r3, [sp, #0]
 800841e:	3308      	adds	r3, #8
 8008420:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008422:	6013      	str	r3, [r2, #0]
 8008424:	9800      	ldr	r0, [sp, #0]
 8008426:	b013      	add	sp, #76	; 0x4c
 8008428:	ecbd 8b04 	vpop	{d8-d9}
 800842c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008430:	4b90      	ldr	r3, [pc, #576]	; (8008674 <_dtoa_r+0x2f4>)
 8008432:	9300      	str	r3, [sp, #0]
 8008434:	3303      	adds	r3, #3
 8008436:	e7f3      	b.n	8008420 <_dtoa_r+0xa0>
 8008438:	ed9d 7b02 	vldr	d7, [sp, #8]
 800843c:	2200      	movs	r2, #0
 800843e:	ec51 0b17 	vmov	r0, r1, d7
 8008442:	eeb0 8a47 	vmov.f32	s16, s14
 8008446:	eef0 8a67 	vmov.f32	s17, s15
 800844a:	2300      	movs	r3, #0
 800844c:	f7f8 fb44 	bl	8000ad8 <__aeabi_dcmpeq>
 8008450:	4681      	mov	r9, r0
 8008452:	b160      	cbz	r0, 800846e <_dtoa_r+0xee>
 8008454:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008456:	2301      	movs	r3, #1
 8008458:	6013      	str	r3, [r2, #0]
 800845a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800845c:	2b00      	cmp	r3, #0
 800845e:	f000 8568 	beq.w	8008f32 <_dtoa_r+0xbb2>
 8008462:	4b86      	ldr	r3, [pc, #536]	; (800867c <_dtoa_r+0x2fc>)
 8008464:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008466:	6013      	str	r3, [r2, #0]
 8008468:	3b01      	subs	r3, #1
 800846a:	9300      	str	r3, [sp, #0]
 800846c:	e7da      	b.n	8008424 <_dtoa_r+0xa4>
 800846e:	aa10      	add	r2, sp, #64	; 0x40
 8008470:	a911      	add	r1, sp, #68	; 0x44
 8008472:	4620      	mov	r0, r4
 8008474:	eeb0 0a48 	vmov.f32	s0, s16
 8008478:	eef0 0a68 	vmov.f32	s1, s17
 800847c:	f001 f994 	bl	80097a8 <__d2b>
 8008480:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008484:	4682      	mov	sl, r0
 8008486:	2d00      	cmp	r5, #0
 8008488:	d07f      	beq.n	800858a <_dtoa_r+0x20a>
 800848a:	ee18 3a90 	vmov	r3, s17
 800848e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008492:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008496:	ec51 0b18 	vmov	r0, r1, d8
 800849a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800849e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80084a2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80084a6:	4619      	mov	r1, r3
 80084a8:	2200      	movs	r2, #0
 80084aa:	4b75      	ldr	r3, [pc, #468]	; (8008680 <_dtoa_r+0x300>)
 80084ac:	f7f7 fef4 	bl	8000298 <__aeabi_dsub>
 80084b0:	a367      	add	r3, pc, #412	; (adr r3, 8008650 <_dtoa_r+0x2d0>)
 80084b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b6:	f7f8 f8a7 	bl	8000608 <__aeabi_dmul>
 80084ba:	a367      	add	r3, pc, #412	; (adr r3, 8008658 <_dtoa_r+0x2d8>)
 80084bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084c0:	f7f7 feec 	bl	800029c <__adddf3>
 80084c4:	4606      	mov	r6, r0
 80084c6:	4628      	mov	r0, r5
 80084c8:	460f      	mov	r7, r1
 80084ca:	f7f8 f833 	bl	8000534 <__aeabi_i2d>
 80084ce:	a364      	add	r3, pc, #400	; (adr r3, 8008660 <_dtoa_r+0x2e0>)
 80084d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084d4:	f7f8 f898 	bl	8000608 <__aeabi_dmul>
 80084d8:	4602      	mov	r2, r0
 80084da:	460b      	mov	r3, r1
 80084dc:	4630      	mov	r0, r6
 80084de:	4639      	mov	r1, r7
 80084e0:	f7f7 fedc 	bl	800029c <__adddf3>
 80084e4:	4606      	mov	r6, r0
 80084e6:	460f      	mov	r7, r1
 80084e8:	f7f8 fb3e 	bl	8000b68 <__aeabi_d2iz>
 80084ec:	2200      	movs	r2, #0
 80084ee:	4683      	mov	fp, r0
 80084f0:	2300      	movs	r3, #0
 80084f2:	4630      	mov	r0, r6
 80084f4:	4639      	mov	r1, r7
 80084f6:	f7f8 faf9 	bl	8000aec <__aeabi_dcmplt>
 80084fa:	b148      	cbz	r0, 8008510 <_dtoa_r+0x190>
 80084fc:	4658      	mov	r0, fp
 80084fe:	f7f8 f819 	bl	8000534 <__aeabi_i2d>
 8008502:	4632      	mov	r2, r6
 8008504:	463b      	mov	r3, r7
 8008506:	f7f8 fae7 	bl	8000ad8 <__aeabi_dcmpeq>
 800850a:	b908      	cbnz	r0, 8008510 <_dtoa_r+0x190>
 800850c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008510:	f1bb 0f16 	cmp.w	fp, #22
 8008514:	d857      	bhi.n	80085c6 <_dtoa_r+0x246>
 8008516:	4b5b      	ldr	r3, [pc, #364]	; (8008684 <_dtoa_r+0x304>)
 8008518:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800851c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008520:	ec51 0b18 	vmov	r0, r1, d8
 8008524:	f7f8 fae2 	bl	8000aec <__aeabi_dcmplt>
 8008528:	2800      	cmp	r0, #0
 800852a:	d04e      	beq.n	80085ca <_dtoa_r+0x24a>
 800852c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008530:	2300      	movs	r3, #0
 8008532:	930c      	str	r3, [sp, #48]	; 0x30
 8008534:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008536:	1b5b      	subs	r3, r3, r5
 8008538:	1e5a      	subs	r2, r3, #1
 800853a:	bf45      	ittet	mi
 800853c:	f1c3 0301 	rsbmi	r3, r3, #1
 8008540:	9305      	strmi	r3, [sp, #20]
 8008542:	2300      	movpl	r3, #0
 8008544:	2300      	movmi	r3, #0
 8008546:	9206      	str	r2, [sp, #24]
 8008548:	bf54      	ite	pl
 800854a:	9305      	strpl	r3, [sp, #20]
 800854c:	9306      	strmi	r3, [sp, #24]
 800854e:	f1bb 0f00 	cmp.w	fp, #0
 8008552:	db3c      	blt.n	80085ce <_dtoa_r+0x24e>
 8008554:	9b06      	ldr	r3, [sp, #24]
 8008556:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800855a:	445b      	add	r3, fp
 800855c:	9306      	str	r3, [sp, #24]
 800855e:	2300      	movs	r3, #0
 8008560:	9308      	str	r3, [sp, #32]
 8008562:	9b07      	ldr	r3, [sp, #28]
 8008564:	2b09      	cmp	r3, #9
 8008566:	d868      	bhi.n	800863a <_dtoa_r+0x2ba>
 8008568:	2b05      	cmp	r3, #5
 800856a:	bfc4      	itt	gt
 800856c:	3b04      	subgt	r3, #4
 800856e:	9307      	strgt	r3, [sp, #28]
 8008570:	9b07      	ldr	r3, [sp, #28]
 8008572:	f1a3 0302 	sub.w	r3, r3, #2
 8008576:	bfcc      	ite	gt
 8008578:	2500      	movgt	r5, #0
 800857a:	2501      	movle	r5, #1
 800857c:	2b03      	cmp	r3, #3
 800857e:	f200 8085 	bhi.w	800868c <_dtoa_r+0x30c>
 8008582:	e8df f003 	tbb	[pc, r3]
 8008586:	3b2e      	.short	0x3b2e
 8008588:	5839      	.short	0x5839
 800858a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800858e:	441d      	add	r5, r3
 8008590:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008594:	2b20      	cmp	r3, #32
 8008596:	bfc1      	itttt	gt
 8008598:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800859c:	fa08 f803 	lslgt.w	r8, r8, r3
 80085a0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80085a4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80085a8:	bfd6      	itet	le
 80085aa:	f1c3 0320 	rsble	r3, r3, #32
 80085ae:	ea48 0003 	orrgt.w	r0, r8, r3
 80085b2:	fa06 f003 	lslle.w	r0, r6, r3
 80085b6:	f7f7 ffad 	bl	8000514 <__aeabi_ui2d>
 80085ba:	2201      	movs	r2, #1
 80085bc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80085c0:	3d01      	subs	r5, #1
 80085c2:	920e      	str	r2, [sp, #56]	; 0x38
 80085c4:	e76f      	b.n	80084a6 <_dtoa_r+0x126>
 80085c6:	2301      	movs	r3, #1
 80085c8:	e7b3      	b.n	8008532 <_dtoa_r+0x1b2>
 80085ca:	900c      	str	r0, [sp, #48]	; 0x30
 80085cc:	e7b2      	b.n	8008534 <_dtoa_r+0x1b4>
 80085ce:	9b05      	ldr	r3, [sp, #20]
 80085d0:	eba3 030b 	sub.w	r3, r3, fp
 80085d4:	9305      	str	r3, [sp, #20]
 80085d6:	f1cb 0300 	rsb	r3, fp, #0
 80085da:	9308      	str	r3, [sp, #32]
 80085dc:	2300      	movs	r3, #0
 80085de:	930b      	str	r3, [sp, #44]	; 0x2c
 80085e0:	e7bf      	b.n	8008562 <_dtoa_r+0x1e2>
 80085e2:	2300      	movs	r3, #0
 80085e4:	9309      	str	r3, [sp, #36]	; 0x24
 80085e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	dc52      	bgt.n	8008692 <_dtoa_r+0x312>
 80085ec:	2301      	movs	r3, #1
 80085ee:	9301      	str	r3, [sp, #4]
 80085f0:	9304      	str	r3, [sp, #16]
 80085f2:	461a      	mov	r2, r3
 80085f4:	920a      	str	r2, [sp, #40]	; 0x28
 80085f6:	e00b      	b.n	8008610 <_dtoa_r+0x290>
 80085f8:	2301      	movs	r3, #1
 80085fa:	e7f3      	b.n	80085e4 <_dtoa_r+0x264>
 80085fc:	2300      	movs	r3, #0
 80085fe:	9309      	str	r3, [sp, #36]	; 0x24
 8008600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008602:	445b      	add	r3, fp
 8008604:	9301      	str	r3, [sp, #4]
 8008606:	3301      	adds	r3, #1
 8008608:	2b01      	cmp	r3, #1
 800860a:	9304      	str	r3, [sp, #16]
 800860c:	bfb8      	it	lt
 800860e:	2301      	movlt	r3, #1
 8008610:	69e0      	ldr	r0, [r4, #28]
 8008612:	2100      	movs	r1, #0
 8008614:	2204      	movs	r2, #4
 8008616:	f102 0614 	add.w	r6, r2, #20
 800861a:	429e      	cmp	r6, r3
 800861c:	d93d      	bls.n	800869a <_dtoa_r+0x31a>
 800861e:	6041      	str	r1, [r0, #4]
 8008620:	4620      	mov	r0, r4
 8008622:	f000 fd9f 	bl	8009164 <_Balloc>
 8008626:	9000      	str	r0, [sp, #0]
 8008628:	2800      	cmp	r0, #0
 800862a:	d139      	bne.n	80086a0 <_dtoa_r+0x320>
 800862c:	4b16      	ldr	r3, [pc, #88]	; (8008688 <_dtoa_r+0x308>)
 800862e:	4602      	mov	r2, r0
 8008630:	f240 11af 	movw	r1, #431	; 0x1af
 8008634:	e6bd      	b.n	80083b2 <_dtoa_r+0x32>
 8008636:	2301      	movs	r3, #1
 8008638:	e7e1      	b.n	80085fe <_dtoa_r+0x27e>
 800863a:	2501      	movs	r5, #1
 800863c:	2300      	movs	r3, #0
 800863e:	9307      	str	r3, [sp, #28]
 8008640:	9509      	str	r5, [sp, #36]	; 0x24
 8008642:	f04f 33ff 	mov.w	r3, #4294967295
 8008646:	9301      	str	r3, [sp, #4]
 8008648:	9304      	str	r3, [sp, #16]
 800864a:	2200      	movs	r2, #0
 800864c:	2312      	movs	r3, #18
 800864e:	e7d1      	b.n	80085f4 <_dtoa_r+0x274>
 8008650:	636f4361 	.word	0x636f4361
 8008654:	3fd287a7 	.word	0x3fd287a7
 8008658:	8b60c8b3 	.word	0x8b60c8b3
 800865c:	3fc68a28 	.word	0x3fc68a28
 8008660:	509f79fb 	.word	0x509f79fb
 8008664:	3fd34413 	.word	0x3fd34413
 8008668:	0800a195 	.word	0x0800a195
 800866c:	0800a1ac 	.word	0x0800a1ac
 8008670:	7ff00000 	.word	0x7ff00000
 8008674:	0800a191 	.word	0x0800a191
 8008678:	0800a188 	.word	0x0800a188
 800867c:	0800a165 	.word	0x0800a165
 8008680:	3ff80000 	.word	0x3ff80000
 8008684:	0800a298 	.word	0x0800a298
 8008688:	0800a204 	.word	0x0800a204
 800868c:	2301      	movs	r3, #1
 800868e:	9309      	str	r3, [sp, #36]	; 0x24
 8008690:	e7d7      	b.n	8008642 <_dtoa_r+0x2c2>
 8008692:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008694:	9301      	str	r3, [sp, #4]
 8008696:	9304      	str	r3, [sp, #16]
 8008698:	e7ba      	b.n	8008610 <_dtoa_r+0x290>
 800869a:	3101      	adds	r1, #1
 800869c:	0052      	lsls	r2, r2, #1
 800869e:	e7ba      	b.n	8008616 <_dtoa_r+0x296>
 80086a0:	69e3      	ldr	r3, [r4, #28]
 80086a2:	9a00      	ldr	r2, [sp, #0]
 80086a4:	601a      	str	r2, [r3, #0]
 80086a6:	9b04      	ldr	r3, [sp, #16]
 80086a8:	2b0e      	cmp	r3, #14
 80086aa:	f200 80a8 	bhi.w	80087fe <_dtoa_r+0x47e>
 80086ae:	2d00      	cmp	r5, #0
 80086b0:	f000 80a5 	beq.w	80087fe <_dtoa_r+0x47e>
 80086b4:	f1bb 0f00 	cmp.w	fp, #0
 80086b8:	dd38      	ble.n	800872c <_dtoa_r+0x3ac>
 80086ba:	4bc0      	ldr	r3, [pc, #768]	; (80089bc <_dtoa_r+0x63c>)
 80086bc:	f00b 020f 	and.w	r2, fp, #15
 80086c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086c4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80086c8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80086cc:	ea4f 182b 	mov.w	r8, fp, asr #4
 80086d0:	d019      	beq.n	8008706 <_dtoa_r+0x386>
 80086d2:	4bbb      	ldr	r3, [pc, #748]	; (80089c0 <_dtoa_r+0x640>)
 80086d4:	ec51 0b18 	vmov	r0, r1, d8
 80086d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80086dc:	f7f8 f8be 	bl	800085c <__aeabi_ddiv>
 80086e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086e4:	f008 080f 	and.w	r8, r8, #15
 80086e8:	2503      	movs	r5, #3
 80086ea:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80089c0 <_dtoa_r+0x640>
 80086ee:	f1b8 0f00 	cmp.w	r8, #0
 80086f2:	d10a      	bne.n	800870a <_dtoa_r+0x38a>
 80086f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086f8:	4632      	mov	r2, r6
 80086fa:	463b      	mov	r3, r7
 80086fc:	f7f8 f8ae 	bl	800085c <__aeabi_ddiv>
 8008700:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008704:	e02b      	b.n	800875e <_dtoa_r+0x3de>
 8008706:	2502      	movs	r5, #2
 8008708:	e7ef      	b.n	80086ea <_dtoa_r+0x36a>
 800870a:	f018 0f01 	tst.w	r8, #1
 800870e:	d008      	beq.n	8008722 <_dtoa_r+0x3a2>
 8008710:	4630      	mov	r0, r6
 8008712:	4639      	mov	r1, r7
 8008714:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008718:	f7f7 ff76 	bl	8000608 <__aeabi_dmul>
 800871c:	3501      	adds	r5, #1
 800871e:	4606      	mov	r6, r0
 8008720:	460f      	mov	r7, r1
 8008722:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008726:	f109 0908 	add.w	r9, r9, #8
 800872a:	e7e0      	b.n	80086ee <_dtoa_r+0x36e>
 800872c:	f000 809f 	beq.w	800886e <_dtoa_r+0x4ee>
 8008730:	f1cb 0600 	rsb	r6, fp, #0
 8008734:	4ba1      	ldr	r3, [pc, #644]	; (80089bc <_dtoa_r+0x63c>)
 8008736:	4fa2      	ldr	r7, [pc, #648]	; (80089c0 <_dtoa_r+0x640>)
 8008738:	f006 020f 	and.w	r2, r6, #15
 800873c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008744:	ec51 0b18 	vmov	r0, r1, d8
 8008748:	f7f7 ff5e 	bl	8000608 <__aeabi_dmul>
 800874c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008750:	1136      	asrs	r6, r6, #4
 8008752:	2300      	movs	r3, #0
 8008754:	2502      	movs	r5, #2
 8008756:	2e00      	cmp	r6, #0
 8008758:	d17e      	bne.n	8008858 <_dtoa_r+0x4d8>
 800875a:	2b00      	cmp	r3, #0
 800875c:	d1d0      	bne.n	8008700 <_dtoa_r+0x380>
 800875e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008760:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008764:	2b00      	cmp	r3, #0
 8008766:	f000 8084 	beq.w	8008872 <_dtoa_r+0x4f2>
 800876a:	4b96      	ldr	r3, [pc, #600]	; (80089c4 <_dtoa_r+0x644>)
 800876c:	2200      	movs	r2, #0
 800876e:	4640      	mov	r0, r8
 8008770:	4649      	mov	r1, r9
 8008772:	f7f8 f9bb 	bl	8000aec <__aeabi_dcmplt>
 8008776:	2800      	cmp	r0, #0
 8008778:	d07b      	beq.n	8008872 <_dtoa_r+0x4f2>
 800877a:	9b04      	ldr	r3, [sp, #16]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d078      	beq.n	8008872 <_dtoa_r+0x4f2>
 8008780:	9b01      	ldr	r3, [sp, #4]
 8008782:	2b00      	cmp	r3, #0
 8008784:	dd39      	ble.n	80087fa <_dtoa_r+0x47a>
 8008786:	4b90      	ldr	r3, [pc, #576]	; (80089c8 <_dtoa_r+0x648>)
 8008788:	2200      	movs	r2, #0
 800878a:	4640      	mov	r0, r8
 800878c:	4649      	mov	r1, r9
 800878e:	f7f7 ff3b 	bl	8000608 <__aeabi_dmul>
 8008792:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008796:	9e01      	ldr	r6, [sp, #4]
 8008798:	f10b 37ff 	add.w	r7, fp, #4294967295
 800879c:	3501      	adds	r5, #1
 800879e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80087a2:	4628      	mov	r0, r5
 80087a4:	f7f7 fec6 	bl	8000534 <__aeabi_i2d>
 80087a8:	4642      	mov	r2, r8
 80087aa:	464b      	mov	r3, r9
 80087ac:	f7f7 ff2c 	bl	8000608 <__aeabi_dmul>
 80087b0:	4b86      	ldr	r3, [pc, #536]	; (80089cc <_dtoa_r+0x64c>)
 80087b2:	2200      	movs	r2, #0
 80087b4:	f7f7 fd72 	bl	800029c <__adddf3>
 80087b8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80087bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087c0:	9303      	str	r3, [sp, #12]
 80087c2:	2e00      	cmp	r6, #0
 80087c4:	d158      	bne.n	8008878 <_dtoa_r+0x4f8>
 80087c6:	4b82      	ldr	r3, [pc, #520]	; (80089d0 <_dtoa_r+0x650>)
 80087c8:	2200      	movs	r2, #0
 80087ca:	4640      	mov	r0, r8
 80087cc:	4649      	mov	r1, r9
 80087ce:	f7f7 fd63 	bl	8000298 <__aeabi_dsub>
 80087d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80087d6:	4680      	mov	r8, r0
 80087d8:	4689      	mov	r9, r1
 80087da:	f7f8 f9a5 	bl	8000b28 <__aeabi_dcmpgt>
 80087de:	2800      	cmp	r0, #0
 80087e0:	f040 8296 	bne.w	8008d10 <_dtoa_r+0x990>
 80087e4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80087e8:	4640      	mov	r0, r8
 80087ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80087ee:	4649      	mov	r1, r9
 80087f0:	f7f8 f97c 	bl	8000aec <__aeabi_dcmplt>
 80087f4:	2800      	cmp	r0, #0
 80087f6:	f040 8289 	bne.w	8008d0c <_dtoa_r+0x98c>
 80087fa:	ed8d 8b02 	vstr	d8, [sp, #8]
 80087fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008800:	2b00      	cmp	r3, #0
 8008802:	f2c0 814e 	blt.w	8008aa2 <_dtoa_r+0x722>
 8008806:	f1bb 0f0e 	cmp.w	fp, #14
 800880a:	f300 814a 	bgt.w	8008aa2 <_dtoa_r+0x722>
 800880e:	4b6b      	ldr	r3, [pc, #428]	; (80089bc <_dtoa_r+0x63c>)
 8008810:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008814:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008818:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800881a:	2b00      	cmp	r3, #0
 800881c:	f280 80dc 	bge.w	80089d8 <_dtoa_r+0x658>
 8008820:	9b04      	ldr	r3, [sp, #16]
 8008822:	2b00      	cmp	r3, #0
 8008824:	f300 80d8 	bgt.w	80089d8 <_dtoa_r+0x658>
 8008828:	f040 826f 	bne.w	8008d0a <_dtoa_r+0x98a>
 800882c:	4b68      	ldr	r3, [pc, #416]	; (80089d0 <_dtoa_r+0x650>)
 800882e:	2200      	movs	r2, #0
 8008830:	4640      	mov	r0, r8
 8008832:	4649      	mov	r1, r9
 8008834:	f7f7 fee8 	bl	8000608 <__aeabi_dmul>
 8008838:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800883c:	f7f8 f96a 	bl	8000b14 <__aeabi_dcmpge>
 8008840:	9e04      	ldr	r6, [sp, #16]
 8008842:	4637      	mov	r7, r6
 8008844:	2800      	cmp	r0, #0
 8008846:	f040 8245 	bne.w	8008cd4 <_dtoa_r+0x954>
 800884a:	9d00      	ldr	r5, [sp, #0]
 800884c:	2331      	movs	r3, #49	; 0x31
 800884e:	f805 3b01 	strb.w	r3, [r5], #1
 8008852:	f10b 0b01 	add.w	fp, fp, #1
 8008856:	e241      	b.n	8008cdc <_dtoa_r+0x95c>
 8008858:	07f2      	lsls	r2, r6, #31
 800885a:	d505      	bpl.n	8008868 <_dtoa_r+0x4e8>
 800885c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008860:	f7f7 fed2 	bl	8000608 <__aeabi_dmul>
 8008864:	3501      	adds	r5, #1
 8008866:	2301      	movs	r3, #1
 8008868:	1076      	asrs	r6, r6, #1
 800886a:	3708      	adds	r7, #8
 800886c:	e773      	b.n	8008756 <_dtoa_r+0x3d6>
 800886e:	2502      	movs	r5, #2
 8008870:	e775      	b.n	800875e <_dtoa_r+0x3de>
 8008872:	9e04      	ldr	r6, [sp, #16]
 8008874:	465f      	mov	r7, fp
 8008876:	e792      	b.n	800879e <_dtoa_r+0x41e>
 8008878:	9900      	ldr	r1, [sp, #0]
 800887a:	4b50      	ldr	r3, [pc, #320]	; (80089bc <_dtoa_r+0x63c>)
 800887c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008880:	4431      	add	r1, r6
 8008882:	9102      	str	r1, [sp, #8]
 8008884:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008886:	eeb0 9a47 	vmov.f32	s18, s14
 800888a:	eef0 9a67 	vmov.f32	s19, s15
 800888e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008892:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008896:	2900      	cmp	r1, #0
 8008898:	d044      	beq.n	8008924 <_dtoa_r+0x5a4>
 800889a:	494e      	ldr	r1, [pc, #312]	; (80089d4 <_dtoa_r+0x654>)
 800889c:	2000      	movs	r0, #0
 800889e:	f7f7 ffdd 	bl	800085c <__aeabi_ddiv>
 80088a2:	ec53 2b19 	vmov	r2, r3, d9
 80088a6:	f7f7 fcf7 	bl	8000298 <__aeabi_dsub>
 80088aa:	9d00      	ldr	r5, [sp, #0]
 80088ac:	ec41 0b19 	vmov	d9, r0, r1
 80088b0:	4649      	mov	r1, r9
 80088b2:	4640      	mov	r0, r8
 80088b4:	f7f8 f958 	bl	8000b68 <__aeabi_d2iz>
 80088b8:	4606      	mov	r6, r0
 80088ba:	f7f7 fe3b 	bl	8000534 <__aeabi_i2d>
 80088be:	4602      	mov	r2, r0
 80088c0:	460b      	mov	r3, r1
 80088c2:	4640      	mov	r0, r8
 80088c4:	4649      	mov	r1, r9
 80088c6:	f7f7 fce7 	bl	8000298 <__aeabi_dsub>
 80088ca:	3630      	adds	r6, #48	; 0x30
 80088cc:	f805 6b01 	strb.w	r6, [r5], #1
 80088d0:	ec53 2b19 	vmov	r2, r3, d9
 80088d4:	4680      	mov	r8, r0
 80088d6:	4689      	mov	r9, r1
 80088d8:	f7f8 f908 	bl	8000aec <__aeabi_dcmplt>
 80088dc:	2800      	cmp	r0, #0
 80088de:	d164      	bne.n	80089aa <_dtoa_r+0x62a>
 80088e0:	4642      	mov	r2, r8
 80088e2:	464b      	mov	r3, r9
 80088e4:	4937      	ldr	r1, [pc, #220]	; (80089c4 <_dtoa_r+0x644>)
 80088e6:	2000      	movs	r0, #0
 80088e8:	f7f7 fcd6 	bl	8000298 <__aeabi_dsub>
 80088ec:	ec53 2b19 	vmov	r2, r3, d9
 80088f0:	f7f8 f8fc 	bl	8000aec <__aeabi_dcmplt>
 80088f4:	2800      	cmp	r0, #0
 80088f6:	f040 80b6 	bne.w	8008a66 <_dtoa_r+0x6e6>
 80088fa:	9b02      	ldr	r3, [sp, #8]
 80088fc:	429d      	cmp	r5, r3
 80088fe:	f43f af7c 	beq.w	80087fa <_dtoa_r+0x47a>
 8008902:	4b31      	ldr	r3, [pc, #196]	; (80089c8 <_dtoa_r+0x648>)
 8008904:	ec51 0b19 	vmov	r0, r1, d9
 8008908:	2200      	movs	r2, #0
 800890a:	f7f7 fe7d 	bl	8000608 <__aeabi_dmul>
 800890e:	4b2e      	ldr	r3, [pc, #184]	; (80089c8 <_dtoa_r+0x648>)
 8008910:	ec41 0b19 	vmov	d9, r0, r1
 8008914:	2200      	movs	r2, #0
 8008916:	4640      	mov	r0, r8
 8008918:	4649      	mov	r1, r9
 800891a:	f7f7 fe75 	bl	8000608 <__aeabi_dmul>
 800891e:	4680      	mov	r8, r0
 8008920:	4689      	mov	r9, r1
 8008922:	e7c5      	b.n	80088b0 <_dtoa_r+0x530>
 8008924:	ec51 0b17 	vmov	r0, r1, d7
 8008928:	f7f7 fe6e 	bl	8000608 <__aeabi_dmul>
 800892c:	9b02      	ldr	r3, [sp, #8]
 800892e:	9d00      	ldr	r5, [sp, #0]
 8008930:	930f      	str	r3, [sp, #60]	; 0x3c
 8008932:	ec41 0b19 	vmov	d9, r0, r1
 8008936:	4649      	mov	r1, r9
 8008938:	4640      	mov	r0, r8
 800893a:	f7f8 f915 	bl	8000b68 <__aeabi_d2iz>
 800893e:	4606      	mov	r6, r0
 8008940:	f7f7 fdf8 	bl	8000534 <__aeabi_i2d>
 8008944:	3630      	adds	r6, #48	; 0x30
 8008946:	4602      	mov	r2, r0
 8008948:	460b      	mov	r3, r1
 800894a:	4640      	mov	r0, r8
 800894c:	4649      	mov	r1, r9
 800894e:	f7f7 fca3 	bl	8000298 <__aeabi_dsub>
 8008952:	f805 6b01 	strb.w	r6, [r5], #1
 8008956:	9b02      	ldr	r3, [sp, #8]
 8008958:	429d      	cmp	r5, r3
 800895a:	4680      	mov	r8, r0
 800895c:	4689      	mov	r9, r1
 800895e:	f04f 0200 	mov.w	r2, #0
 8008962:	d124      	bne.n	80089ae <_dtoa_r+0x62e>
 8008964:	4b1b      	ldr	r3, [pc, #108]	; (80089d4 <_dtoa_r+0x654>)
 8008966:	ec51 0b19 	vmov	r0, r1, d9
 800896a:	f7f7 fc97 	bl	800029c <__adddf3>
 800896e:	4602      	mov	r2, r0
 8008970:	460b      	mov	r3, r1
 8008972:	4640      	mov	r0, r8
 8008974:	4649      	mov	r1, r9
 8008976:	f7f8 f8d7 	bl	8000b28 <__aeabi_dcmpgt>
 800897a:	2800      	cmp	r0, #0
 800897c:	d173      	bne.n	8008a66 <_dtoa_r+0x6e6>
 800897e:	ec53 2b19 	vmov	r2, r3, d9
 8008982:	4914      	ldr	r1, [pc, #80]	; (80089d4 <_dtoa_r+0x654>)
 8008984:	2000      	movs	r0, #0
 8008986:	f7f7 fc87 	bl	8000298 <__aeabi_dsub>
 800898a:	4602      	mov	r2, r0
 800898c:	460b      	mov	r3, r1
 800898e:	4640      	mov	r0, r8
 8008990:	4649      	mov	r1, r9
 8008992:	f7f8 f8ab 	bl	8000aec <__aeabi_dcmplt>
 8008996:	2800      	cmp	r0, #0
 8008998:	f43f af2f 	beq.w	80087fa <_dtoa_r+0x47a>
 800899c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800899e:	1e6b      	subs	r3, r5, #1
 80089a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80089a2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80089a6:	2b30      	cmp	r3, #48	; 0x30
 80089a8:	d0f8      	beq.n	800899c <_dtoa_r+0x61c>
 80089aa:	46bb      	mov	fp, r7
 80089ac:	e04a      	b.n	8008a44 <_dtoa_r+0x6c4>
 80089ae:	4b06      	ldr	r3, [pc, #24]	; (80089c8 <_dtoa_r+0x648>)
 80089b0:	f7f7 fe2a 	bl	8000608 <__aeabi_dmul>
 80089b4:	4680      	mov	r8, r0
 80089b6:	4689      	mov	r9, r1
 80089b8:	e7bd      	b.n	8008936 <_dtoa_r+0x5b6>
 80089ba:	bf00      	nop
 80089bc:	0800a298 	.word	0x0800a298
 80089c0:	0800a270 	.word	0x0800a270
 80089c4:	3ff00000 	.word	0x3ff00000
 80089c8:	40240000 	.word	0x40240000
 80089cc:	401c0000 	.word	0x401c0000
 80089d0:	40140000 	.word	0x40140000
 80089d4:	3fe00000 	.word	0x3fe00000
 80089d8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80089dc:	9d00      	ldr	r5, [sp, #0]
 80089de:	4642      	mov	r2, r8
 80089e0:	464b      	mov	r3, r9
 80089e2:	4630      	mov	r0, r6
 80089e4:	4639      	mov	r1, r7
 80089e6:	f7f7 ff39 	bl	800085c <__aeabi_ddiv>
 80089ea:	f7f8 f8bd 	bl	8000b68 <__aeabi_d2iz>
 80089ee:	9001      	str	r0, [sp, #4]
 80089f0:	f7f7 fda0 	bl	8000534 <__aeabi_i2d>
 80089f4:	4642      	mov	r2, r8
 80089f6:	464b      	mov	r3, r9
 80089f8:	f7f7 fe06 	bl	8000608 <__aeabi_dmul>
 80089fc:	4602      	mov	r2, r0
 80089fe:	460b      	mov	r3, r1
 8008a00:	4630      	mov	r0, r6
 8008a02:	4639      	mov	r1, r7
 8008a04:	f7f7 fc48 	bl	8000298 <__aeabi_dsub>
 8008a08:	9e01      	ldr	r6, [sp, #4]
 8008a0a:	9f04      	ldr	r7, [sp, #16]
 8008a0c:	3630      	adds	r6, #48	; 0x30
 8008a0e:	f805 6b01 	strb.w	r6, [r5], #1
 8008a12:	9e00      	ldr	r6, [sp, #0]
 8008a14:	1bae      	subs	r6, r5, r6
 8008a16:	42b7      	cmp	r7, r6
 8008a18:	4602      	mov	r2, r0
 8008a1a:	460b      	mov	r3, r1
 8008a1c:	d134      	bne.n	8008a88 <_dtoa_r+0x708>
 8008a1e:	f7f7 fc3d 	bl	800029c <__adddf3>
 8008a22:	4642      	mov	r2, r8
 8008a24:	464b      	mov	r3, r9
 8008a26:	4606      	mov	r6, r0
 8008a28:	460f      	mov	r7, r1
 8008a2a:	f7f8 f87d 	bl	8000b28 <__aeabi_dcmpgt>
 8008a2e:	b9c8      	cbnz	r0, 8008a64 <_dtoa_r+0x6e4>
 8008a30:	4642      	mov	r2, r8
 8008a32:	464b      	mov	r3, r9
 8008a34:	4630      	mov	r0, r6
 8008a36:	4639      	mov	r1, r7
 8008a38:	f7f8 f84e 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a3c:	b110      	cbz	r0, 8008a44 <_dtoa_r+0x6c4>
 8008a3e:	9b01      	ldr	r3, [sp, #4]
 8008a40:	07db      	lsls	r3, r3, #31
 8008a42:	d40f      	bmi.n	8008a64 <_dtoa_r+0x6e4>
 8008a44:	4651      	mov	r1, sl
 8008a46:	4620      	mov	r0, r4
 8008a48:	f000 fbcc 	bl	80091e4 <_Bfree>
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a50:	702b      	strb	r3, [r5, #0]
 8008a52:	f10b 0301 	add.w	r3, fp, #1
 8008a56:	6013      	str	r3, [r2, #0]
 8008a58:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	f43f ace2 	beq.w	8008424 <_dtoa_r+0xa4>
 8008a60:	601d      	str	r5, [r3, #0]
 8008a62:	e4df      	b.n	8008424 <_dtoa_r+0xa4>
 8008a64:	465f      	mov	r7, fp
 8008a66:	462b      	mov	r3, r5
 8008a68:	461d      	mov	r5, r3
 8008a6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a6e:	2a39      	cmp	r2, #57	; 0x39
 8008a70:	d106      	bne.n	8008a80 <_dtoa_r+0x700>
 8008a72:	9a00      	ldr	r2, [sp, #0]
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d1f7      	bne.n	8008a68 <_dtoa_r+0x6e8>
 8008a78:	9900      	ldr	r1, [sp, #0]
 8008a7a:	2230      	movs	r2, #48	; 0x30
 8008a7c:	3701      	adds	r7, #1
 8008a7e:	700a      	strb	r2, [r1, #0]
 8008a80:	781a      	ldrb	r2, [r3, #0]
 8008a82:	3201      	adds	r2, #1
 8008a84:	701a      	strb	r2, [r3, #0]
 8008a86:	e790      	b.n	80089aa <_dtoa_r+0x62a>
 8008a88:	4ba3      	ldr	r3, [pc, #652]	; (8008d18 <_dtoa_r+0x998>)
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	f7f7 fdbc 	bl	8000608 <__aeabi_dmul>
 8008a90:	2200      	movs	r2, #0
 8008a92:	2300      	movs	r3, #0
 8008a94:	4606      	mov	r6, r0
 8008a96:	460f      	mov	r7, r1
 8008a98:	f7f8 f81e 	bl	8000ad8 <__aeabi_dcmpeq>
 8008a9c:	2800      	cmp	r0, #0
 8008a9e:	d09e      	beq.n	80089de <_dtoa_r+0x65e>
 8008aa0:	e7d0      	b.n	8008a44 <_dtoa_r+0x6c4>
 8008aa2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008aa4:	2a00      	cmp	r2, #0
 8008aa6:	f000 80ca 	beq.w	8008c3e <_dtoa_r+0x8be>
 8008aaa:	9a07      	ldr	r2, [sp, #28]
 8008aac:	2a01      	cmp	r2, #1
 8008aae:	f300 80ad 	bgt.w	8008c0c <_dtoa_r+0x88c>
 8008ab2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ab4:	2a00      	cmp	r2, #0
 8008ab6:	f000 80a5 	beq.w	8008c04 <_dtoa_r+0x884>
 8008aba:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008abe:	9e08      	ldr	r6, [sp, #32]
 8008ac0:	9d05      	ldr	r5, [sp, #20]
 8008ac2:	9a05      	ldr	r2, [sp, #20]
 8008ac4:	441a      	add	r2, r3
 8008ac6:	9205      	str	r2, [sp, #20]
 8008ac8:	9a06      	ldr	r2, [sp, #24]
 8008aca:	2101      	movs	r1, #1
 8008acc:	441a      	add	r2, r3
 8008ace:	4620      	mov	r0, r4
 8008ad0:	9206      	str	r2, [sp, #24]
 8008ad2:	f000 fc3d 	bl	8009350 <__i2b>
 8008ad6:	4607      	mov	r7, r0
 8008ad8:	b165      	cbz	r5, 8008af4 <_dtoa_r+0x774>
 8008ada:	9b06      	ldr	r3, [sp, #24]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	dd09      	ble.n	8008af4 <_dtoa_r+0x774>
 8008ae0:	42ab      	cmp	r3, r5
 8008ae2:	9a05      	ldr	r2, [sp, #20]
 8008ae4:	bfa8      	it	ge
 8008ae6:	462b      	movge	r3, r5
 8008ae8:	1ad2      	subs	r2, r2, r3
 8008aea:	9205      	str	r2, [sp, #20]
 8008aec:	9a06      	ldr	r2, [sp, #24]
 8008aee:	1aed      	subs	r5, r5, r3
 8008af0:	1ad3      	subs	r3, r2, r3
 8008af2:	9306      	str	r3, [sp, #24]
 8008af4:	9b08      	ldr	r3, [sp, #32]
 8008af6:	b1f3      	cbz	r3, 8008b36 <_dtoa_r+0x7b6>
 8008af8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	f000 80a3 	beq.w	8008c46 <_dtoa_r+0x8c6>
 8008b00:	2e00      	cmp	r6, #0
 8008b02:	dd10      	ble.n	8008b26 <_dtoa_r+0x7a6>
 8008b04:	4639      	mov	r1, r7
 8008b06:	4632      	mov	r2, r6
 8008b08:	4620      	mov	r0, r4
 8008b0a:	f000 fce1 	bl	80094d0 <__pow5mult>
 8008b0e:	4652      	mov	r2, sl
 8008b10:	4601      	mov	r1, r0
 8008b12:	4607      	mov	r7, r0
 8008b14:	4620      	mov	r0, r4
 8008b16:	f000 fc31 	bl	800937c <__multiply>
 8008b1a:	4651      	mov	r1, sl
 8008b1c:	4680      	mov	r8, r0
 8008b1e:	4620      	mov	r0, r4
 8008b20:	f000 fb60 	bl	80091e4 <_Bfree>
 8008b24:	46c2      	mov	sl, r8
 8008b26:	9b08      	ldr	r3, [sp, #32]
 8008b28:	1b9a      	subs	r2, r3, r6
 8008b2a:	d004      	beq.n	8008b36 <_dtoa_r+0x7b6>
 8008b2c:	4651      	mov	r1, sl
 8008b2e:	4620      	mov	r0, r4
 8008b30:	f000 fcce 	bl	80094d0 <__pow5mult>
 8008b34:	4682      	mov	sl, r0
 8008b36:	2101      	movs	r1, #1
 8008b38:	4620      	mov	r0, r4
 8008b3a:	f000 fc09 	bl	8009350 <__i2b>
 8008b3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	4606      	mov	r6, r0
 8008b44:	f340 8081 	ble.w	8008c4a <_dtoa_r+0x8ca>
 8008b48:	461a      	mov	r2, r3
 8008b4a:	4601      	mov	r1, r0
 8008b4c:	4620      	mov	r0, r4
 8008b4e:	f000 fcbf 	bl	80094d0 <__pow5mult>
 8008b52:	9b07      	ldr	r3, [sp, #28]
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	4606      	mov	r6, r0
 8008b58:	dd7a      	ble.n	8008c50 <_dtoa_r+0x8d0>
 8008b5a:	f04f 0800 	mov.w	r8, #0
 8008b5e:	6933      	ldr	r3, [r6, #16]
 8008b60:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008b64:	6918      	ldr	r0, [r3, #16]
 8008b66:	f000 fba5 	bl	80092b4 <__hi0bits>
 8008b6a:	f1c0 0020 	rsb	r0, r0, #32
 8008b6e:	9b06      	ldr	r3, [sp, #24]
 8008b70:	4418      	add	r0, r3
 8008b72:	f010 001f 	ands.w	r0, r0, #31
 8008b76:	f000 8094 	beq.w	8008ca2 <_dtoa_r+0x922>
 8008b7a:	f1c0 0320 	rsb	r3, r0, #32
 8008b7e:	2b04      	cmp	r3, #4
 8008b80:	f340 8085 	ble.w	8008c8e <_dtoa_r+0x90e>
 8008b84:	9b05      	ldr	r3, [sp, #20]
 8008b86:	f1c0 001c 	rsb	r0, r0, #28
 8008b8a:	4403      	add	r3, r0
 8008b8c:	9305      	str	r3, [sp, #20]
 8008b8e:	9b06      	ldr	r3, [sp, #24]
 8008b90:	4403      	add	r3, r0
 8008b92:	4405      	add	r5, r0
 8008b94:	9306      	str	r3, [sp, #24]
 8008b96:	9b05      	ldr	r3, [sp, #20]
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	dd05      	ble.n	8008ba8 <_dtoa_r+0x828>
 8008b9c:	4651      	mov	r1, sl
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	4620      	mov	r0, r4
 8008ba2:	f000 fcef 	bl	8009584 <__lshift>
 8008ba6:	4682      	mov	sl, r0
 8008ba8:	9b06      	ldr	r3, [sp, #24]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	dd05      	ble.n	8008bba <_dtoa_r+0x83a>
 8008bae:	4631      	mov	r1, r6
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	4620      	mov	r0, r4
 8008bb4:	f000 fce6 	bl	8009584 <__lshift>
 8008bb8:	4606      	mov	r6, r0
 8008bba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d072      	beq.n	8008ca6 <_dtoa_r+0x926>
 8008bc0:	4631      	mov	r1, r6
 8008bc2:	4650      	mov	r0, sl
 8008bc4:	f000 fd4a 	bl	800965c <__mcmp>
 8008bc8:	2800      	cmp	r0, #0
 8008bca:	da6c      	bge.n	8008ca6 <_dtoa_r+0x926>
 8008bcc:	2300      	movs	r3, #0
 8008bce:	4651      	mov	r1, sl
 8008bd0:	220a      	movs	r2, #10
 8008bd2:	4620      	mov	r0, r4
 8008bd4:	f000 fb28 	bl	8009228 <__multadd>
 8008bd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bda:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008bde:	4682      	mov	sl, r0
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	f000 81b0 	beq.w	8008f46 <_dtoa_r+0xbc6>
 8008be6:	2300      	movs	r3, #0
 8008be8:	4639      	mov	r1, r7
 8008bea:	220a      	movs	r2, #10
 8008bec:	4620      	mov	r0, r4
 8008bee:	f000 fb1b 	bl	8009228 <__multadd>
 8008bf2:	9b01      	ldr	r3, [sp, #4]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	4607      	mov	r7, r0
 8008bf8:	f300 8096 	bgt.w	8008d28 <_dtoa_r+0x9a8>
 8008bfc:	9b07      	ldr	r3, [sp, #28]
 8008bfe:	2b02      	cmp	r3, #2
 8008c00:	dc59      	bgt.n	8008cb6 <_dtoa_r+0x936>
 8008c02:	e091      	b.n	8008d28 <_dtoa_r+0x9a8>
 8008c04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008c06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008c0a:	e758      	b.n	8008abe <_dtoa_r+0x73e>
 8008c0c:	9b04      	ldr	r3, [sp, #16]
 8008c0e:	1e5e      	subs	r6, r3, #1
 8008c10:	9b08      	ldr	r3, [sp, #32]
 8008c12:	42b3      	cmp	r3, r6
 8008c14:	bfbf      	itttt	lt
 8008c16:	9b08      	ldrlt	r3, [sp, #32]
 8008c18:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008c1a:	9608      	strlt	r6, [sp, #32]
 8008c1c:	1af3      	sublt	r3, r6, r3
 8008c1e:	bfb4      	ite	lt
 8008c20:	18d2      	addlt	r2, r2, r3
 8008c22:	1b9e      	subge	r6, r3, r6
 8008c24:	9b04      	ldr	r3, [sp, #16]
 8008c26:	bfbc      	itt	lt
 8008c28:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008c2a:	2600      	movlt	r6, #0
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	bfb7      	itett	lt
 8008c30:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008c34:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008c38:	1a9d      	sublt	r5, r3, r2
 8008c3a:	2300      	movlt	r3, #0
 8008c3c:	e741      	b.n	8008ac2 <_dtoa_r+0x742>
 8008c3e:	9e08      	ldr	r6, [sp, #32]
 8008c40:	9d05      	ldr	r5, [sp, #20]
 8008c42:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008c44:	e748      	b.n	8008ad8 <_dtoa_r+0x758>
 8008c46:	9a08      	ldr	r2, [sp, #32]
 8008c48:	e770      	b.n	8008b2c <_dtoa_r+0x7ac>
 8008c4a:	9b07      	ldr	r3, [sp, #28]
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	dc19      	bgt.n	8008c84 <_dtoa_r+0x904>
 8008c50:	9b02      	ldr	r3, [sp, #8]
 8008c52:	b9bb      	cbnz	r3, 8008c84 <_dtoa_r+0x904>
 8008c54:	9b03      	ldr	r3, [sp, #12]
 8008c56:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c5a:	b99b      	cbnz	r3, 8008c84 <_dtoa_r+0x904>
 8008c5c:	9b03      	ldr	r3, [sp, #12]
 8008c5e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c62:	0d1b      	lsrs	r3, r3, #20
 8008c64:	051b      	lsls	r3, r3, #20
 8008c66:	b183      	cbz	r3, 8008c8a <_dtoa_r+0x90a>
 8008c68:	9b05      	ldr	r3, [sp, #20]
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	9305      	str	r3, [sp, #20]
 8008c6e:	9b06      	ldr	r3, [sp, #24]
 8008c70:	3301      	adds	r3, #1
 8008c72:	9306      	str	r3, [sp, #24]
 8008c74:	f04f 0801 	mov.w	r8, #1
 8008c78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	f47f af6f 	bne.w	8008b5e <_dtoa_r+0x7de>
 8008c80:	2001      	movs	r0, #1
 8008c82:	e774      	b.n	8008b6e <_dtoa_r+0x7ee>
 8008c84:	f04f 0800 	mov.w	r8, #0
 8008c88:	e7f6      	b.n	8008c78 <_dtoa_r+0x8f8>
 8008c8a:	4698      	mov	r8, r3
 8008c8c:	e7f4      	b.n	8008c78 <_dtoa_r+0x8f8>
 8008c8e:	d082      	beq.n	8008b96 <_dtoa_r+0x816>
 8008c90:	9a05      	ldr	r2, [sp, #20]
 8008c92:	331c      	adds	r3, #28
 8008c94:	441a      	add	r2, r3
 8008c96:	9205      	str	r2, [sp, #20]
 8008c98:	9a06      	ldr	r2, [sp, #24]
 8008c9a:	441a      	add	r2, r3
 8008c9c:	441d      	add	r5, r3
 8008c9e:	9206      	str	r2, [sp, #24]
 8008ca0:	e779      	b.n	8008b96 <_dtoa_r+0x816>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	e7f4      	b.n	8008c90 <_dtoa_r+0x910>
 8008ca6:	9b04      	ldr	r3, [sp, #16]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	dc37      	bgt.n	8008d1c <_dtoa_r+0x99c>
 8008cac:	9b07      	ldr	r3, [sp, #28]
 8008cae:	2b02      	cmp	r3, #2
 8008cb0:	dd34      	ble.n	8008d1c <_dtoa_r+0x99c>
 8008cb2:	9b04      	ldr	r3, [sp, #16]
 8008cb4:	9301      	str	r3, [sp, #4]
 8008cb6:	9b01      	ldr	r3, [sp, #4]
 8008cb8:	b963      	cbnz	r3, 8008cd4 <_dtoa_r+0x954>
 8008cba:	4631      	mov	r1, r6
 8008cbc:	2205      	movs	r2, #5
 8008cbe:	4620      	mov	r0, r4
 8008cc0:	f000 fab2 	bl	8009228 <__multadd>
 8008cc4:	4601      	mov	r1, r0
 8008cc6:	4606      	mov	r6, r0
 8008cc8:	4650      	mov	r0, sl
 8008cca:	f000 fcc7 	bl	800965c <__mcmp>
 8008cce:	2800      	cmp	r0, #0
 8008cd0:	f73f adbb 	bgt.w	800884a <_dtoa_r+0x4ca>
 8008cd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cd6:	9d00      	ldr	r5, [sp, #0]
 8008cd8:	ea6f 0b03 	mvn.w	fp, r3
 8008cdc:	f04f 0800 	mov.w	r8, #0
 8008ce0:	4631      	mov	r1, r6
 8008ce2:	4620      	mov	r0, r4
 8008ce4:	f000 fa7e 	bl	80091e4 <_Bfree>
 8008ce8:	2f00      	cmp	r7, #0
 8008cea:	f43f aeab 	beq.w	8008a44 <_dtoa_r+0x6c4>
 8008cee:	f1b8 0f00 	cmp.w	r8, #0
 8008cf2:	d005      	beq.n	8008d00 <_dtoa_r+0x980>
 8008cf4:	45b8      	cmp	r8, r7
 8008cf6:	d003      	beq.n	8008d00 <_dtoa_r+0x980>
 8008cf8:	4641      	mov	r1, r8
 8008cfa:	4620      	mov	r0, r4
 8008cfc:	f000 fa72 	bl	80091e4 <_Bfree>
 8008d00:	4639      	mov	r1, r7
 8008d02:	4620      	mov	r0, r4
 8008d04:	f000 fa6e 	bl	80091e4 <_Bfree>
 8008d08:	e69c      	b.n	8008a44 <_dtoa_r+0x6c4>
 8008d0a:	2600      	movs	r6, #0
 8008d0c:	4637      	mov	r7, r6
 8008d0e:	e7e1      	b.n	8008cd4 <_dtoa_r+0x954>
 8008d10:	46bb      	mov	fp, r7
 8008d12:	4637      	mov	r7, r6
 8008d14:	e599      	b.n	800884a <_dtoa_r+0x4ca>
 8008d16:	bf00      	nop
 8008d18:	40240000 	.word	0x40240000
 8008d1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	f000 80c8 	beq.w	8008eb4 <_dtoa_r+0xb34>
 8008d24:	9b04      	ldr	r3, [sp, #16]
 8008d26:	9301      	str	r3, [sp, #4]
 8008d28:	2d00      	cmp	r5, #0
 8008d2a:	dd05      	ble.n	8008d38 <_dtoa_r+0x9b8>
 8008d2c:	4639      	mov	r1, r7
 8008d2e:	462a      	mov	r2, r5
 8008d30:	4620      	mov	r0, r4
 8008d32:	f000 fc27 	bl	8009584 <__lshift>
 8008d36:	4607      	mov	r7, r0
 8008d38:	f1b8 0f00 	cmp.w	r8, #0
 8008d3c:	d05b      	beq.n	8008df6 <_dtoa_r+0xa76>
 8008d3e:	6879      	ldr	r1, [r7, #4]
 8008d40:	4620      	mov	r0, r4
 8008d42:	f000 fa0f 	bl	8009164 <_Balloc>
 8008d46:	4605      	mov	r5, r0
 8008d48:	b928      	cbnz	r0, 8008d56 <_dtoa_r+0x9d6>
 8008d4a:	4b83      	ldr	r3, [pc, #524]	; (8008f58 <_dtoa_r+0xbd8>)
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008d52:	f7ff bb2e 	b.w	80083b2 <_dtoa_r+0x32>
 8008d56:	693a      	ldr	r2, [r7, #16]
 8008d58:	3202      	adds	r2, #2
 8008d5a:	0092      	lsls	r2, r2, #2
 8008d5c:	f107 010c 	add.w	r1, r7, #12
 8008d60:	300c      	adds	r0, #12
 8008d62:	f7ff fa76 	bl	8008252 <memcpy>
 8008d66:	2201      	movs	r2, #1
 8008d68:	4629      	mov	r1, r5
 8008d6a:	4620      	mov	r0, r4
 8008d6c:	f000 fc0a 	bl	8009584 <__lshift>
 8008d70:	9b00      	ldr	r3, [sp, #0]
 8008d72:	3301      	adds	r3, #1
 8008d74:	9304      	str	r3, [sp, #16]
 8008d76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d7a:	4413      	add	r3, r2
 8008d7c:	9308      	str	r3, [sp, #32]
 8008d7e:	9b02      	ldr	r3, [sp, #8]
 8008d80:	f003 0301 	and.w	r3, r3, #1
 8008d84:	46b8      	mov	r8, r7
 8008d86:	9306      	str	r3, [sp, #24]
 8008d88:	4607      	mov	r7, r0
 8008d8a:	9b04      	ldr	r3, [sp, #16]
 8008d8c:	4631      	mov	r1, r6
 8008d8e:	3b01      	subs	r3, #1
 8008d90:	4650      	mov	r0, sl
 8008d92:	9301      	str	r3, [sp, #4]
 8008d94:	f7ff fa6b 	bl	800826e <quorem>
 8008d98:	4641      	mov	r1, r8
 8008d9a:	9002      	str	r0, [sp, #8]
 8008d9c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008da0:	4650      	mov	r0, sl
 8008da2:	f000 fc5b 	bl	800965c <__mcmp>
 8008da6:	463a      	mov	r2, r7
 8008da8:	9005      	str	r0, [sp, #20]
 8008daa:	4631      	mov	r1, r6
 8008dac:	4620      	mov	r0, r4
 8008dae:	f000 fc71 	bl	8009694 <__mdiff>
 8008db2:	68c2      	ldr	r2, [r0, #12]
 8008db4:	4605      	mov	r5, r0
 8008db6:	bb02      	cbnz	r2, 8008dfa <_dtoa_r+0xa7a>
 8008db8:	4601      	mov	r1, r0
 8008dba:	4650      	mov	r0, sl
 8008dbc:	f000 fc4e 	bl	800965c <__mcmp>
 8008dc0:	4602      	mov	r2, r0
 8008dc2:	4629      	mov	r1, r5
 8008dc4:	4620      	mov	r0, r4
 8008dc6:	9209      	str	r2, [sp, #36]	; 0x24
 8008dc8:	f000 fa0c 	bl	80091e4 <_Bfree>
 8008dcc:	9b07      	ldr	r3, [sp, #28]
 8008dce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008dd0:	9d04      	ldr	r5, [sp, #16]
 8008dd2:	ea43 0102 	orr.w	r1, r3, r2
 8008dd6:	9b06      	ldr	r3, [sp, #24]
 8008dd8:	4319      	orrs	r1, r3
 8008dda:	d110      	bne.n	8008dfe <_dtoa_r+0xa7e>
 8008ddc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008de0:	d029      	beq.n	8008e36 <_dtoa_r+0xab6>
 8008de2:	9b05      	ldr	r3, [sp, #20]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	dd02      	ble.n	8008dee <_dtoa_r+0xa6e>
 8008de8:	9b02      	ldr	r3, [sp, #8]
 8008dea:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008dee:	9b01      	ldr	r3, [sp, #4]
 8008df0:	f883 9000 	strb.w	r9, [r3]
 8008df4:	e774      	b.n	8008ce0 <_dtoa_r+0x960>
 8008df6:	4638      	mov	r0, r7
 8008df8:	e7ba      	b.n	8008d70 <_dtoa_r+0x9f0>
 8008dfa:	2201      	movs	r2, #1
 8008dfc:	e7e1      	b.n	8008dc2 <_dtoa_r+0xa42>
 8008dfe:	9b05      	ldr	r3, [sp, #20]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	db04      	blt.n	8008e0e <_dtoa_r+0xa8e>
 8008e04:	9907      	ldr	r1, [sp, #28]
 8008e06:	430b      	orrs	r3, r1
 8008e08:	9906      	ldr	r1, [sp, #24]
 8008e0a:	430b      	orrs	r3, r1
 8008e0c:	d120      	bne.n	8008e50 <_dtoa_r+0xad0>
 8008e0e:	2a00      	cmp	r2, #0
 8008e10:	dded      	ble.n	8008dee <_dtoa_r+0xa6e>
 8008e12:	4651      	mov	r1, sl
 8008e14:	2201      	movs	r2, #1
 8008e16:	4620      	mov	r0, r4
 8008e18:	f000 fbb4 	bl	8009584 <__lshift>
 8008e1c:	4631      	mov	r1, r6
 8008e1e:	4682      	mov	sl, r0
 8008e20:	f000 fc1c 	bl	800965c <__mcmp>
 8008e24:	2800      	cmp	r0, #0
 8008e26:	dc03      	bgt.n	8008e30 <_dtoa_r+0xab0>
 8008e28:	d1e1      	bne.n	8008dee <_dtoa_r+0xa6e>
 8008e2a:	f019 0f01 	tst.w	r9, #1
 8008e2e:	d0de      	beq.n	8008dee <_dtoa_r+0xa6e>
 8008e30:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008e34:	d1d8      	bne.n	8008de8 <_dtoa_r+0xa68>
 8008e36:	9a01      	ldr	r2, [sp, #4]
 8008e38:	2339      	movs	r3, #57	; 0x39
 8008e3a:	7013      	strb	r3, [r2, #0]
 8008e3c:	462b      	mov	r3, r5
 8008e3e:	461d      	mov	r5, r3
 8008e40:	3b01      	subs	r3, #1
 8008e42:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008e46:	2a39      	cmp	r2, #57	; 0x39
 8008e48:	d06c      	beq.n	8008f24 <_dtoa_r+0xba4>
 8008e4a:	3201      	adds	r2, #1
 8008e4c:	701a      	strb	r2, [r3, #0]
 8008e4e:	e747      	b.n	8008ce0 <_dtoa_r+0x960>
 8008e50:	2a00      	cmp	r2, #0
 8008e52:	dd07      	ble.n	8008e64 <_dtoa_r+0xae4>
 8008e54:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008e58:	d0ed      	beq.n	8008e36 <_dtoa_r+0xab6>
 8008e5a:	9a01      	ldr	r2, [sp, #4]
 8008e5c:	f109 0301 	add.w	r3, r9, #1
 8008e60:	7013      	strb	r3, [r2, #0]
 8008e62:	e73d      	b.n	8008ce0 <_dtoa_r+0x960>
 8008e64:	9b04      	ldr	r3, [sp, #16]
 8008e66:	9a08      	ldr	r2, [sp, #32]
 8008e68:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d043      	beq.n	8008ef8 <_dtoa_r+0xb78>
 8008e70:	4651      	mov	r1, sl
 8008e72:	2300      	movs	r3, #0
 8008e74:	220a      	movs	r2, #10
 8008e76:	4620      	mov	r0, r4
 8008e78:	f000 f9d6 	bl	8009228 <__multadd>
 8008e7c:	45b8      	cmp	r8, r7
 8008e7e:	4682      	mov	sl, r0
 8008e80:	f04f 0300 	mov.w	r3, #0
 8008e84:	f04f 020a 	mov.w	r2, #10
 8008e88:	4641      	mov	r1, r8
 8008e8a:	4620      	mov	r0, r4
 8008e8c:	d107      	bne.n	8008e9e <_dtoa_r+0xb1e>
 8008e8e:	f000 f9cb 	bl	8009228 <__multadd>
 8008e92:	4680      	mov	r8, r0
 8008e94:	4607      	mov	r7, r0
 8008e96:	9b04      	ldr	r3, [sp, #16]
 8008e98:	3301      	adds	r3, #1
 8008e9a:	9304      	str	r3, [sp, #16]
 8008e9c:	e775      	b.n	8008d8a <_dtoa_r+0xa0a>
 8008e9e:	f000 f9c3 	bl	8009228 <__multadd>
 8008ea2:	4639      	mov	r1, r7
 8008ea4:	4680      	mov	r8, r0
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	220a      	movs	r2, #10
 8008eaa:	4620      	mov	r0, r4
 8008eac:	f000 f9bc 	bl	8009228 <__multadd>
 8008eb0:	4607      	mov	r7, r0
 8008eb2:	e7f0      	b.n	8008e96 <_dtoa_r+0xb16>
 8008eb4:	9b04      	ldr	r3, [sp, #16]
 8008eb6:	9301      	str	r3, [sp, #4]
 8008eb8:	9d00      	ldr	r5, [sp, #0]
 8008eba:	4631      	mov	r1, r6
 8008ebc:	4650      	mov	r0, sl
 8008ebe:	f7ff f9d6 	bl	800826e <quorem>
 8008ec2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008ec6:	9b00      	ldr	r3, [sp, #0]
 8008ec8:	f805 9b01 	strb.w	r9, [r5], #1
 8008ecc:	1aea      	subs	r2, r5, r3
 8008ece:	9b01      	ldr	r3, [sp, #4]
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	dd07      	ble.n	8008ee4 <_dtoa_r+0xb64>
 8008ed4:	4651      	mov	r1, sl
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	220a      	movs	r2, #10
 8008eda:	4620      	mov	r0, r4
 8008edc:	f000 f9a4 	bl	8009228 <__multadd>
 8008ee0:	4682      	mov	sl, r0
 8008ee2:	e7ea      	b.n	8008eba <_dtoa_r+0xb3a>
 8008ee4:	9b01      	ldr	r3, [sp, #4]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	bfc8      	it	gt
 8008eea:	461d      	movgt	r5, r3
 8008eec:	9b00      	ldr	r3, [sp, #0]
 8008eee:	bfd8      	it	le
 8008ef0:	2501      	movle	r5, #1
 8008ef2:	441d      	add	r5, r3
 8008ef4:	f04f 0800 	mov.w	r8, #0
 8008ef8:	4651      	mov	r1, sl
 8008efa:	2201      	movs	r2, #1
 8008efc:	4620      	mov	r0, r4
 8008efe:	f000 fb41 	bl	8009584 <__lshift>
 8008f02:	4631      	mov	r1, r6
 8008f04:	4682      	mov	sl, r0
 8008f06:	f000 fba9 	bl	800965c <__mcmp>
 8008f0a:	2800      	cmp	r0, #0
 8008f0c:	dc96      	bgt.n	8008e3c <_dtoa_r+0xabc>
 8008f0e:	d102      	bne.n	8008f16 <_dtoa_r+0xb96>
 8008f10:	f019 0f01 	tst.w	r9, #1
 8008f14:	d192      	bne.n	8008e3c <_dtoa_r+0xabc>
 8008f16:	462b      	mov	r3, r5
 8008f18:	461d      	mov	r5, r3
 8008f1a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f1e:	2a30      	cmp	r2, #48	; 0x30
 8008f20:	d0fa      	beq.n	8008f18 <_dtoa_r+0xb98>
 8008f22:	e6dd      	b.n	8008ce0 <_dtoa_r+0x960>
 8008f24:	9a00      	ldr	r2, [sp, #0]
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d189      	bne.n	8008e3e <_dtoa_r+0xabe>
 8008f2a:	f10b 0b01 	add.w	fp, fp, #1
 8008f2e:	2331      	movs	r3, #49	; 0x31
 8008f30:	e796      	b.n	8008e60 <_dtoa_r+0xae0>
 8008f32:	4b0a      	ldr	r3, [pc, #40]	; (8008f5c <_dtoa_r+0xbdc>)
 8008f34:	f7ff ba99 	b.w	800846a <_dtoa_r+0xea>
 8008f38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	f47f aa6d 	bne.w	800841a <_dtoa_r+0x9a>
 8008f40:	4b07      	ldr	r3, [pc, #28]	; (8008f60 <_dtoa_r+0xbe0>)
 8008f42:	f7ff ba92 	b.w	800846a <_dtoa_r+0xea>
 8008f46:	9b01      	ldr	r3, [sp, #4]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	dcb5      	bgt.n	8008eb8 <_dtoa_r+0xb38>
 8008f4c:	9b07      	ldr	r3, [sp, #28]
 8008f4e:	2b02      	cmp	r3, #2
 8008f50:	f73f aeb1 	bgt.w	8008cb6 <_dtoa_r+0x936>
 8008f54:	e7b0      	b.n	8008eb8 <_dtoa_r+0xb38>
 8008f56:	bf00      	nop
 8008f58:	0800a204 	.word	0x0800a204
 8008f5c:	0800a164 	.word	0x0800a164
 8008f60:	0800a188 	.word	0x0800a188

08008f64 <_free_r>:
 8008f64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f66:	2900      	cmp	r1, #0
 8008f68:	d044      	beq.n	8008ff4 <_free_r+0x90>
 8008f6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f6e:	9001      	str	r0, [sp, #4]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	f1a1 0404 	sub.w	r4, r1, #4
 8008f76:	bfb8      	it	lt
 8008f78:	18e4      	addlt	r4, r4, r3
 8008f7a:	f000 f8e7 	bl	800914c <__malloc_lock>
 8008f7e:	4a1e      	ldr	r2, [pc, #120]	; (8008ff8 <_free_r+0x94>)
 8008f80:	9801      	ldr	r0, [sp, #4]
 8008f82:	6813      	ldr	r3, [r2, #0]
 8008f84:	b933      	cbnz	r3, 8008f94 <_free_r+0x30>
 8008f86:	6063      	str	r3, [r4, #4]
 8008f88:	6014      	str	r4, [r2, #0]
 8008f8a:	b003      	add	sp, #12
 8008f8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f90:	f000 b8e2 	b.w	8009158 <__malloc_unlock>
 8008f94:	42a3      	cmp	r3, r4
 8008f96:	d908      	bls.n	8008faa <_free_r+0x46>
 8008f98:	6825      	ldr	r5, [r4, #0]
 8008f9a:	1961      	adds	r1, r4, r5
 8008f9c:	428b      	cmp	r3, r1
 8008f9e:	bf01      	itttt	eq
 8008fa0:	6819      	ldreq	r1, [r3, #0]
 8008fa2:	685b      	ldreq	r3, [r3, #4]
 8008fa4:	1949      	addeq	r1, r1, r5
 8008fa6:	6021      	streq	r1, [r4, #0]
 8008fa8:	e7ed      	b.n	8008f86 <_free_r+0x22>
 8008faa:	461a      	mov	r2, r3
 8008fac:	685b      	ldr	r3, [r3, #4]
 8008fae:	b10b      	cbz	r3, 8008fb4 <_free_r+0x50>
 8008fb0:	42a3      	cmp	r3, r4
 8008fb2:	d9fa      	bls.n	8008faa <_free_r+0x46>
 8008fb4:	6811      	ldr	r1, [r2, #0]
 8008fb6:	1855      	adds	r5, r2, r1
 8008fb8:	42a5      	cmp	r5, r4
 8008fba:	d10b      	bne.n	8008fd4 <_free_r+0x70>
 8008fbc:	6824      	ldr	r4, [r4, #0]
 8008fbe:	4421      	add	r1, r4
 8008fc0:	1854      	adds	r4, r2, r1
 8008fc2:	42a3      	cmp	r3, r4
 8008fc4:	6011      	str	r1, [r2, #0]
 8008fc6:	d1e0      	bne.n	8008f8a <_free_r+0x26>
 8008fc8:	681c      	ldr	r4, [r3, #0]
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	6053      	str	r3, [r2, #4]
 8008fce:	440c      	add	r4, r1
 8008fd0:	6014      	str	r4, [r2, #0]
 8008fd2:	e7da      	b.n	8008f8a <_free_r+0x26>
 8008fd4:	d902      	bls.n	8008fdc <_free_r+0x78>
 8008fd6:	230c      	movs	r3, #12
 8008fd8:	6003      	str	r3, [r0, #0]
 8008fda:	e7d6      	b.n	8008f8a <_free_r+0x26>
 8008fdc:	6825      	ldr	r5, [r4, #0]
 8008fde:	1961      	adds	r1, r4, r5
 8008fe0:	428b      	cmp	r3, r1
 8008fe2:	bf04      	itt	eq
 8008fe4:	6819      	ldreq	r1, [r3, #0]
 8008fe6:	685b      	ldreq	r3, [r3, #4]
 8008fe8:	6063      	str	r3, [r4, #4]
 8008fea:	bf04      	itt	eq
 8008fec:	1949      	addeq	r1, r1, r5
 8008fee:	6021      	streq	r1, [r4, #0]
 8008ff0:	6054      	str	r4, [r2, #4]
 8008ff2:	e7ca      	b.n	8008f8a <_free_r+0x26>
 8008ff4:	b003      	add	sp, #12
 8008ff6:	bd30      	pop	{r4, r5, pc}
 8008ff8:	20004fac 	.word	0x20004fac

08008ffc <malloc>:
 8008ffc:	4b02      	ldr	r3, [pc, #8]	; (8009008 <malloc+0xc>)
 8008ffe:	4601      	mov	r1, r0
 8009000:	6818      	ldr	r0, [r3, #0]
 8009002:	f000 b823 	b.w	800904c <_malloc_r>
 8009006:	bf00      	nop
 8009008:	20000068 	.word	0x20000068

0800900c <sbrk_aligned>:
 800900c:	b570      	push	{r4, r5, r6, lr}
 800900e:	4e0e      	ldr	r6, [pc, #56]	; (8009048 <sbrk_aligned+0x3c>)
 8009010:	460c      	mov	r4, r1
 8009012:	6831      	ldr	r1, [r6, #0]
 8009014:	4605      	mov	r5, r0
 8009016:	b911      	cbnz	r1, 800901e <sbrk_aligned+0x12>
 8009018:	f000 fe96 	bl	8009d48 <_sbrk_r>
 800901c:	6030      	str	r0, [r6, #0]
 800901e:	4621      	mov	r1, r4
 8009020:	4628      	mov	r0, r5
 8009022:	f000 fe91 	bl	8009d48 <_sbrk_r>
 8009026:	1c43      	adds	r3, r0, #1
 8009028:	d00a      	beq.n	8009040 <sbrk_aligned+0x34>
 800902a:	1cc4      	adds	r4, r0, #3
 800902c:	f024 0403 	bic.w	r4, r4, #3
 8009030:	42a0      	cmp	r0, r4
 8009032:	d007      	beq.n	8009044 <sbrk_aligned+0x38>
 8009034:	1a21      	subs	r1, r4, r0
 8009036:	4628      	mov	r0, r5
 8009038:	f000 fe86 	bl	8009d48 <_sbrk_r>
 800903c:	3001      	adds	r0, #1
 800903e:	d101      	bne.n	8009044 <sbrk_aligned+0x38>
 8009040:	f04f 34ff 	mov.w	r4, #4294967295
 8009044:	4620      	mov	r0, r4
 8009046:	bd70      	pop	{r4, r5, r6, pc}
 8009048:	20004fb0 	.word	0x20004fb0

0800904c <_malloc_r>:
 800904c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009050:	1ccd      	adds	r5, r1, #3
 8009052:	f025 0503 	bic.w	r5, r5, #3
 8009056:	3508      	adds	r5, #8
 8009058:	2d0c      	cmp	r5, #12
 800905a:	bf38      	it	cc
 800905c:	250c      	movcc	r5, #12
 800905e:	2d00      	cmp	r5, #0
 8009060:	4607      	mov	r7, r0
 8009062:	db01      	blt.n	8009068 <_malloc_r+0x1c>
 8009064:	42a9      	cmp	r1, r5
 8009066:	d905      	bls.n	8009074 <_malloc_r+0x28>
 8009068:	230c      	movs	r3, #12
 800906a:	603b      	str	r3, [r7, #0]
 800906c:	2600      	movs	r6, #0
 800906e:	4630      	mov	r0, r6
 8009070:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009074:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009148 <_malloc_r+0xfc>
 8009078:	f000 f868 	bl	800914c <__malloc_lock>
 800907c:	f8d8 3000 	ldr.w	r3, [r8]
 8009080:	461c      	mov	r4, r3
 8009082:	bb5c      	cbnz	r4, 80090dc <_malloc_r+0x90>
 8009084:	4629      	mov	r1, r5
 8009086:	4638      	mov	r0, r7
 8009088:	f7ff ffc0 	bl	800900c <sbrk_aligned>
 800908c:	1c43      	adds	r3, r0, #1
 800908e:	4604      	mov	r4, r0
 8009090:	d155      	bne.n	800913e <_malloc_r+0xf2>
 8009092:	f8d8 4000 	ldr.w	r4, [r8]
 8009096:	4626      	mov	r6, r4
 8009098:	2e00      	cmp	r6, #0
 800909a:	d145      	bne.n	8009128 <_malloc_r+0xdc>
 800909c:	2c00      	cmp	r4, #0
 800909e:	d048      	beq.n	8009132 <_malloc_r+0xe6>
 80090a0:	6823      	ldr	r3, [r4, #0]
 80090a2:	4631      	mov	r1, r6
 80090a4:	4638      	mov	r0, r7
 80090a6:	eb04 0903 	add.w	r9, r4, r3
 80090aa:	f000 fe4d 	bl	8009d48 <_sbrk_r>
 80090ae:	4581      	cmp	r9, r0
 80090b0:	d13f      	bne.n	8009132 <_malloc_r+0xe6>
 80090b2:	6821      	ldr	r1, [r4, #0]
 80090b4:	1a6d      	subs	r5, r5, r1
 80090b6:	4629      	mov	r1, r5
 80090b8:	4638      	mov	r0, r7
 80090ba:	f7ff ffa7 	bl	800900c <sbrk_aligned>
 80090be:	3001      	adds	r0, #1
 80090c0:	d037      	beq.n	8009132 <_malloc_r+0xe6>
 80090c2:	6823      	ldr	r3, [r4, #0]
 80090c4:	442b      	add	r3, r5
 80090c6:	6023      	str	r3, [r4, #0]
 80090c8:	f8d8 3000 	ldr.w	r3, [r8]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d038      	beq.n	8009142 <_malloc_r+0xf6>
 80090d0:	685a      	ldr	r2, [r3, #4]
 80090d2:	42a2      	cmp	r2, r4
 80090d4:	d12b      	bne.n	800912e <_malloc_r+0xe2>
 80090d6:	2200      	movs	r2, #0
 80090d8:	605a      	str	r2, [r3, #4]
 80090da:	e00f      	b.n	80090fc <_malloc_r+0xb0>
 80090dc:	6822      	ldr	r2, [r4, #0]
 80090de:	1b52      	subs	r2, r2, r5
 80090e0:	d41f      	bmi.n	8009122 <_malloc_r+0xd6>
 80090e2:	2a0b      	cmp	r2, #11
 80090e4:	d917      	bls.n	8009116 <_malloc_r+0xca>
 80090e6:	1961      	adds	r1, r4, r5
 80090e8:	42a3      	cmp	r3, r4
 80090ea:	6025      	str	r5, [r4, #0]
 80090ec:	bf18      	it	ne
 80090ee:	6059      	strne	r1, [r3, #4]
 80090f0:	6863      	ldr	r3, [r4, #4]
 80090f2:	bf08      	it	eq
 80090f4:	f8c8 1000 	streq.w	r1, [r8]
 80090f8:	5162      	str	r2, [r4, r5]
 80090fa:	604b      	str	r3, [r1, #4]
 80090fc:	4638      	mov	r0, r7
 80090fe:	f104 060b 	add.w	r6, r4, #11
 8009102:	f000 f829 	bl	8009158 <__malloc_unlock>
 8009106:	f026 0607 	bic.w	r6, r6, #7
 800910a:	1d23      	adds	r3, r4, #4
 800910c:	1af2      	subs	r2, r6, r3
 800910e:	d0ae      	beq.n	800906e <_malloc_r+0x22>
 8009110:	1b9b      	subs	r3, r3, r6
 8009112:	50a3      	str	r3, [r4, r2]
 8009114:	e7ab      	b.n	800906e <_malloc_r+0x22>
 8009116:	42a3      	cmp	r3, r4
 8009118:	6862      	ldr	r2, [r4, #4]
 800911a:	d1dd      	bne.n	80090d8 <_malloc_r+0x8c>
 800911c:	f8c8 2000 	str.w	r2, [r8]
 8009120:	e7ec      	b.n	80090fc <_malloc_r+0xb0>
 8009122:	4623      	mov	r3, r4
 8009124:	6864      	ldr	r4, [r4, #4]
 8009126:	e7ac      	b.n	8009082 <_malloc_r+0x36>
 8009128:	4634      	mov	r4, r6
 800912a:	6876      	ldr	r6, [r6, #4]
 800912c:	e7b4      	b.n	8009098 <_malloc_r+0x4c>
 800912e:	4613      	mov	r3, r2
 8009130:	e7cc      	b.n	80090cc <_malloc_r+0x80>
 8009132:	230c      	movs	r3, #12
 8009134:	603b      	str	r3, [r7, #0]
 8009136:	4638      	mov	r0, r7
 8009138:	f000 f80e 	bl	8009158 <__malloc_unlock>
 800913c:	e797      	b.n	800906e <_malloc_r+0x22>
 800913e:	6025      	str	r5, [r4, #0]
 8009140:	e7dc      	b.n	80090fc <_malloc_r+0xb0>
 8009142:	605b      	str	r3, [r3, #4]
 8009144:	deff      	udf	#255	; 0xff
 8009146:	bf00      	nop
 8009148:	20004fac 	.word	0x20004fac

0800914c <__malloc_lock>:
 800914c:	4801      	ldr	r0, [pc, #4]	; (8009154 <__malloc_lock+0x8>)
 800914e:	f7ff b87e 	b.w	800824e <__retarget_lock_acquire_recursive>
 8009152:	bf00      	nop
 8009154:	20004fa8 	.word	0x20004fa8

08009158 <__malloc_unlock>:
 8009158:	4801      	ldr	r0, [pc, #4]	; (8009160 <__malloc_unlock+0x8>)
 800915a:	f7ff b879 	b.w	8008250 <__retarget_lock_release_recursive>
 800915e:	bf00      	nop
 8009160:	20004fa8 	.word	0x20004fa8

08009164 <_Balloc>:
 8009164:	b570      	push	{r4, r5, r6, lr}
 8009166:	69c6      	ldr	r6, [r0, #28]
 8009168:	4604      	mov	r4, r0
 800916a:	460d      	mov	r5, r1
 800916c:	b976      	cbnz	r6, 800918c <_Balloc+0x28>
 800916e:	2010      	movs	r0, #16
 8009170:	f7ff ff44 	bl	8008ffc <malloc>
 8009174:	4602      	mov	r2, r0
 8009176:	61e0      	str	r0, [r4, #28]
 8009178:	b920      	cbnz	r0, 8009184 <_Balloc+0x20>
 800917a:	4b18      	ldr	r3, [pc, #96]	; (80091dc <_Balloc+0x78>)
 800917c:	4818      	ldr	r0, [pc, #96]	; (80091e0 <_Balloc+0x7c>)
 800917e:	216b      	movs	r1, #107	; 0x6b
 8009180:	f000 fdf2 	bl	8009d68 <__assert_func>
 8009184:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009188:	6006      	str	r6, [r0, #0]
 800918a:	60c6      	str	r6, [r0, #12]
 800918c:	69e6      	ldr	r6, [r4, #28]
 800918e:	68f3      	ldr	r3, [r6, #12]
 8009190:	b183      	cbz	r3, 80091b4 <_Balloc+0x50>
 8009192:	69e3      	ldr	r3, [r4, #28]
 8009194:	68db      	ldr	r3, [r3, #12]
 8009196:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800919a:	b9b8      	cbnz	r0, 80091cc <_Balloc+0x68>
 800919c:	2101      	movs	r1, #1
 800919e:	fa01 f605 	lsl.w	r6, r1, r5
 80091a2:	1d72      	adds	r2, r6, #5
 80091a4:	0092      	lsls	r2, r2, #2
 80091a6:	4620      	mov	r0, r4
 80091a8:	f000 fdfc 	bl	8009da4 <_calloc_r>
 80091ac:	b160      	cbz	r0, 80091c8 <_Balloc+0x64>
 80091ae:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80091b2:	e00e      	b.n	80091d2 <_Balloc+0x6e>
 80091b4:	2221      	movs	r2, #33	; 0x21
 80091b6:	2104      	movs	r1, #4
 80091b8:	4620      	mov	r0, r4
 80091ba:	f000 fdf3 	bl	8009da4 <_calloc_r>
 80091be:	69e3      	ldr	r3, [r4, #28]
 80091c0:	60f0      	str	r0, [r6, #12]
 80091c2:	68db      	ldr	r3, [r3, #12]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d1e4      	bne.n	8009192 <_Balloc+0x2e>
 80091c8:	2000      	movs	r0, #0
 80091ca:	bd70      	pop	{r4, r5, r6, pc}
 80091cc:	6802      	ldr	r2, [r0, #0]
 80091ce:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80091d2:	2300      	movs	r3, #0
 80091d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80091d8:	e7f7      	b.n	80091ca <_Balloc+0x66>
 80091da:	bf00      	nop
 80091dc:	0800a195 	.word	0x0800a195
 80091e0:	0800a215 	.word	0x0800a215

080091e4 <_Bfree>:
 80091e4:	b570      	push	{r4, r5, r6, lr}
 80091e6:	69c6      	ldr	r6, [r0, #28]
 80091e8:	4605      	mov	r5, r0
 80091ea:	460c      	mov	r4, r1
 80091ec:	b976      	cbnz	r6, 800920c <_Bfree+0x28>
 80091ee:	2010      	movs	r0, #16
 80091f0:	f7ff ff04 	bl	8008ffc <malloc>
 80091f4:	4602      	mov	r2, r0
 80091f6:	61e8      	str	r0, [r5, #28]
 80091f8:	b920      	cbnz	r0, 8009204 <_Bfree+0x20>
 80091fa:	4b09      	ldr	r3, [pc, #36]	; (8009220 <_Bfree+0x3c>)
 80091fc:	4809      	ldr	r0, [pc, #36]	; (8009224 <_Bfree+0x40>)
 80091fe:	218f      	movs	r1, #143	; 0x8f
 8009200:	f000 fdb2 	bl	8009d68 <__assert_func>
 8009204:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009208:	6006      	str	r6, [r0, #0]
 800920a:	60c6      	str	r6, [r0, #12]
 800920c:	b13c      	cbz	r4, 800921e <_Bfree+0x3a>
 800920e:	69eb      	ldr	r3, [r5, #28]
 8009210:	6862      	ldr	r2, [r4, #4]
 8009212:	68db      	ldr	r3, [r3, #12]
 8009214:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009218:	6021      	str	r1, [r4, #0]
 800921a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800921e:	bd70      	pop	{r4, r5, r6, pc}
 8009220:	0800a195 	.word	0x0800a195
 8009224:	0800a215 	.word	0x0800a215

08009228 <__multadd>:
 8009228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800922c:	690d      	ldr	r5, [r1, #16]
 800922e:	4607      	mov	r7, r0
 8009230:	460c      	mov	r4, r1
 8009232:	461e      	mov	r6, r3
 8009234:	f101 0c14 	add.w	ip, r1, #20
 8009238:	2000      	movs	r0, #0
 800923a:	f8dc 3000 	ldr.w	r3, [ip]
 800923e:	b299      	uxth	r1, r3
 8009240:	fb02 6101 	mla	r1, r2, r1, r6
 8009244:	0c1e      	lsrs	r6, r3, #16
 8009246:	0c0b      	lsrs	r3, r1, #16
 8009248:	fb02 3306 	mla	r3, r2, r6, r3
 800924c:	b289      	uxth	r1, r1
 800924e:	3001      	adds	r0, #1
 8009250:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009254:	4285      	cmp	r5, r0
 8009256:	f84c 1b04 	str.w	r1, [ip], #4
 800925a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800925e:	dcec      	bgt.n	800923a <__multadd+0x12>
 8009260:	b30e      	cbz	r6, 80092a6 <__multadd+0x7e>
 8009262:	68a3      	ldr	r3, [r4, #8]
 8009264:	42ab      	cmp	r3, r5
 8009266:	dc19      	bgt.n	800929c <__multadd+0x74>
 8009268:	6861      	ldr	r1, [r4, #4]
 800926a:	4638      	mov	r0, r7
 800926c:	3101      	adds	r1, #1
 800926e:	f7ff ff79 	bl	8009164 <_Balloc>
 8009272:	4680      	mov	r8, r0
 8009274:	b928      	cbnz	r0, 8009282 <__multadd+0x5a>
 8009276:	4602      	mov	r2, r0
 8009278:	4b0c      	ldr	r3, [pc, #48]	; (80092ac <__multadd+0x84>)
 800927a:	480d      	ldr	r0, [pc, #52]	; (80092b0 <__multadd+0x88>)
 800927c:	21ba      	movs	r1, #186	; 0xba
 800927e:	f000 fd73 	bl	8009d68 <__assert_func>
 8009282:	6922      	ldr	r2, [r4, #16]
 8009284:	3202      	adds	r2, #2
 8009286:	f104 010c 	add.w	r1, r4, #12
 800928a:	0092      	lsls	r2, r2, #2
 800928c:	300c      	adds	r0, #12
 800928e:	f7fe ffe0 	bl	8008252 <memcpy>
 8009292:	4621      	mov	r1, r4
 8009294:	4638      	mov	r0, r7
 8009296:	f7ff ffa5 	bl	80091e4 <_Bfree>
 800929a:	4644      	mov	r4, r8
 800929c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80092a0:	3501      	adds	r5, #1
 80092a2:	615e      	str	r6, [r3, #20]
 80092a4:	6125      	str	r5, [r4, #16]
 80092a6:	4620      	mov	r0, r4
 80092a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092ac:	0800a204 	.word	0x0800a204
 80092b0:	0800a215 	.word	0x0800a215

080092b4 <__hi0bits>:
 80092b4:	0c03      	lsrs	r3, r0, #16
 80092b6:	041b      	lsls	r3, r3, #16
 80092b8:	b9d3      	cbnz	r3, 80092f0 <__hi0bits+0x3c>
 80092ba:	0400      	lsls	r0, r0, #16
 80092bc:	2310      	movs	r3, #16
 80092be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80092c2:	bf04      	itt	eq
 80092c4:	0200      	lsleq	r0, r0, #8
 80092c6:	3308      	addeq	r3, #8
 80092c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80092cc:	bf04      	itt	eq
 80092ce:	0100      	lsleq	r0, r0, #4
 80092d0:	3304      	addeq	r3, #4
 80092d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80092d6:	bf04      	itt	eq
 80092d8:	0080      	lsleq	r0, r0, #2
 80092da:	3302      	addeq	r3, #2
 80092dc:	2800      	cmp	r0, #0
 80092de:	db05      	blt.n	80092ec <__hi0bits+0x38>
 80092e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80092e4:	f103 0301 	add.w	r3, r3, #1
 80092e8:	bf08      	it	eq
 80092ea:	2320      	moveq	r3, #32
 80092ec:	4618      	mov	r0, r3
 80092ee:	4770      	bx	lr
 80092f0:	2300      	movs	r3, #0
 80092f2:	e7e4      	b.n	80092be <__hi0bits+0xa>

080092f4 <__lo0bits>:
 80092f4:	6803      	ldr	r3, [r0, #0]
 80092f6:	f013 0207 	ands.w	r2, r3, #7
 80092fa:	d00c      	beq.n	8009316 <__lo0bits+0x22>
 80092fc:	07d9      	lsls	r1, r3, #31
 80092fe:	d422      	bmi.n	8009346 <__lo0bits+0x52>
 8009300:	079a      	lsls	r2, r3, #30
 8009302:	bf49      	itett	mi
 8009304:	085b      	lsrmi	r3, r3, #1
 8009306:	089b      	lsrpl	r3, r3, #2
 8009308:	6003      	strmi	r3, [r0, #0]
 800930a:	2201      	movmi	r2, #1
 800930c:	bf5c      	itt	pl
 800930e:	6003      	strpl	r3, [r0, #0]
 8009310:	2202      	movpl	r2, #2
 8009312:	4610      	mov	r0, r2
 8009314:	4770      	bx	lr
 8009316:	b299      	uxth	r1, r3
 8009318:	b909      	cbnz	r1, 800931e <__lo0bits+0x2a>
 800931a:	0c1b      	lsrs	r3, r3, #16
 800931c:	2210      	movs	r2, #16
 800931e:	b2d9      	uxtb	r1, r3
 8009320:	b909      	cbnz	r1, 8009326 <__lo0bits+0x32>
 8009322:	3208      	adds	r2, #8
 8009324:	0a1b      	lsrs	r3, r3, #8
 8009326:	0719      	lsls	r1, r3, #28
 8009328:	bf04      	itt	eq
 800932a:	091b      	lsreq	r3, r3, #4
 800932c:	3204      	addeq	r2, #4
 800932e:	0799      	lsls	r1, r3, #30
 8009330:	bf04      	itt	eq
 8009332:	089b      	lsreq	r3, r3, #2
 8009334:	3202      	addeq	r2, #2
 8009336:	07d9      	lsls	r1, r3, #31
 8009338:	d403      	bmi.n	8009342 <__lo0bits+0x4e>
 800933a:	085b      	lsrs	r3, r3, #1
 800933c:	f102 0201 	add.w	r2, r2, #1
 8009340:	d003      	beq.n	800934a <__lo0bits+0x56>
 8009342:	6003      	str	r3, [r0, #0]
 8009344:	e7e5      	b.n	8009312 <__lo0bits+0x1e>
 8009346:	2200      	movs	r2, #0
 8009348:	e7e3      	b.n	8009312 <__lo0bits+0x1e>
 800934a:	2220      	movs	r2, #32
 800934c:	e7e1      	b.n	8009312 <__lo0bits+0x1e>
	...

08009350 <__i2b>:
 8009350:	b510      	push	{r4, lr}
 8009352:	460c      	mov	r4, r1
 8009354:	2101      	movs	r1, #1
 8009356:	f7ff ff05 	bl	8009164 <_Balloc>
 800935a:	4602      	mov	r2, r0
 800935c:	b928      	cbnz	r0, 800936a <__i2b+0x1a>
 800935e:	4b05      	ldr	r3, [pc, #20]	; (8009374 <__i2b+0x24>)
 8009360:	4805      	ldr	r0, [pc, #20]	; (8009378 <__i2b+0x28>)
 8009362:	f240 1145 	movw	r1, #325	; 0x145
 8009366:	f000 fcff 	bl	8009d68 <__assert_func>
 800936a:	2301      	movs	r3, #1
 800936c:	6144      	str	r4, [r0, #20]
 800936e:	6103      	str	r3, [r0, #16]
 8009370:	bd10      	pop	{r4, pc}
 8009372:	bf00      	nop
 8009374:	0800a204 	.word	0x0800a204
 8009378:	0800a215 	.word	0x0800a215

0800937c <__multiply>:
 800937c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009380:	4691      	mov	r9, r2
 8009382:	690a      	ldr	r2, [r1, #16]
 8009384:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009388:	429a      	cmp	r2, r3
 800938a:	bfb8      	it	lt
 800938c:	460b      	movlt	r3, r1
 800938e:	460c      	mov	r4, r1
 8009390:	bfbc      	itt	lt
 8009392:	464c      	movlt	r4, r9
 8009394:	4699      	movlt	r9, r3
 8009396:	6927      	ldr	r7, [r4, #16]
 8009398:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800939c:	68a3      	ldr	r3, [r4, #8]
 800939e:	6861      	ldr	r1, [r4, #4]
 80093a0:	eb07 060a 	add.w	r6, r7, sl
 80093a4:	42b3      	cmp	r3, r6
 80093a6:	b085      	sub	sp, #20
 80093a8:	bfb8      	it	lt
 80093aa:	3101      	addlt	r1, #1
 80093ac:	f7ff feda 	bl	8009164 <_Balloc>
 80093b0:	b930      	cbnz	r0, 80093c0 <__multiply+0x44>
 80093b2:	4602      	mov	r2, r0
 80093b4:	4b44      	ldr	r3, [pc, #272]	; (80094c8 <__multiply+0x14c>)
 80093b6:	4845      	ldr	r0, [pc, #276]	; (80094cc <__multiply+0x150>)
 80093b8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80093bc:	f000 fcd4 	bl	8009d68 <__assert_func>
 80093c0:	f100 0514 	add.w	r5, r0, #20
 80093c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80093c8:	462b      	mov	r3, r5
 80093ca:	2200      	movs	r2, #0
 80093cc:	4543      	cmp	r3, r8
 80093ce:	d321      	bcc.n	8009414 <__multiply+0x98>
 80093d0:	f104 0314 	add.w	r3, r4, #20
 80093d4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80093d8:	f109 0314 	add.w	r3, r9, #20
 80093dc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80093e0:	9202      	str	r2, [sp, #8]
 80093e2:	1b3a      	subs	r2, r7, r4
 80093e4:	3a15      	subs	r2, #21
 80093e6:	f022 0203 	bic.w	r2, r2, #3
 80093ea:	3204      	adds	r2, #4
 80093ec:	f104 0115 	add.w	r1, r4, #21
 80093f0:	428f      	cmp	r7, r1
 80093f2:	bf38      	it	cc
 80093f4:	2204      	movcc	r2, #4
 80093f6:	9201      	str	r2, [sp, #4]
 80093f8:	9a02      	ldr	r2, [sp, #8]
 80093fa:	9303      	str	r3, [sp, #12]
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d80c      	bhi.n	800941a <__multiply+0x9e>
 8009400:	2e00      	cmp	r6, #0
 8009402:	dd03      	ble.n	800940c <__multiply+0x90>
 8009404:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009408:	2b00      	cmp	r3, #0
 800940a:	d05b      	beq.n	80094c4 <__multiply+0x148>
 800940c:	6106      	str	r6, [r0, #16]
 800940e:	b005      	add	sp, #20
 8009410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009414:	f843 2b04 	str.w	r2, [r3], #4
 8009418:	e7d8      	b.n	80093cc <__multiply+0x50>
 800941a:	f8b3 a000 	ldrh.w	sl, [r3]
 800941e:	f1ba 0f00 	cmp.w	sl, #0
 8009422:	d024      	beq.n	800946e <__multiply+0xf2>
 8009424:	f104 0e14 	add.w	lr, r4, #20
 8009428:	46a9      	mov	r9, r5
 800942a:	f04f 0c00 	mov.w	ip, #0
 800942e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009432:	f8d9 1000 	ldr.w	r1, [r9]
 8009436:	fa1f fb82 	uxth.w	fp, r2
 800943a:	b289      	uxth	r1, r1
 800943c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009440:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009444:	f8d9 2000 	ldr.w	r2, [r9]
 8009448:	4461      	add	r1, ip
 800944a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800944e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009452:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009456:	b289      	uxth	r1, r1
 8009458:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800945c:	4577      	cmp	r7, lr
 800945e:	f849 1b04 	str.w	r1, [r9], #4
 8009462:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009466:	d8e2      	bhi.n	800942e <__multiply+0xb2>
 8009468:	9a01      	ldr	r2, [sp, #4]
 800946a:	f845 c002 	str.w	ip, [r5, r2]
 800946e:	9a03      	ldr	r2, [sp, #12]
 8009470:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009474:	3304      	adds	r3, #4
 8009476:	f1b9 0f00 	cmp.w	r9, #0
 800947a:	d021      	beq.n	80094c0 <__multiply+0x144>
 800947c:	6829      	ldr	r1, [r5, #0]
 800947e:	f104 0c14 	add.w	ip, r4, #20
 8009482:	46ae      	mov	lr, r5
 8009484:	f04f 0a00 	mov.w	sl, #0
 8009488:	f8bc b000 	ldrh.w	fp, [ip]
 800948c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009490:	fb09 220b 	mla	r2, r9, fp, r2
 8009494:	4452      	add	r2, sl
 8009496:	b289      	uxth	r1, r1
 8009498:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800949c:	f84e 1b04 	str.w	r1, [lr], #4
 80094a0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80094a4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80094a8:	f8be 1000 	ldrh.w	r1, [lr]
 80094ac:	fb09 110a 	mla	r1, r9, sl, r1
 80094b0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80094b4:	4567      	cmp	r7, ip
 80094b6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80094ba:	d8e5      	bhi.n	8009488 <__multiply+0x10c>
 80094bc:	9a01      	ldr	r2, [sp, #4]
 80094be:	50a9      	str	r1, [r5, r2]
 80094c0:	3504      	adds	r5, #4
 80094c2:	e799      	b.n	80093f8 <__multiply+0x7c>
 80094c4:	3e01      	subs	r6, #1
 80094c6:	e79b      	b.n	8009400 <__multiply+0x84>
 80094c8:	0800a204 	.word	0x0800a204
 80094cc:	0800a215 	.word	0x0800a215

080094d0 <__pow5mult>:
 80094d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094d4:	4615      	mov	r5, r2
 80094d6:	f012 0203 	ands.w	r2, r2, #3
 80094da:	4606      	mov	r6, r0
 80094dc:	460f      	mov	r7, r1
 80094de:	d007      	beq.n	80094f0 <__pow5mult+0x20>
 80094e0:	4c25      	ldr	r4, [pc, #148]	; (8009578 <__pow5mult+0xa8>)
 80094e2:	3a01      	subs	r2, #1
 80094e4:	2300      	movs	r3, #0
 80094e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80094ea:	f7ff fe9d 	bl	8009228 <__multadd>
 80094ee:	4607      	mov	r7, r0
 80094f0:	10ad      	asrs	r5, r5, #2
 80094f2:	d03d      	beq.n	8009570 <__pow5mult+0xa0>
 80094f4:	69f4      	ldr	r4, [r6, #28]
 80094f6:	b97c      	cbnz	r4, 8009518 <__pow5mult+0x48>
 80094f8:	2010      	movs	r0, #16
 80094fa:	f7ff fd7f 	bl	8008ffc <malloc>
 80094fe:	4602      	mov	r2, r0
 8009500:	61f0      	str	r0, [r6, #28]
 8009502:	b928      	cbnz	r0, 8009510 <__pow5mult+0x40>
 8009504:	4b1d      	ldr	r3, [pc, #116]	; (800957c <__pow5mult+0xac>)
 8009506:	481e      	ldr	r0, [pc, #120]	; (8009580 <__pow5mult+0xb0>)
 8009508:	f240 11b3 	movw	r1, #435	; 0x1b3
 800950c:	f000 fc2c 	bl	8009d68 <__assert_func>
 8009510:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009514:	6004      	str	r4, [r0, #0]
 8009516:	60c4      	str	r4, [r0, #12]
 8009518:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800951c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009520:	b94c      	cbnz	r4, 8009536 <__pow5mult+0x66>
 8009522:	f240 2171 	movw	r1, #625	; 0x271
 8009526:	4630      	mov	r0, r6
 8009528:	f7ff ff12 	bl	8009350 <__i2b>
 800952c:	2300      	movs	r3, #0
 800952e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009532:	4604      	mov	r4, r0
 8009534:	6003      	str	r3, [r0, #0]
 8009536:	f04f 0900 	mov.w	r9, #0
 800953a:	07eb      	lsls	r3, r5, #31
 800953c:	d50a      	bpl.n	8009554 <__pow5mult+0x84>
 800953e:	4639      	mov	r1, r7
 8009540:	4622      	mov	r2, r4
 8009542:	4630      	mov	r0, r6
 8009544:	f7ff ff1a 	bl	800937c <__multiply>
 8009548:	4639      	mov	r1, r7
 800954a:	4680      	mov	r8, r0
 800954c:	4630      	mov	r0, r6
 800954e:	f7ff fe49 	bl	80091e4 <_Bfree>
 8009552:	4647      	mov	r7, r8
 8009554:	106d      	asrs	r5, r5, #1
 8009556:	d00b      	beq.n	8009570 <__pow5mult+0xa0>
 8009558:	6820      	ldr	r0, [r4, #0]
 800955a:	b938      	cbnz	r0, 800956c <__pow5mult+0x9c>
 800955c:	4622      	mov	r2, r4
 800955e:	4621      	mov	r1, r4
 8009560:	4630      	mov	r0, r6
 8009562:	f7ff ff0b 	bl	800937c <__multiply>
 8009566:	6020      	str	r0, [r4, #0]
 8009568:	f8c0 9000 	str.w	r9, [r0]
 800956c:	4604      	mov	r4, r0
 800956e:	e7e4      	b.n	800953a <__pow5mult+0x6a>
 8009570:	4638      	mov	r0, r7
 8009572:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009576:	bf00      	nop
 8009578:	0800a360 	.word	0x0800a360
 800957c:	0800a195 	.word	0x0800a195
 8009580:	0800a215 	.word	0x0800a215

08009584 <__lshift>:
 8009584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009588:	460c      	mov	r4, r1
 800958a:	6849      	ldr	r1, [r1, #4]
 800958c:	6923      	ldr	r3, [r4, #16]
 800958e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009592:	68a3      	ldr	r3, [r4, #8]
 8009594:	4607      	mov	r7, r0
 8009596:	4691      	mov	r9, r2
 8009598:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800959c:	f108 0601 	add.w	r6, r8, #1
 80095a0:	42b3      	cmp	r3, r6
 80095a2:	db0b      	blt.n	80095bc <__lshift+0x38>
 80095a4:	4638      	mov	r0, r7
 80095a6:	f7ff fddd 	bl	8009164 <_Balloc>
 80095aa:	4605      	mov	r5, r0
 80095ac:	b948      	cbnz	r0, 80095c2 <__lshift+0x3e>
 80095ae:	4602      	mov	r2, r0
 80095b0:	4b28      	ldr	r3, [pc, #160]	; (8009654 <__lshift+0xd0>)
 80095b2:	4829      	ldr	r0, [pc, #164]	; (8009658 <__lshift+0xd4>)
 80095b4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80095b8:	f000 fbd6 	bl	8009d68 <__assert_func>
 80095bc:	3101      	adds	r1, #1
 80095be:	005b      	lsls	r3, r3, #1
 80095c0:	e7ee      	b.n	80095a0 <__lshift+0x1c>
 80095c2:	2300      	movs	r3, #0
 80095c4:	f100 0114 	add.w	r1, r0, #20
 80095c8:	f100 0210 	add.w	r2, r0, #16
 80095cc:	4618      	mov	r0, r3
 80095ce:	4553      	cmp	r3, sl
 80095d0:	db33      	blt.n	800963a <__lshift+0xb6>
 80095d2:	6920      	ldr	r0, [r4, #16]
 80095d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80095d8:	f104 0314 	add.w	r3, r4, #20
 80095dc:	f019 091f 	ands.w	r9, r9, #31
 80095e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80095e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80095e8:	d02b      	beq.n	8009642 <__lshift+0xbe>
 80095ea:	f1c9 0e20 	rsb	lr, r9, #32
 80095ee:	468a      	mov	sl, r1
 80095f0:	2200      	movs	r2, #0
 80095f2:	6818      	ldr	r0, [r3, #0]
 80095f4:	fa00 f009 	lsl.w	r0, r0, r9
 80095f8:	4310      	orrs	r0, r2
 80095fa:	f84a 0b04 	str.w	r0, [sl], #4
 80095fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009602:	459c      	cmp	ip, r3
 8009604:	fa22 f20e 	lsr.w	r2, r2, lr
 8009608:	d8f3      	bhi.n	80095f2 <__lshift+0x6e>
 800960a:	ebac 0304 	sub.w	r3, ip, r4
 800960e:	3b15      	subs	r3, #21
 8009610:	f023 0303 	bic.w	r3, r3, #3
 8009614:	3304      	adds	r3, #4
 8009616:	f104 0015 	add.w	r0, r4, #21
 800961a:	4584      	cmp	ip, r0
 800961c:	bf38      	it	cc
 800961e:	2304      	movcc	r3, #4
 8009620:	50ca      	str	r2, [r1, r3]
 8009622:	b10a      	cbz	r2, 8009628 <__lshift+0xa4>
 8009624:	f108 0602 	add.w	r6, r8, #2
 8009628:	3e01      	subs	r6, #1
 800962a:	4638      	mov	r0, r7
 800962c:	612e      	str	r6, [r5, #16]
 800962e:	4621      	mov	r1, r4
 8009630:	f7ff fdd8 	bl	80091e4 <_Bfree>
 8009634:	4628      	mov	r0, r5
 8009636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800963a:	f842 0f04 	str.w	r0, [r2, #4]!
 800963e:	3301      	adds	r3, #1
 8009640:	e7c5      	b.n	80095ce <__lshift+0x4a>
 8009642:	3904      	subs	r1, #4
 8009644:	f853 2b04 	ldr.w	r2, [r3], #4
 8009648:	f841 2f04 	str.w	r2, [r1, #4]!
 800964c:	459c      	cmp	ip, r3
 800964e:	d8f9      	bhi.n	8009644 <__lshift+0xc0>
 8009650:	e7ea      	b.n	8009628 <__lshift+0xa4>
 8009652:	bf00      	nop
 8009654:	0800a204 	.word	0x0800a204
 8009658:	0800a215 	.word	0x0800a215

0800965c <__mcmp>:
 800965c:	b530      	push	{r4, r5, lr}
 800965e:	6902      	ldr	r2, [r0, #16]
 8009660:	690c      	ldr	r4, [r1, #16]
 8009662:	1b12      	subs	r2, r2, r4
 8009664:	d10e      	bne.n	8009684 <__mcmp+0x28>
 8009666:	f100 0314 	add.w	r3, r0, #20
 800966a:	3114      	adds	r1, #20
 800966c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009670:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009674:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009678:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800967c:	42a5      	cmp	r5, r4
 800967e:	d003      	beq.n	8009688 <__mcmp+0x2c>
 8009680:	d305      	bcc.n	800968e <__mcmp+0x32>
 8009682:	2201      	movs	r2, #1
 8009684:	4610      	mov	r0, r2
 8009686:	bd30      	pop	{r4, r5, pc}
 8009688:	4283      	cmp	r3, r0
 800968a:	d3f3      	bcc.n	8009674 <__mcmp+0x18>
 800968c:	e7fa      	b.n	8009684 <__mcmp+0x28>
 800968e:	f04f 32ff 	mov.w	r2, #4294967295
 8009692:	e7f7      	b.n	8009684 <__mcmp+0x28>

08009694 <__mdiff>:
 8009694:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009698:	460c      	mov	r4, r1
 800969a:	4606      	mov	r6, r0
 800969c:	4611      	mov	r1, r2
 800969e:	4620      	mov	r0, r4
 80096a0:	4690      	mov	r8, r2
 80096a2:	f7ff ffdb 	bl	800965c <__mcmp>
 80096a6:	1e05      	subs	r5, r0, #0
 80096a8:	d110      	bne.n	80096cc <__mdiff+0x38>
 80096aa:	4629      	mov	r1, r5
 80096ac:	4630      	mov	r0, r6
 80096ae:	f7ff fd59 	bl	8009164 <_Balloc>
 80096b2:	b930      	cbnz	r0, 80096c2 <__mdiff+0x2e>
 80096b4:	4b3a      	ldr	r3, [pc, #232]	; (80097a0 <__mdiff+0x10c>)
 80096b6:	4602      	mov	r2, r0
 80096b8:	f240 2137 	movw	r1, #567	; 0x237
 80096bc:	4839      	ldr	r0, [pc, #228]	; (80097a4 <__mdiff+0x110>)
 80096be:	f000 fb53 	bl	8009d68 <__assert_func>
 80096c2:	2301      	movs	r3, #1
 80096c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80096c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096cc:	bfa4      	itt	ge
 80096ce:	4643      	movge	r3, r8
 80096d0:	46a0      	movge	r8, r4
 80096d2:	4630      	mov	r0, r6
 80096d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80096d8:	bfa6      	itte	ge
 80096da:	461c      	movge	r4, r3
 80096dc:	2500      	movge	r5, #0
 80096de:	2501      	movlt	r5, #1
 80096e0:	f7ff fd40 	bl	8009164 <_Balloc>
 80096e4:	b920      	cbnz	r0, 80096f0 <__mdiff+0x5c>
 80096e6:	4b2e      	ldr	r3, [pc, #184]	; (80097a0 <__mdiff+0x10c>)
 80096e8:	4602      	mov	r2, r0
 80096ea:	f240 2145 	movw	r1, #581	; 0x245
 80096ee:	e7e5      	b.n	80096bc <__mdiff+0x28>
 80096f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80096f4:	6926      	ldr	r6, [r4, #16]
 80096f6:	60c5      	str	r5, [r0, #12]
 80096f8:	f104 0914 	add.w	r9, r4, #20
 80096fc:	f108 0514 	add.w	r5, r8, #20
 8009700:	f100 0e14 	add.w	lr, r0, #20
 8009704:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009708:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800970c:	f108 0210 	add.w	r2, r8, #16
 8009710:	46f2      	mov	sl, lr
 8009712:	2100      	movs	r1, #0
 8009714:	f859 3b04 	ldr.w	r3, [r9], #4
 8009718:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800971c:	fa11 f88b 	uxtah	r8, r1, fp
 8009720:	b299      	uxth	r1, r3
 8009722:	0c1b      	lsrs	r3, r3, #16
 8009724:	eba8 0801 	sub.w	r8, r8, r1
 8009728:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800972c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009730:	fa1f f888 	uxth.w	r8, r8
 8009734:	1419      	asrs	r1, r3, #16
 8009736:	454e      	cmp	r6, r9
 8009738:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800973c:	f84a 3b04 	str.w	r3, [sl], #4
 8009740:	d8e8      	bhi.n	8009714 <__mdiff+0x80>
 8009742:	1b33      	subs	r3, r6, r4
 8009744:	3b15      	subs	r3, #21
 8009746:	f023 0303 	bic.w	r3, r3, #3
 800974a:	3304      	adds	r3, #4
 800974c:	3415      	adds	r4, #21
 800974e:	42a6      	cmp	r6, r4
 8009750:	bf38      	it	cc
 8009752:	2304      	movcc	r3, #4
 8009754:	441d      	add	r5, r3
 8009756:	4473      	add	r3, lr
 8009758:	469e      	mov	lr, r3
 800975a:	462e      	mov	r6, r5
 800975c:	4566      	cmp	r6, ip
 800975e:	d30e      	bcc.n	800977e <__mdiff+0xea>
 8009760:	f10c 0203 	add.w	r2, ip, #3
 8009764:	1b52      	subs	r2, r2, r5
 8009766:	f022 0203 	bic.w	r2, r2, #3
 800976a:	3d03      	subs	r5, #3
 800976c:	45ac      	cmp	ip, r5
 800976e:	bf38      	it	cc
 8009770:	2200      	movcc	r2, #0
 8009772:	4413      	add	r3, r2
 8009774:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009778:	b17a      	cbz	r2, 800979a <__mdiff+0x106>
 800977a:	6107      	str	r7, [r0, #16]
 800977c:	e7a4      	b.n	80096c8 <__mdiff+0x34>
 800977e:	f856 8b04 	ldr.w	r8, [r6], #4
 8009782:	fa11 f288 	uxtah	r2, r1, r8
 8009786:	1414      	asrs	r4, r2, #16
 8009788:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800978c:	b292      	uxth	r2, r2
 800978e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009792:	f84e 2b04 	str.w	r2, [lr], #4
 8009796:	1421      	asrs	r1, r4, #16
 8009798:	e7e0      	b.n	800975c <__mdiff+0xc8>
 800979a:	3f01      	subs	r7, #1
 800979c:	e7ea      	b.n	8009774 <__mdiff+0xe0>
 800979e:	bf00      	nop
 80097a0:	0800a204 	.word	0x0800a204
 80097a4:	0800a215 	.word	0x0800a215

080097a8 <__d2b>:
 80097a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80097ac:	460f      	mov	r7, r1
 80097ae:	2101      	movs	r1, #1
 80097b0:	ec59 8b10 	vmov	r8, r9, d0
 80097b4:	4616      	mov	r6, r2
 80097b6:	f7ff fcd5 	bl	8009164 <_Balloc>
 80097ba:	4604      	mov	r4, r0
 80097bc:	b930      	cbnz	r0, 80097cc <__d2b+0x24>
 80097be:	4602      	mov	r2, r0
 80097c0:	4b24      	ldr	r3, [pc, #144]	; (8009854 <__d2b+0xac>)
 80097c2:	4825      	ldr	r0, [pc, #148]	; (8009858 <__d2b+0xb0>)
 80097c4:	f240 310f 	movw	r1, #783	; 0x30f
 80097c8:	f000 face 	bl	8009d68 <__assert_func>
 80097cc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80097d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80097d4:	bb2d      	cbnz	r5, 8009822 <__d2b+0x7a>
 80097d6:	9301      	str	r3, [sp, #4]
 80097d8:	f1b8 0300 	subs.w	r3, r8, #0
 80097dc:	d026      	beq.n	800982c <__d2b+0x84>
 80097de:	4668      	mov	r0, sp
 80097e0:	9300      	str	r3, [sp, #0]
 80097e2:	f7ff fd87 	bl	80092f4 <__lo0bits>
 80097e6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80097ea:	b1e8      	cbz	r0, 8009828 <__d2b+0x80>
 80097ec:	f1c0 0320 	rsb	r3, r0, #32
 80097f0:	fa02 f303 	lsl.w	r3, r2, r3
 80097f4:	430b      	orrs	r3, r1
 80097f6:	40c2      	lsrs	r2, r0
 80097f8:	6163      	str	r3, [r4, #20]
 80097fa:	9201      	str	r2, [sp, #4]
 80097fc:	9b01      	ldr	r3, [sp, #4]
 80097fe:	61a3      	str	r3, [r4, #24]
 8009800:	2b00      	cmp	r3, #0
 8009802:	bf14      	ite	ne
 8009804:	2202      	movne	r2, #2
 8009806:	2201      	moveq	r2, #1
 8009808:	6122      	str	r2, [r4, #16]
 800980a:	b1bd      	cbz	r5, 800983c <__d2b+0x94>
 800980c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009810:	4405      	add	r5, r0
 8009812:	603d      	str	r5, [r7, #0]
 8009814:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009818:	6030      	str	r0, [r6, #0]
 800981a:	4620      	mov	r0, r4
 800981c:	b003      	add	sp, #12
 800981e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009822:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009826:	e7d6      	b.n	80097d6 <__d2b+0x2e>
 8009828:	6161      	str	r1, [r4, #20]
 800982a:	e7e7      	b.n	80097fc <__d2b+0x54>
 800982c:	a801      	add	r0, sp, #4
 800982e:	f7ff fd61 	bl	80092f4 <__lo0bits>
 8009832:	9b01      	ldr	r3, [sp, #4]
 8009834:	6163      	str	r3, [r4, #20]
 8009836:	3020      	adds	r0, #32
 8009838:	2201      	movs	r2, #1
 800983a:	e7e5      	b.n	8009808 <__d2b+0x60>
 800983c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009840:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009844:	6038      	str	r0, [r7, #0]
 8009846:	6918      	ldr	r0, [r3, #16]
 8009848:	f7ff fd34 	bl	80092b4 <__hi0bits>
 800984c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009850:	e7e2      	b.n	8009818 <__d2b+0x70>
 8009852:	bf00      	nop
 8009854:	0800a204 	.word	0x0800a204
 8009858:	0800a215 	.word	0x0800a215

0800985c <__sfputc_r>:
 800985c:	6893      	ldr	r3, [r2, #8]
 800985e:	3b01      	subs	r3, #1
 8009860:	2b00      	cmp	r3, #0
 8009862:	b410      	push	{r4}
 8009864:	6093      	str	r3, [r2, #8]
 8009866:	da08      	bge.n	800987a <__sfputc_r+0x1e>
 8009868:	6994      	ldr	r4, [r2, #24]
 800986a:	42a3      	cmp	r3, r4
 800986c:	db01      	blt.n	8009872 <__sfputc_r+0x16>
 800986e:	290a      	cmp	r1, #10
 8009870:	d103      	bne.n	800987a <__sfputc_r+0x1e>
 8009872:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009876:	f7fe bb82 	b.w	8007f7e <__swbuf_r>
 800987a:	6813      	ldr	r3, [r2, #0]
 800987c:	1c58      	adds	r0, r3, #1
 800987e:	6010      	str	r0, [r2, #0]
 8009880:	7019      	strb	r1, [r3, #0]
 8009882:	4608      	mov	r0, r1
 8009884:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009888:	4770      	bx	lr

0800988a <__sfputs_r>:
 800988a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800988c:	4606      	mov	r6, r0
 800988e:	460f      	mov	r7, r1
 8009890:	4614      	mov	r4, r2
 8009892:	18d5      	adds	r5, r2, r3
 8009894:	42ac      	cmp	r4, r5
 8009896:	d101      	bne.n	800989c <__sfputs_r+0x12>
 8009898:	2000      	movs	r0, #0
 800989a:	e007      	b.n	80098ac <__sfputs_r+0x22>
 800989c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098a0:	463a      	mov	r2, r7
 80098a2:	4630      	mov	r0, r6
 80098a4:	f7ff ffda 	bl	800985c <__sfputc_r>
 80098a8:	1c43      	adds	r3, r0, #1
 80098aa:	d1f3      	bne.n	8009894 <__sfputs_r+0xa>
 80098ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080098b0 <_vfiprintf_r>:
 80098b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098b4:	460d      	mov	r5, r1
 80098b6:	b09d      	sub	sp, #116	; 0x74
 80098b8:	4614      	mov	r4, r2
 80098ba:	4698      	mov	r8, r3
 80098bc:	4606      	mov	r6, r0
 80098be:	b118      	cbz	r0, 80098c8 <_vfiprintf_r+0x18>
 80098c0:	6a03      	ldr	r3, [r0, #32]
 80098c2:	b90b      	cbnz	r3, 80098c8 <_vfiprintf_r+0x18>
 80098c4:	f7fe fa74 	bl	8007db0 <__sinit>
 80098c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098ca:	07d9      	lsls	r1, r3, #31
 80098cc:	d405      	bmi.n	80098da <_vfiprintf_r+0x2a>
 80098ce:	89ab      	ldrh	r3, [r5, #12]
 80098d0:	059a      	lsls	r2, r3, #22
 80098d2:	d402      	bmi.n	80098da <_vfiprintf_r+0x2a>
 80098d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098d6:	f7fe fcba 	bl	800824e <__retarget_lock_acquire_recursive>
 80098da:	89ab      	ldrh	r3, [r5, #12]
 80098dc:	071b      	lsls	r3, r3, #28
 80098de:	d501      	bpl.n	80098e4 <_vfiprintf_r+0x34>
 80098e0:	692b      	ldr	r3, [r5, #16]
 80098e2:	b99b      	cbnz	r3, 800990c <_vfiprintf_r+0x5c>
 80098e4:	4629      	mov	r1, r5
 80098e6:	4630      	mov	r0, r6
 80098e8:	f7fe fb86 	bl	8007ff8 <__swsetup_r>
 80098ec:	b170      	cbz	r0, 800990c <_vfiprintf_r+0x5c>
 80098ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098f0:	07dc      	lsls	r4, r3, #31
 80098f2:	d504      	bpl.n	80098fe <_vfiprintf_r+0x4e>
 80098f4:	f04f 30ff 	mov.w	r0, #4294967295
 80098f8:	b01d      	add	sp, #116	; 0x74
 80098fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098fe:	89ab      	ldrh	r3, [r5, #12]
 8009900:	0598      	lsls	r0, r3, #22
 8009902:	d4f7      	bmi.n	80098f4 <_vfiprintf_r+0x44>
 8009904:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009906:	f7fe fca3 	bl	8008250 <__retarget_lock_release_recursive>
 800990a:	e7f3      	b.n	80098f4 <_vfiprintf_r+0x44>
 800990c:	2300      	movs	r3, #0
 800990e:	9309      	str	r3, [sp, #36]	; 0x24
 8009910:	2320      	movs	r3, #32
 8009912:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009916:	f8cd 800c 	str.w	r8, [sp, #12]
 800991a:	2330      	movs	r3, #48	; 0x30
 800991c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8009ad0 <_vfiprintf_r+0x220>
 8009920:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009924:	f04f 0901 	mov.w	r9, #1
 8009928:	4623      	mov	r3, r4
 800992a:	469a      	mov	sl, r3
 800992c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009930:	b10a      	cbz	r2, 8009936 <_vfiprintf_r+0x86>
 8009932:	2a25      	cmp	r2, #37	; 0x25
 8009934:	d1f9      	bne.n	800992a <_vfiprintf_r+0x7a>
 8009936:	ebba 0b04 	subs.w	fp, sl, r4
 800993a:	d00b      	beq.n	8009954 <_vfiprintf_r+0xa4>
 800993c:	465b      	mov	r3, fp
 800993e:	4622      	mov	r2, r4
 8009940:	4629      	mov	r1, r5
 8009942:	4630      	mov	r0, r6
 8009944:	f7ff ffa1 	bl	800988a <__sfputs_r>
 8009948:	3001      	adds	r0, #1
 800994a:	f000 80a9 	beq.w	8009aa0 <_vfiprintf_r+0x1f0>
 800994e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009950:	445a      	add	r2, fp
 8009952:	9209      	str	r2, [sp, #36]	; 0x24
 8009954:	f89a 3000 	ldrb.w	r3, [sl]
 8009958:	2b00      	cmp	r3, #0
 800995a:	f000 80a1 	beq.w	8009aa0 <_vfiprintf_r+0x1f0>
 800995e:	2300      	movs	r3, #0
 8009960:	f04f 32ff 	mov.w	r2, #4294967295
 8009964:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009968:	f10a 0a01 	add.w	sl, sl, #1
 800996c:	9304      	str	r3, [sp, #16]
 800996e:	9307      	str	r3, [sp, #28]
 8009970:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009974:	931a      	str	r3, [sp, #104]	; 0x68
 8009976:	4654      	mov	r4, sl
 8009978:	2205      	movs	r2, #5
 800997a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800997e:	4854      	ldr	r0, [pc, #336]	; (8009ad0 <_vfiprintf_r+0x220>)
 8009980:	f7f6 fc2e 	bl	80001e0 <memchr>
 8009984:	9a04      	ldr	r2, [sp, #16]
 8009986:	b9d8      	cbnz	r0, 80099c0 <_vfiprintf_r+0x110>
 8009988:	06d1      	lsls	r1, r2, #27
 800998a:	bf44      	itt	mi
 800998c:	2320      	movmi	r3, #32
 800998e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009992:	0713      	lsls	r3, r2, #28
 8009994:	bf44      	itt	mi
 8009996:	232b      	movmi	r3, #43	; 0x2b
 8009998:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800999c:	f89a 3000 	ldrb.w	r3, [sl]
 80099a0:	2b2a      	cmp	r3, #42	; 0x2a
 80099a2:	d015      	beq.n	80099d0 <_vfiprintf_r+0x120>
 80099a4:	9a07      	ldr	r2, [sp, #28]
 80099a6:	4654      	mov	r4, sl
 80099a8:	2000      	movs	r0, #0
 80099aa:	f04f 0c0a 	mov.w	ip, #10
 80099ae:	4621      	mov	r1, r4
 80099b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099b4:	3b30      	subs	r3, #48	; 0x30
 80099b6:	2b09      	cmp	r3, #9
 80099b8:	d94d      	bls.n	8009a56 <_vfiprintf_r+0x1a6>
 80099ba:	b1b0      	cbz	r0, 80099ea <_vfiprintf_r+0x13a>
 80099bc:	9207      	str	r2, [sp, #28]
 80099be:	e014      	b.n	80099ea <_vfiprintf_r+0x13a>
 80099c0:	eba0 0308 	sub.w	r3, r0, r8
 80099c4:	fa09 f303 	lsl.w	r3, r9, r3
 80099c8:	4313      	orrs	r3, r2
 80099ca:	9304      	str	r3, [sp, #16]
 80099cc:	46a2      	mov	sl, r4
 80099ce:	e7d2      	b.n	8009976 <_vfiprintf_r+0xc6>
 80099d0:	9b03      	ldr	r3, [sp, #12]
 80099d2:	1d19      	adds	r1, r3, #4
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	9103      	str	r1, [sp, #12]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	bfbb      	ittet	lt
 80099dc:	425b      	neglt	r3, r3
 80099de:	f042 0202 	orrlt.w	r2, r2, #2
 80099e2:	9307      	strge	r3, [sp, #28]
 80099e4:	9307      	strlt	r3, [sp, #28]
 80099e6:	bfb8      	it	lt
 80099e8:	9204      	strlt	r2, [sp, #16]
 80099ea:	7823      	ldrb	r3, [r4, #0]
 80099ec:	2b2e      	cmp	r3, #46	; 0x2e
 80099ee:	d10c      	bne.n	8009a0a <_vfiprintf_r+0x15a>
 80099f0:	7863      	ldrb	r3, [r4, #1]
 80099f2:	2b2a      	cmp	r3, #42	; 0x2a
 80099f4:	d134      	bne.n	8009a60 <_vfiprintf_r+0x1b0>
 80099f6:	9b03      	ldr	r3, [sp, #12]
 80099f8:	1d1a      	adds	r2, r3, #4
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	9203      	str	r2, [sp, #12]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	bfb8      	it	lt
 8009a02:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a06:	3402      	adds	r4, #2
 8009a08:	9305      	str	r3, [sp, #20]
 8009a0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8009ae0 <_vfiprintf_r+0x230>
 8009a0e:	7821      	ldrb	r1, [r4, #0]
 8009a10:	2203      	movs	r2, #3
 8009a12:	4650      	mov	r0, sl
 8009a14:	f7f6 fbe4 	bl	80001e0 <memchr>
 8009a18:	b138      	cbz	r0, 8009a2a <_vfiprintf_r+0x17a>
 8009a1a:	9b04      	ldr	r3, [sp, #16]
 8009a1c:	eba0 000a 	sub.w	r0, r0, sl
 8009a20:	2240      	movs	r2, #64	; 0x40
 8009a22:	4082      	lsls	r2, r0
 8009a24:	4313      	orrs	r3, r2
 8009a26:	3401      	adds	r4, #1
 8009a28:	9304      	str	r3, [sp, #16]
 8009a2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a2e:	4829      	ldr	r0, [pc, #164]	; (8009ad4 <_vfiprintf_r+0x224>)
 8009a30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a34:	2206      	movs	r2, #6
 8009a36:	f7f6 fbd3 	bl	80001e0 <memchr>
 8009a3a:	2800      	cmp	r0, #0
 8009a3c:	d03f      	beq.n	8009abe <_vfiprintf_r+0x20e>
 8009a3e:	4b26      	ldr	r3, [pc, #152]	; (8009ad8 <_vfiprintf_r+0x228>)
 8009a40:	bb1b      	cbnz	r3, 8009a8a <_vfiprintf_r+0x1da>
 8009a42:	9b03      	ldr	r3, [sp, #12]
 8009a44:	3307      	adds	r3, #7
 8009a46:	f023 0307 	bic.w	r3, r3, #7
 8009a4a:	3308      	adds	r3, #8
 8009a4c:	9303      	str	r3, [sp, #12]
 8009a4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a50:	443b      	add	r3, r7
 8009a52:	9309      	str	r3, [sp, #36]	; 0x24
 8009a54:	e768      	b.n	8009928 <_vfiprintf_r+0x78>
 8009a56:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a5a:	460c      	mov	r4, r1
 8009a5c:	2001      	movs	r0, #1
 8009a5e:	e7a6      	b.n	80099ae <_vfiprintf_r+0xfe>
 8009a60:	2300      	movs	r3, #0
 8009a62:	3401      	adds	r4, #1
 8009a64:	9305      	str	r3, [sp, #20]
 8009a66:	4619      	mov	r1, r3
 8009a68:	f04f 0c0a 	mov.w	ip, #10
 8009a6c:	4620      	mov	r0, r4
 8009a6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a72:	3a30      	subs	r2, #48	; 0x30
 8009a74:	2a09      	cmp	r2, #9
 8009a76:	d903      	bls.n	8009a80 <_vfiprintf_r+0x1d0>
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d0c6      	beq.n	8009a0a <_vfiprintf_r+0x15a>
 8009a7c:	9105      	str	r1, [sp, #20]
 8009a7e:	e7c4      	b.n	8009a0a <_vfiprintf_r+0x15a>
 8009a80:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a84:	4604      	mov	r4, r0
 8009a86:	2301      	movs	r3, #1
 8009a88:	e7f0      	b.n	8009a6c <_vfiprintf_r+0x1bc>
 8009a8a:	ab03      	add	r3, sp, #12
 8009a8c:	9300      	str	r3, [sp, #0]
 8009a8e:	462a      	mov	r2, r5
 8009a90:	4b12      	ldr	r3, [pc, #72]	; (8009adc <_vfiprintf_r+0x22c>)
 8009a92:	a904      	add	r1, sp, #16
 8009a94:	4630      	mov	r0, r6
 8009a96:	f7fd fd39 	bl	800750c <_printf_float>
 8009a9a:	4607      	mov	r7, r0
 8009a9c:	1c78      	adds	r0, r7, #1
 8009a9e:	d1d6      	bne.n	8009a4e <_vfiprintf_r+0x19e>
 8009aa0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009aa2:	07d9      	lsls	r1, r3, #31
 8009aa4:	d405      	bmi.n	8009ab2 <_vfiprintf_r+0x202>
 8009aa6:	89ab      	ldrh	r3, [r5, #12]
 8009aa8:	059a      	lsls	r2, r3, #22
 8009aaa:	d402      	bmi.n	8009ab2 <_vfiprintf_r+0x202>
 8009aac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009aae:	f7fe fbcf 	bl	8008250 <__retarget_lock_release_recursive>
 8009ab2:	89ab      	ldrh	r3, [r5, #12]
 8009ab4:	065b      	lsls	r3, r3, #25
 8009ab6:	f53f af1d 	bmi.w	80098f4 <_vfiprintf_r+0x44>
 8009aba:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009abc:	e71c      	b.n	80098f8 <_vfiprintf_r+0x48>
 8009abe:	ab03      	add	r3, sp, #12
 8009ac0:	9300      	str	r3, [sp, #0]
 8009ac2:	462a      	mov	r2, r5
 8009ac4:	4b05      	ldr	r3, [pc, #20]	; (8009adc <_vfiprintf_r+0x22c>)
 8009ac6:	a904      	add	r1, sp, #16
 8009ac8:	4630      	mov	r0, r6
 8009aca:	f7fd ffc3 	bl	8007a54 <_printf_i>
 8009ace:	e7e4      	b.n	8009a9a <_vfiprintf_r+0x1ea>
 8009ad0:	0800a36c 	.word	0x0800a36c
 8009ad4:	0800a376 	.word	0x0800a376
 8009ad8:	0800750d 	.word	0x0800750d
 8009adc:	0800988b 	.word	0x0800988b
 8009ae0:	0800a372 	.word	0x0800a372

08009ae4 <__sflush_r>:
 8009ae4:	898a      	ldrh	r2, [r1, #12]
 8009ae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009aea:	4605      	mov	r5, r0
 8009aec:	0710      	lsls	r0, r2, #28
 8009aee:	460c      	mov	r4, r1
 8009af0:	d458      	bmi.n	8009ba4 <__sflush_r+0xc0>
 8009af2:	684b      	ldr	r3, [r1, #4]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	dc05      	bgt.n	8009b04 <__sflush_r+0x20>
 8009af8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	dc02      	bgt.n	8009b04 <__sflush_r+0x20>
 8009afe:	2000      	movs	r0, #0
 8009b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b06:	2e00      	cmp	r6, #0
 8009b08:	d0f9      	beq.n	8009afe <__sflush_r+0x1a>
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009b10:	682f      	ldr	r7, [r5, #0]
 8009b12:	6a21      	ldr	r1, [r4, #32]
 8009b14:	602b      	str	r3, [r5, #0]
 8009b16:	d032      	beq.n	8009b7e <__sflush_r+0x9a>
 8009b18:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009b1a:	89a3      	ldrh	r3, [r4, #12]
 8009b1c:	075a      	lsls	r2, r3, #29
 8009b1e:	d505      	bpl.n	8009b2c <__sflush_r+0x48>
 8009b20:	6863      	ldr	r3, [r4, #4]
 8009b22:	1ac0      	subs	r0, r0, r3
 8009b24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b26:	b10b      	cbz	r3, 8009b2c <__sflush_r+0x48>
 8009b28:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009b2a:	1ac0      	subs	r0, r0, r3
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	4602      	mov	r2, r0
 8009b30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b32:	6a21      	ldr	r1, [r4, #32]
 8009b34:	4628      	mov	r0, r5
 8009b36:	47b0      	blx	r6
 8009b38:	1c43      	adds	r3, r0, #1
 8009b3a:	89a3      	ldrh	r3, [r4, #12]
 8009b3c:	d106      	bne.n	8009b4c <__sflush_r+0x68>
 8009b3e:	6829      	ldr	r1, [r5, #0]
 8009b40:	291d      	cmp	r1, #29
 8009b42:	d82b      	bhi.n	8009b9c <__sflush_r+0xb8>
 8009b44:	4a29      	ldr	r2, [pc, #164]	; (8009bec <__sflush_r+0x108>)
 8009b46:	410a      	asrs	r2, r1
 8009b48:	07d6      	lsls	r6, r2, #31
 8009b4a:	d427      	bmi.n	8009b9c <__sflush_r+0xb8>
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	6062      	str	r2, [r4, #4]
 8009b50:	04d9      	lsls	r1, r3, #19
 8009b52:	6922      	ldr	r2, [r4, #16]
 8009b54:	6022      	str	r2, [r4, #0]
 8009b56:	d504      	bpl.n	8009b62 <__sflush_r+0x7e>
 8009b58:	1c42      	adds	r2, r0, #1
 8009b5a:	d101      	bne.n	8009b60 <__sflush_r+0x7c>
 8009b5c:	682b      	ldr	r3, [r5, #0]
 8009b5e:	b903      	cbnz	r3, 8009b62 <__sflush_r+0x7e>
 8009b60:	6560      	str	r0, [r4, #84]	; 0x54
 8009b62:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b64:	602f      	str	r7, [r5, #0]
 8009b66:	2900      	cmp	r1, #0
 8009b68:	d0c9      	beq.n	8009afe <__sflush_r+0x1a>
 8009b6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b6e:	4299      	cmp	r1, r3
 8009b70:	d002      	beq.n	8009b78 <__sflush_r+0x94>
 8009b72:	4628      	mov	r0, r5
 8009b74:	f7ff f9f6 	bl	8008f64 <_free_r>
 8009b78:	2000      	movs	r0, #0
 8009b7a:	6360      	str	r0, [r4, #52]	; 0x34
 8009b7c:	e7c0      	b.n	8009b00 <__sflush_r+0x1c>
 8009b7e:	2301      	movs	r3, #1
 8009b80:	4628      	mov	r0, r5
 8009b82:	47b0      	blx	r6
 8009b84:	1c41      	adds	r1, r0, #1
 8009b86:	d1c8      	bne.n	8009b1a <__sflush_r+0x36>
 8009b88:	682b      	ldr	r3, [r5, #0]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d0c5      	beq.n	8009b1a <__sflush_r+0x36>
 8009b8e:	2b1d      	cmp	r3, #29
 8009b90:	d001      	beq.n	8009b96 <__sflush_r+0xb2>
 8009b92:	2b16      	cmp	r3, #22
 8009b94:	d101      	bne.n	8009b9a <__sflush_r+0xb6>
 8009b96:	602f      	str	r7, [r5, #0]
 8009b98:	e7b1      	b.n	8009afe <__sflush_r+0x1a>
 8009b9a:	89a3      	ldrh	r3, [r4, #12]
 8009b9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ba0:	81a3      	strh	r3, [r4, #12]
 8009ba2:	e7ad      	b.n	8009b00 <__sflush_r+0x1c>
 8009ba4:	690f      	ldr	r7, [r1, #16]
 8009ba6:	2f00      	cmp	r7, #0
 8009ba8:	d0a9      	beq.n	8009afe <__sflush_r+0x1a>
 8009baa:	0793      	lsls	r3, r2, #30
 8009bac:	680e      	ldr	r6, [r1, #0]
 8009bae:	bf08      	it	eq
 8009bb0:	694b      	ldreq	r3, [r1, #20]
 8009bb2:	600f      	str	r7, [r1, #0]
 8009bb4:	bf18      	it	ne
 8009bb6:	2300      	movne	r3, #0
 8009bb8:	eba6 0807 	sub.w	r8, r6, r7
 8009bbc:	608b      	str	r3, [r1, #8]
 8009bbe:	f1b8 0f00 	cmp.w	r8, #0
 8009bc2:	dd9c      	ble.n	8009afe <__sflush_r+0x1a>
 8009bc4:	6a21      	ldr	r1, [r4, #32]
 8009bc6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009bc8:	4643      	mov	r3, r8
 8009bca:	463a      	mov	r2, r7
 8009bcc:	4628      	mov	r0, r5
 8009bce:	47b0      	blx	r6
 8009bd0:	2800      	cmp	r0, #0
 8009bd2:	dc06      	bgt.n	8009be2 <__sflush_r+0xfe>
 8009bd4:	89a3      	ldrh	r3, [r4, #12]
 8009bd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bda:	81a3      	strh	r3, [r4, #12]
 8009bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8009be0:	e78e      	b.n	8009b00 <__sflush_r+0x1c>
 8009be2:	4407      	add	r7, r0
 8009be4:	eba8 0800 	sub.w	r8, r8, r0
 8009be8:	e7e9      	b.n	8009bbe <__sflush_r+0xda>
 8009bea:	bf00      	nop
 8009bec:	dfbffffe 	.word	0xdfbffffe

08009bf0 <_fflush_r>:
 8009bf0:	b538      	push	{r3, r4, r5, lr}
 8009bf2:	690b      	ldr	r3, [r1, #16]
 8009bf4:	4605      	mov	r5, r0
 8009bf6:	460c      	mov	r4, r1
 8009bf8:	b913      	cbnz	r3, 8009c00 <_fflush_r+0x10>
 8009bfa:	2500      	movs	r5, #0
 8009bfc:	4628      	mov	r0, r5
 8009bfe:	bd38      	pop	{r3, r4, r5, pc}
 8009c00:	b118      	cbz	r0, 8009c0a <_fflush_r+0x1a>
 8009c02:	6a03      	ldr	r3, [r0, #32]
 8009c04:	b90b      	cbnz	r3, 8009c0a <_fflush_r+0x1a>
 8009c06:	f7fe f8d3 	bl	8007db0 <__sinit>
 8009c0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d0f3      	beq.n	8009bfa <_fflush_r+0xa>
 8009c12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009c14:	07d0      	lsls	r0, r2, #31
 8009c16:	d404      	bmi.n	8009c22 <_fflush_r+0x32>
 8009c18:	0599      	lsls	r1, r3, #22
 8009c1a:	d402      	bmi.n	8009c22 <_fflush_r+0x32>
 8009c1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c1e:	f7fe fb16 	bl	800824e <__retarget_lock_acquire_recursive>
 8009c22:	4628      	mov	r0, r5
 8009c24:	4621      	mov	r1, r4
 8009c26:	f7ff ff5d 	bl	8009ae4 <__sflush_r>
 8009c2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c2c:	07da      	lsls	r2, r3, #31
 8009c2e:	4605      	mov	r5, r0
 8009c30:	d4e4      	bmi.n	8009bfc <_fflush_r+0xc>
 8009c32:	89a3      	ldrh	r3, [r4, #12]
 8009c34:	059b      	lsls	r3, r3, #22
 8009c36:	d4e1      	bmi.n	8009bfc <_fflush_r+0xc>
 8009c38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c3a:	f7fe fb09 	bl	8008250 <__retarget_lock_release_recursive>
 8009c3e:	e7dd      	b.n	8009bfc <_fflush_r+0xc>

08009c40 <__swhatbuf_r>:
 8009c40:	b570      	push	{r4, r5, r6, lr}
 8009c42:	460c      	mov	r4, r1
 8009c44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009c48:	2900      	cmp	r1, #0
 8009c4a:	b096      	sub	sp, #88	; 0x58
 8009c4c:	4615      	mov	r5, r2
 8009c4e:	461e      	mov	r6, r3
 8009c50:	da0d      	bge.n	8009c6e <__swhatbuf_r+0x2e>
 8009c52:	89a3      	ldrh	r3, [r4, #12]
 8009c54:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009c58:	f04f 0100 	mov.w	r1, #0
 8009c5c:	bf0c      	ite	eq
 8009c5e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8009c62:	2340      	movne	r3, #64	; 0x40
 8009c64:	2000      	movs	r0, #0
 8009c66:	6031      	str	r1, [r6, #0]
 8009c68:	602b      	str	r3, [r5, #0]
 8009c6a:	b016      	add	sp, #88	; 0x58
 8009c6c:	bd70      	pop	{r4, r5, r6, pc}
 8009c6e:	466a      	mov	r2, sp
 8009c70:	f000 f848 	bl	8009d04 <_fstat_r>
 8009c74:	2800      	cmp	r0, #0
 8009c76:	dbec      	blt.n	8009c52 <__swhatbuf_r+0x12>
 8009c78:	9901      	ldr	r1, [sp, #4]
 8009c7a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009c7e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009c82:	4259      	negs	r1, r3
 8009c84:	4159      	adcs	r1, r3
 8009c86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c8a:	e7eb      	b.n	8009c64 <__swhatbuf_r+0x24>

08009c8c <__smakebuf_r>:
 8009c8c:	898b      	ldrh	r3, [r1, #12]
 8009c8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009c90:	079d      	lsls	r5, r3, #30
 8009c92:	4606      	mov	r6, r0
 8009c94:	460c      	mov	r4, r1
 8009c96:	d507      	bpl.n	8009ca8 <__smakebuf_r+0x1c>
 8009c98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009c9c:	6023      	str	r3, [r4, #0]
 8009c9e:	6123      	str	r3, [r4, #16]
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	6163      	str	r3, [r4, #20]
 8009ca4:	b002      	add	sp, #8
 8009ca6:	bd70      	pop	{r4, r5, r6, pc}
 8009ca8:	ab01      	add	r3, sp, #4
 8009caa:	466a      	mov	r2, sp
 8009cac:	f7ff ffc8 	bl	8009c40 <__swhatbuf_r>
 8009cb0:	9900      	ldr	r1, [sp, #0]
 8009cb2:	4605      	mov	r5, r0
 8009cb4:	4630      	mov	r0, r6
 8009cb6:	f7ff f9c9 	bl	800904c <_malloc_r>
 8009cba:	b948      	cbnz	r0, 8009cd0 <__smakebuf_r+0x44>
 8009cbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cc0:	059a      	lsls	r2, r3, #22
 8009cc2:	d4ef      	bmi.n	8009ca4 <__smakebuf_r+0x18>
 8009cc4:	f023 0303 	bic.w	r3, r3, #3
 8009cc8:	f043 0302 	orr.w	r3, r3, #2
 8009ccc:	81a3      	strh	r3, [r4, #12]
 8009cce:	e7e3      	b.n	8009c98 <__smakebuf_r+0xc>
 8009cd0:	89a3      	ldrh	r3, [r4, #12]
 8009cd2:	6020      	str	r0, [r4, #0]
 8009cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cd8:	81a3      	strh	r3, [r4, #12]
 8009cda:	9b00      	ldr	r3, [sp, #0]
 8009cdc:	6163      	str	r3, [r4, #20]
 8009cde:	9b01      	ldr	r3, [sp, #4]
 8009ce0:	6120      	str	r0, [r4, #16]
 8009ce2:	b15b      	cbz	r3, 8009cfc <__smakebuf_r+0x70>
 8009ce4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ce8:	4630      	mov	r0, r6
 8009cea:	f000 f81d 	bl	8009d28 <_isatty_r>
 8009cee:	b128      	cbz	r0, 8009cfc <__smakebuf_r+0x70>
 8009cf0:	89a3      	ldrh	r3, [r4, #12]
 8009cf2:	f023 0303 	bic.w	r3, r3, #3
 8009cf6:	f043 0301 	orr.w	r3, r3, #1
 8009cfa:	81a3      	strh	r3, [r4, #12]
 8009cfc:	89a3      	ldrh	r3, [r4, #12]
 8009cfe:	431d      	orrs	r5, r3
 8009d00:	81a5      	strh	r5, [r4, #12]
 8009d02:	e7cf      	b.n	8009ca4 <__smakebuf_r+0x18>

08009d04 <_fstat_r>:
 8009d04:	b538      	push	{r3, r4, r5, lr}
 8009d06:	4d07      	ldr	r5, [pc, #28]	; (8009d24 <_fstat_r+0x20>)
 8009d08:	2300      	movs	r3, #0
 8009d0a:	4604      	mov	r4, r0
 8009d0c:	4608      	mov	r0, r1
 8009d0e:	4611      	mov	r1, r2
 8009d10:	602b      	str	r3, [r5, #0]
 8009d12:	f7f8 f846 	bl	8001da2 <_fstat>
 8009d16:	1c43      	adds	r3, r0, #1
 8009d18:	d102      	bne.n	8009d20 <_fstat_r+0x1c>
 8009d1a:	682b      	ldr	r3, [r5, #0]
 8009d1c:	b103      	cbz	r3, 8009d20 <_fstat_r+0x1c>
 8009d1e:	6023      	str	r3, [r4, #0]
 8009d20:	bd38      	pop	{r3, r4, r5, pc}
 8009d22:	bf00      	nop
 8009d24:	20004fa4 	.word	0x20004fa4

08009d28 <_isatty_r>:
 8009d28:	b538      	push	{r3, r4, r5, lr}
 8009d2a:	4d06      	ldr	r5, [pc, #24]	; (8009d44 <_isatty_r+0x1c>)
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	4604      	mov	r4, r0
 8009d30:	4608      	mov	r0, r1
 8009d32:	602b      	str	r3, [r5, #0]
 8009d34:	f7f8 f845 	bl	8001dc2 <_isatty>
 8009d38:	1c43      	adds	r3, r0, #1
 8009d3a:	d102      	bne.n	8009d42 <_isatty_r+0x1a>
 8009d3c:	682b      	ldr	r3, [r5, #0]
 8009d3e:	b103      	cbz	r3, 8009d42 <_isatty_r+0x1a>
 8009d40:	6023      	str	r3, [r4, #0]
 8009d42:	bd38      	pop	{r3, r4, r5, pc}
 8009d44:	20004fa4 	.word	0x20004fa4

08009d48 <_sbrk_r>:
 8009d48:	b538      	push	{r3, r4, r5, lr}
 8009d4a:	4d06      	ldr	r5, [pc, #24]	; (8009d64 <_sbrk_r+0x1c>)
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	4604      	mov	r4, r0
 8009d50:	4608      	mov	r0, r1
 8009d52:	602b      	str	r3, [r5, #0]
 8009d54:	f7f8 f84e 	bl	8001df4 <_sbrk>
 8009d58:	1c43      	adds	r3, r0, #1
 8009d5a:	d102      	bne.n	8009d62 <_sbrk_r+0x1a>
 8009d5c:	682b      	ldr	r3, [r5, #0]
 8009d5e:	b103      	cbz	r3, 8009d62 <_sbrk_r+0x1a>
 8009d60:	6023      	str	r3, [r4, #0]
 8009d62:	bd38      	pop	{r3, r4, r5, pc}
 8009d64:	20004fa4 	.word	0x20004fa4

08009d68 <__assert_func>:
 8009d68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009d6a:	4614      	mov	r4, r2
 8009d6c:	461a      	mov	r2, r3
 8009d6e:	4b09      	ldr	r3, [pc, #36]	; (8009d94 <__assert_func+0x2c>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	4605      	mov	r5, r0
 8009d74:	68d8      	ldr	r0, [r3, #12]
 8009d76:	b14c      	cbz	r4, 8009d8c <__assert_func+0x24>
 8009d78:	4b07      	ldr	r3, [pc, #28]	; (8009d98 <__assert_func+0x30>)
 8009d7a:	9100      	str	r1, [sp, #0]
 8009d7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009d80:	4906      	ldr	r1, [pc, #24]	; (8009d9c <__assert_func+0x34>)
 8009d82:	462b      	mov	r3, r5
 8009d84:	f000 f844 	bl	8009e10 <fiprintf>
 8009d88:	f000 f854 	bl	8009e34 <abort>
 8009d8c:	4b04      	ldr	r3, [pc, #16]	; (8009da0 <__assert_func+0x38>)
 8009d8e:	461c      	mov	r4, r3
 8009d90:	e7f3      	b.n	8009d7a <__assert_func+0x12>
 8009d92:	bf00      	nop
 8009d94:	20000068 	.word	0x20000068
 8009d98:	0800a387 	.word	0x0800a387
 8009d9c:	0800a394 	.word	0x0800a394
 8009da0:	0800a3c2 	.word	0x0800a3c2

08009da4 <_calloc_r>:
 8009da4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009da6:	fba1 2402 	umull	r2, r4, r1, r2
 8009daa:	b94c      	cbnz	r4, 8009dc0 <_calloc_r+0x1c>
 8009dac:	4611      	mov	r1, r2
 8009dae:	9201      	str	r2, [sp, #4]
 8009db0:	f7ff f94c 	bl	800904c <_malloc_r>
 8009db4:	9a01      	ldr	r2, [sp, #4]
 8009db6:	4605      	mov	r5, r0
 8009db8:	b930      	cbnz	r0, 8009dc8 <_calloc_r+0x24>
 8009dba:	4628      	mov	r0, r5
 8009dbc:	b003      	add	sp, #12
 8009dbe:	bd30      	pop	{r4, r5, pc}
 8009dc0:	220c      	movs	r2, #12
 8009dc2:	6002      	str	r2, [r0, #0]
 8009dc4:	2500      	movs	r5, #0
 8009dc6:	e7f8      	b.n	8009dba <_calloc_r+0x16>
 8009dc8:	4621      	mov	r1, r4
 8009dca:	f7fe f96d 	bl	80080a8 <memset>
 8009dce:	e7f4      	b.n	8009dba <_calloc_r+0x16>

08009dd0 <__ascii_mbtowc>:
 8009dd0:	b082      	sub	sp, #8
 8009dd2:	b901      	cbnz	r1, 8009dd6 <__ascii_mbtowc+0x6>
 8009dd4:	a901      	add	r1, sp, #4
 8009dd6:	b142      	cbz	r2, 8009dea <__ascii_mbtowc+0x1a>
 8009dd8:	b14b      	cbz	r3, 8009dee <__ascii_mbtowc+0x1e>
 8009dda:	7813      	ldrb	r3, [r2, #0]
 8009ddc:	600b      	str	r3, [r1, #0]
 8009dde:	7812      	ldrb	r2, [r2, #0]
 8009de0:	1e10      	subs	r0, r2, #0
 8009de2:	bf18      	it	ne
 8009de4:	2001      	movne	r0, #1
 8009de6:	b002      	add	sp, #8
 8009de8:	4770      	bx	lr
 8009dea:	4610      	mov	r0, r2
 8009dec:	e7fb      	b.n	8009de6 <__ascii_mbtowc+0x16>
 8009dee:	f06f 0001 	mvn.w	r0, #1
 8009df2:	e7f8      	b.n	8009de6 <__ascii_mbtowc+0x16>

08009df4 <__ascii_wctomb>:
 8009df4:	b149      	cbz	r1, 8009e0a <__ascii_wctomb+0x16>
 8009df6:	2aff      	cmp	r2, #255	; 0xff
 8009df8:	bf85      	ittet	hi
 8009dfa:	238a      	movhi	r3, #138	; 0x8a
 8009dfc:	6003      	strhi	r3, [r0, #0]
 8009dfe:	700a      	strbls	r2, [r1, #0]
 8009e00:	f04f 30ff 	movhi.w	r0, #4294967295
 8009e04:	bf98      	it	ls
 8009e06:	2001      	movls	r0, #1
 8009e08:	4770      	bx	lr
 8009e0a:	4608      	mov	r0, r1
 8009e0c:	4770      	bx	lr
	...

08009e10 <fiprintf>:
 8009e10:	b40e      	push	{r1, r2, r3}
 8009e12:	b503      	push	{r0, r1, lr}
 8009e14:	4601      	mov	r1, r0
 8009e16:	ab03      	add	r3, sp, #12
 8009e18:	4805      	ldr	r0, [pc, #20]	; (8009e30 <fiprintf+0x20>)
 8009e1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e1e:	6800      	ldr	r0, [r0, #0]
 8009e20:	9301      	str	r3, [sp, #4]
 8009e22:	f7ff fd45 	bl	80098b0 <_vfiprintf_r>
 8009e26:	b002      	add	sp, #8
 8009e28:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e2c:	b003      	add	sp, #12
 8009e2e:	4770      	bx	lr
 8009e30:	20000068 	.word	0x20000068

08009e34 <abort>:
 8009e34:	b508      	push	{r3, lr}
 8009e36:	2006      	movs	r0, #6
 8009e38:	f000 f82c 	bl	8009e94 <raise>
 8009e3c:	2001      	movs	r0, #1
 8009e3e:	f7f7 ff61 	bl	8001d04 <_exit>

08009e42 <_raise_r>:
 8009e42:	291f      	cmp	r1, #31
 8009e44:	b538      	push	{r3, r4, r5, lr}
 8009e46:	4604      	mov	r4, r0
 8009e48:	460d      	mov	r5, r1
 8009e4a:	d904      	bls.n	8009e56 <_raise_r+0x14>
 8009e4c:	2316      	movs	r3, #22
 8009e4e:	6003      	str	r3, [r0, #0]
 8009e50:	f04f 30ff 	mov.w	r0, #4294967295
 8009e54:	bd38      	pop	{r3, r4, r5, pc}
 8009e56:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009e58:	b112      	cbz	r2, 8009e60 <_raise_r+0x1e>
 8009e5a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009e5e:	b94b      	cbnz	r3, 8009e74 <_raise_r+0x32>
 8009e60:	4620      	mov	r0, r4
 8009e62:	f000 f831 	bl	8009ec8 <_getpid_r>
 8009e66:	462a      	mov	r2, r5
 8009e68:	4601      	mov	r1, r0
 8009e6a:	4620      	mov	r0, r4
 8009e6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e70:	f000 b818 	b.w	8009ea4 <_kill_r>
 8009e74:	2b01      	cmp	r3, #1
 8009e76:	d00a      	beq.n	8009e8e <_raise_r+0x4c>
 8009e78:	1c59      	adds	r1, r3, #1
 8009e7a:	d103      	bne.n	8009e84 <_raise_r+0x42>
 8009e7c:	2316      	movs	r3, #22
 8009e7e:	6003      	str	r3, [r0, #0]
 8009e80:	2001      	movs	r0, #1
 8009e82:	e7e7      	b.n	8009e54 <_raise_r+0x12>
 8009e84:	2400      	movs	r4, #0
 8009e86:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009e8a:	4628      	mov	r0, r5
 8009e8c:	4798      	blx	r3
 8009e8e:	2000      	movs	r0, #0
 8009e90:	e7e0      	b.n	8009e54 <_raise_r+0x12>
	...

08009e94 <raise>:
 8009e94:	4b02      	ldr	r3, [pc, #8]	; (8009ea0 <raise+0xc>)
 8009e96:	4601      	mov	r1, r0
 8009e98:	6818      	ldr	r0, [r3, #0]
 8009e9a:	f7ff bfd2 	b.w	8009e42 <_raise_r>
 8009e9e:	bf00      	nop
 8009ea0:	20000068 	.word	0x20000068

08009ea4 <_kill_r>:
 8009ea4:	b538      	push	{r3, r4, r5, lr}
 8009ea6:	4d07      	ldr	r5, [pc, #28]	; (8009ec4 <_kill_r+0x20>)
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	4604      	mov	r4, r0
 8009eac:	4608      	mov	r0, r1
 8009eae:	4611      	mov	r1, r2
 8009eb0:	602b      	str	r3, [r5, #0]
 8009eb2:	f7f7 ff17 	bl	8001ce4 <_kill>
 8009eb6:	1c43      	adds	r3, r0, #1
 8009eb8:	d102      	bne.n	8009ec0 <_kill_r+0x1c>
 8009eba:	682b      	ldr	r3, [r5, #0]
 8009ebc:	b103      	cbz	r3, 8009ec0 <_kill_r+0x1c>
 8009ebe:	6023      	str	r3, [r4, #0]
 8009ec0:	bd38      	pop	{r3, r4, r5, pc}
 8009ec2:	bf00      	nop
 8009ec4:	20004fa4 	.word	0x20004fa4

08009ec8 <_getpid_r>:
 8009ec8:	f7f7 bf04 	b.w	8001cd4 <_getpid>

08009ecc <_init>:
 8009ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ece:	bf00      	nop
 8009ed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ed2:	bc08      	pop	{r3}
 8009ed4:	469e      	mov	lr, r3
 8009ed6:	4770      	bx	lr

08009ed8 <_fini>:
 8009ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eda:	bf00      	nop
 8009edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ede:	bc08      	pop	{r3}
 8009ee0:	469e      	mov	lr, r3
 8009ee2:	4770      	bx	lr
